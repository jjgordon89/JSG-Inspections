{"version":3,"file":"static/js/948.712f883a.chunk.js","mappings":"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","sources":["components/WorkOrderCreateForm.js","components/WorkOrderCompletionForm.js","components/WorkOrderCard.js","components/WorkOrders.js"],"sourcesContent":["import React from 'react';\nimport './WorkOrderCreateForm.css';\n\nconst WorkOrderCreateForm = ({ \n  newWorkOrder, \n  setNewWorkOrder, \n  equipment, \n  onSubmit, \n  onCancel \n}) => {\n  const handleInputChange = (field, value) => {\n    setNewWorkOrder(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <div className=\"modal-header\">\n          <h2>Create New Work Order</h2>\n          <button \n            className=\"close-button\"\n            onClick={onCancel}\n          >\n            ×\n          </button>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"create-form\">\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Equipment *</label>\n              <select\n                value={newWorkOrder.equipmentId}\n                onChange={(e) => handleInputChange('equipmentId', e.target.value)}\n                required\n              >\n                <option value=\"\">Select Equipment</option>\n                {equipment.map(eq => (\n                  <option key={eq.id} value={eq.id}>\n                    {eq.identifier} - {eq.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Work Type</label>\n              <select\n                value={newWorkOrder.workType}\n                onChange={(e) => handleInputChange('workType', e.target.value)}\n              >\n                <option value=\"corrective\">Corrective</option>\n                <option value=\"preventive\">Preventive</option>\n                <option value=\"emergency\">Emergency</option>\n                <option value=\"project\">Project</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label>Title *</label>\n            <input\n              type=\"text\"\n              value={newWorkOrder.title}\n              onChange={(e) => handleInputChange('title', e.target.value)}\n              placeholder=\"Brief description of work to be performed\"\n              required\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Description</label>\n            <textarea\n              value={newWorkOrder.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              rows=\"4\"\n              placeholder=\"Detailed description of the work required, including any specific instructions or safety considerations\"\n            />\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Priority</label>\n              <select\n                value={newWorkOrder.priority}\n                onChange={(e) => handleInputChange('priority', e.target.value)}\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"critical\">Critical</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Estimated Hours</label>\n              <input\n                type=\"number\"\n                step=\"0.5\"\n                min=\"0\"\n                value={newWorkOrder.estimatedHours}\n                onChange={(e) => handleInputChange('estimatedHours', e.target.value)}\n                placeholder=\"0.0\"\n              />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label>Assigned To</label>\n              <input\n                type=\"text\"\n                value={newWorkOrder.assignedTo}\n                onChange={(e) => handleInputChange('assignedTo', e.target.value)}\n                placeholder=\"Technician or team member name\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label>Scheduled Date</label>\n              <input\n                type=\"date\"\n                value={newWorkOrder.scheduledDate}\n                onChange={(e) => handleInputChange('scheduledDate', e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className=\"form-actions\">\n            <button type=\"button\" onClick={onCancel} className=\"cancel-button\">\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"submit-button\">\n              Create Work Order\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkOrderCreateForm;","import React from 'react';\nimport './WorkOrderCompletionForm.css';\n\nconst WorkOrderCompletionForm = ({ \n  workOrder, \n  completionData, \n  setCompletionData, \n  onSubmit, \n  onCancel \n}) => {\n  const handleInputChange = (field, value) => {\n    setCompletionData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const calculateTotalCost = () => {\n    const partsCost = parseFloat(completionData.partsCost) || 0;\n    const laborCost = parseFloat(completionData.laborCost) || 0;\n    return (partsCost + laborCost).toFixed(2);\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <div className=\"modal-header\">\n          <h2>Complete Work Order - {workOrder.wo_number}</h2>\n          <button \n            className=\"close-button\"\n            onClick={onCancel}\n          >\n            ×\n          </button>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"completion-form\">\n          <div className=\"completion-summary\">\n            <h3>{workOrder.title}</h3>\n            <div className=\"summary-details\">\n              <div className=\"summary-item\">\n                <span className=\"summary-label\">Equipment:</span>\n                <span className=\"summary-value\">{workOrder.equipment_identifier}</span>\n              </div>\n              {workOrder.estimated_hours && (\n                <div className=\"summary-item\">\n                  <span className=\"summary-label\">Estimated Hours:</span>\n                  <span className=\"summary-value\">{workOrder.estimated_hours}h</span>\n                </div>\n              )}\n              <div className=\"summary-item\">\n                <span className=\"summary-label\">Work Type:</span>\n                <span className=\"summary-value\">{workOrder.work_type}</span>\n              </div>\n              <div className=\"summary-item\">\n                <span className=\"summary-label\">Priority:</span>\n                <span className=\"summary-value\">{workOrder.priority}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"form-section\">\n            <h4>Work Completion Details</h4>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Actual Hours Worked *</label>\n                <input\n                  type=\"number\"\n                  step=\"0.5\"\n                  min=\"0\"\n                  value={completionData.actualHours}\n                  onChange={(e) => handleInputChange('actualHours', e.target.value)}\n                  placeholder=\"0.0\"\n                  required\n                />\n                <small className=\"form-help\">\n                  Total time spent on this work order\n                </small>\n              </div>\n\n              <div className=\"form-group\">\n                <label>Parts Cost ($)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={completionData.partsCost}\n                  onChange={(e) => handleInputChange('partsCost', e.target.value)}\n                  placeholder=\"0.00\"\n                />\n                <small className=\"form-help\">\n                  Cost of parts and materials used\n                </small>\n              </div>\n            </div>\n\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label>Labor Cost ($)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"0\"\n                  value={completionData.laborCost}\n                  onChange={(e) => handleInputChange('laborCost', e.target.value)}\n                  placeholder=\"0.00\"\n                />\n                <small className=\"form-help\">\n                  Labor charges for this work\n                </small>\n              </div>\n\n              <div className=\"form-group\">\n                <label>Total Cost</label>\n                <input\n                  type=\"text\"\n                  value={`$${calculateTotalCost()}`}\n                  disabled\n                  className=\"calculated-field\"\n                />\n                <small className=\"form-help\">\n                  Automatically calculated total\n                </small>\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label>Completion Notes *</label>\n              <textarea\n                value={completionData.completionNotes}\n                onChange={(e) => handleInputChange('completionNotes', e.target.value)}\n                rows=\"6\"\n                placeholder=\"Describe work performed, any issues encountered, parts used, and recommendations for future maintenance...\"\n                required\n              />\n              <small className=\"form-help\">\n                Detailed description of work completed, issues found, and recommendations\n              </small>\n            </div>\n          </div>\n\n          <div className=\"form-actions\">\n            <button type=\"button\" onClick={onCancel} className=\"cancel-button\">\n              Cancel\n            </button>\n            <button type=\"submit\" className=\"submit-button\">\n              Complete Work Order\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkOrderCompletionForm;","import React from 'react';\nimport './WorkOrderCard.css';\n\nconst WorkOrderCard = ({ \n  workOrder, \n  onStatusChange, \n  onComplete, \n  onViewDetails,\n  getStatusBadge,\n  getPriorityBadge,\n  getWorkTypeBadge \n}) => {\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Not set';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatCurrency = (amount) => {\n    if (!amount) return '$0.00';\n    return `$${parseFloat(amount).toFixed(2)}`;\n  };\n\n  const canChangeStatus = (currentStatus) => {\n    return ['draft', 'approved', 'assigned', 'in_progress'].includes(currentStatus);\n  };\n\n  const getNextStatus = (currentStatus) => {\n    const statusFlow = {\n      'draft': 'approved',\n      'approved': 'assigned',\n      'assigned': 'in_progress',\n      'in_progress': 'completed'\n    };\n    return statusFlow[currentStatus];\n  };\n\n  const getStatusAction = (status) => {\n    const actions = {\n      'draft': 'Approve',\n      'approved': 'Assign',\n      'assigned': 'Start Work',\n      'in_progress': 'Complete'\n    };\n    return actions[status] || 'Update';\n  };\n\n  return (\n    <div className=\"work-order-card\">\n      <div className=\"card-header\">\n        <div className=\"wo-number\">{workOrder.wo_number}</div>\n        <div className=\"card-badges\">\n          {getStatusBadge(workOrder.status)}\n          {getPriorityBadge(workOrder.priority)}\n          {getWorkTypeBadge(workOrder.work_type)}\n        </div>\n      </div>\n\n      <div className=\"card-content\">\n        <h3 className=\"wo-title\">{workOrder.title}</h3>\n        <p className=\"wo-description\">{workOrder.description}</p>\n        \n        <div className=\"wo-details\">\n          <div className=\"detail-item\">\n            <span className=\"detail-label\">Equipment:</span>\n            <span className=\"detail-value\">{workOrder.equipment_identifier}</span>\n          </div>\n          \n          {workOrder.assigned_to && (\n            <div className=\"detail-item\">\n              <span className=\"detail-label\">Assigned to:</span>\n              <span className=\"detail-value\">{workOrder.assigned_to}</span>\n            </div>\n          )}\n          \n          <div className=\"detail-item\">\n            <span className=\"detail-label\">Created:</span>\n            <span className=\"detail-value\">{formatDate(workOrder.created_at)}</span>\n          </div>\n          \n          {workOrder.scheduled_date && (\n            <div className=\"detail-item\">\n              <span className=\"detail-label\">Scheduled:</span>\n              <span className=\"detail-value\">{formatDate(workOrder.scheduled_date)}</span>\n            </div>\n          )}\n          \n          {workOrder.estimated_hours && (\n            <div className=\"detail-item\">\n              <span className=\"detail-label\">Est. Hours:</span>\n              <span className=\"detail-value\">{workOrder.estimated_hours}h</span>\n            </div>\n          )}\n          \n          {workOrder.actual_hours && (\n            <div className=\"detail-item\">\n              <span className=\"detail-label\">Actual Hours:</span>\n              <span className=\"detail-value\">{workOrder.actual_hours}h</span>\n            </div>\n          )}\n          \n          {(workOrder.parts_cost || workOrder.labor_cost) && (\n            <div className=\"detail-item\">\n              <span className=\"detail-label\">Total Cost:</span>\n              <span className=\"detail-value\">\n                {formatCurrency((workOrder.parts_cost || 0) + (workOrder.labor_cost || 0))}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"card-actions\">\n        <button \n          className=\"view-details-btn\"\n          onClick={() => onViewDetails(workOrder)}\n        >\n          View Details\n        </button>\n        \n        {canChangeStatus(workOrder.status) && (\n          <>\n            {workOrder.status === 'in_progress' ? (\n              <button \n                className=\"complete-btn\"\n                onClick={() => onComplete(workOrder)}\n              >\n                Complete\n              </button>\n            ) : (\n              <button \n                className=\"status-btn\"\n                onClick={() => onStatusChange(workOrder.id, getNextStatus(workOrder.status))}\n              >\n                {getStatusAction(workOrder.status)}\n              </button>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WorkOrderCard;","import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport WorkOrderCard from './WorkOrderCard';\r\nimport WorkOrderCreateForm from './WorkOrderCreateForm';\r\nimport WorkOrderCompletionForm from './WorkOrderCompletionForm';\r\nimport './WorkOrders.css';\r\n\r\nconst WorkOrders = () => {\r\n  const { currentUser } = useUser();\r\n  const [workOrders, setWorkOrders] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showCreateForm, setShowCreateForm] = useState(false);\r\n  const [selectedStatus, setSelectedStatus] = useState('all');\r\n  const [selectedWorkOrder, setSelectedWorkOrder] = useState(null);\r\n  const [showCompletionForm, setShowCompletionForm] = useState(false);\r\n  const [completionData, setCompletionData] = useState({\r\n    actualHours: '',\r\n    partsCost: '',\r\n    laborCost: '',\r\n    completionNotes: ''\r\n  });\r\n\r\n  const [newWorkOrder, setNewWorkOrder] = useState({\r\n    equipmentId: '',\r\n    title: '',\r\n    description: '',\r\n    workType: 'corrective',\r\n    priority: 'medium',\r\n    assignedTo: '',\r\n    estimatedHours: '',\r\n    scheduledDate: '',\r\n    deficiencyId: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [workOrdersData, equipmentData] = await Promise.all([\r\n        window.api.workOrders.getAll(),\r\n        window.api.equipment.getAll()\r\n      ]);\r\n\r\n      setWorkOrders(workOrdersData);\r\n      setEquipment(equipmentData);\r\n    } catch (err) {\r\n      console.error('Error loading work orders:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const generateWONumber = () => {\r\n    const timestamp = Date.now().toString().slice(-6);\r\n    return `WO-${timestamp}`;\r\n  };\r\n\r\n  const handleCreateWorkOrder = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const woNumber = generateWONumber();\r\n      const selectedEquipment = equipment.find(eq => eq.id === parseInt(newWorkOrder.equipmentId));\r\n      \r\n      if (!selectedEquipment) {\r\n        throw new Error('Please select valid equipment');\r\n      }\r\n\r\n      const createResult = await window.api.workOrders.create({\r\n        equipmentId: parseInt(newWorkOrder.equipmentId),\r\n        woNumber,\r\n        title: newWorkOrder.title,\r\n        description: newWorkOrder.description,\r\n        workType: newWorkOrder.workType,\r\n        priority: newWorkOrder.priority,\r\n        assignedTo: newWorkOrder.assignedTo || null,\r\n        estimatedHours: newWorkOrder.estimatedHours ? parseFloat(newWorkOrder.estimatedHours) : null,\r\n        createdBy: currentUser?.full_name || 'Unknown User',\r\n        scheduledDate: newWorkOrder.scheduledDate || null,\r\n        deficiencyId: newWorkOrder.deficiencyId\r\n      });\r\n      const createdWorkOrderId = createResult?.lastID || createResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'work_order',\r\n        entityId: createdWorkOrderId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify({ ...newWorkOrder, woNumber }),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      setShowCreateForm(false);\r\n      setNewWorkOrder({\r\n        equipmentId: '',\r\n        title: '',\r\n        description: '',\r\n        workType: 'corrective',\r\n        priority: 'medium',\r\n        assignedTo: '',\r\n        estimatedHours: '',\r\n        scheduledDate: '',\r\n        deficiencyId: null\r\n      });\r\n      \r\n      await loadData();\r\n    } catch (err) {\r\n      console.error('Error creating work order:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (workOrderId, newStatus) => {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const updateParams = {\r\n        id: workOrderId,\r\n        status: newStatus,\r\n        startedAt: newStatus === 'in_progress' ? now : null,\r\n        completedAt: newStatus === 'completed' ? now : null,\r\n        closedAt: newStatus === 'closed' ? now : null\r\n      };\r\n\r\n      await window.api.workOrders.updateStatus(updateParams);\r\n      \r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'update',\r\n        entityType: 'work_order',\r\n        entityId: workOrderId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify({ status: newStatus }),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      await loadData();\r\n    } catch (err) {\r\n      console.error('Error updating work order status:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleCompleteWorkOrder = async (workOrder) => {\r\n    setSelectedWorkOrder(workOrder);\r\n    setCompletionData({\r\n      actualHours: '',\r\n      partsCost: '',\r\n      laborCost: '',\r\n      completionNotes: ''\r\n    });\r\n    setShowCompletionForm(true);\r\n  };\r\n\r\n  const handleSubmitCompletion = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      await window.api.workOrders.complete({\r\n        id: selectedWorkOrder.id,\r\n        actualHours: completionData.actualHours ? parseFloat(completionData.actualHours) : null,\r\n        partsCost: completionData.partsCost ? parseFloat(completionData.partsCost) : null,\r\n        laborCost: completionData.laborCost ? parseFloat(completionData.laborCost) : null,\r\n        completionNotes: completionData.completionNotes || null\r\n      });\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'complete',\r\n        entityType: 'work_order',\r\n        entityId: selectedWorkOrder.id,\r\n        oldValues: JSON.stringify({ status: 'in_progress' }),\r\n        newValues: JSON.stringify({ \r\n          status: 'completed',\r\n          ...completionData\r\n        }),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      setShowCompletionForm(false);\r\n      setSelectedWorkOrder(null);\r\n      setCompletionData({\r\n        actualHours: '',\r\n        partsCost: '',\r\n        laborCost: '',\r\n        completionNotes: ''\r\n      });\r\n      \r\n      await loadData();\r\n    } catch (err) {\r\n      console.error('Error completing work order:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status) => {\r\n    const statusConfig = {\r\n      draft: { class: 'status-draft', label: 'Draft' },\r\n      approved: { class: 'status-approved', label: 'Approved' },\r\n      assigned: { class: 'status-assigned', label: 'Assigned' },\r\n      in_progress: { class: 'status-in-progress', label: 'In Progress' },\r\n      completed: { class: 'status-completed', label: 'Completed' },\r\n      closed: { class: 'status-closed', label: 'Closed' },\r\n      cancelled: { class: 'status-cancelled', label: 'Cancelled' }\r\n    };\r\n\r\n    const config = statusConfig[status] || { class: 'status-unknown', label: status };\r\n    return <span className={`status-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const getPriorityBadge = (priority) => {\r\n    const priorityConfig = {\r\n      low: { class: 'priority-low', label: 'Low' },\r\n      medium: { class: 'priority-medium', label: 'Medium' },\r\n      high: { class: 'priority-high', label: 'High' },\r\n      critical: { class: 'priority-critical', label: 'Critical' }\r\n    };\r\n\r\n    const config = priorityConfig[priority] || { class: 'priority-unknown', label: priority };\r\n    return <span className={`priority-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const getWorkTypeBadge = (workType) => {\r\n    const typeConfig = {\r\n      preventive: { class: 'type-preventive', label: 'Preventive', icon: '🔧' },\r\n      corrective: { class: 'type-corrective', label: 'Corrective', icon: '⚠️' },\r\n      emergency: { class: 'type-emergency', label: 'Emergency', icon: '🚨' },\r\n      project: { class: 'type-project', label: 'Project', icon: '📋' }\r\n    };\r\n\r\n    const config = typeConfig[workType] || { class: 'type-unknown', label: workType, icon: '❓' };\r\n    return (\r\n      <span className={`work-type-badge ${config.class}`}>\r\n        {config.icon} {config.label}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const filteredWorkOrders = workOrders.filter(wo => {\r\n    if (selectedStatus === 'all') return true;\r\n    if (selectedStatus === 'open') return ['draft', 'approved', 'assigned'].includes(wo.status);\r\n    return wo.status === selectedStatus;\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"work-orders\">\r\n        <div className=\"work-orders-header\">\r\n          <h1>Work Orders</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading work orders...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"work-orders\">\r\n        <div className=\"work-orders-header\">\r\n          <h1>Work Orders</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading work orders: {error}</p>\r\n          <button onClick={loadData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"work-orders\">\r\n      <div className=\"work-orders-header\">\r\n        <h1>Work Orders</h1>\r\n        <div className=\"header-actions\">\r\n          <div className=\"filter-controls\">\r\n            <select \r\n              value={selectedStatus} \r\n              onChange={(e) => setSelectedStatus(e.target.value)}\r\n              className=\"status-filter\"\r\n            >\r\n              <option value=\"all\">All Status</option>\r\n              <option value=\"open\">Open</option>\r\n              <option value=\"draft\">Draft</option>\r\n              <option value=\"approved\">Approved</option>\r\n              <option value=\"assigned\">Assigned</option>\r\n              <option value=\"in_progress\">In Progress</option>\r\n              <option value=\"completed\">Completed</option>\r\n              <option value=\"closed\">Closed</option>\r\n            </select>\r\n          </div>\r\n          <button \r\n            className=\"create-button\"\r\n            onClick={() => setShowCreateForm(true)}\r\n          >\r\n            + Create Work Order\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Work Orders Summary */}\r\n      <div className=\"work-orders-summary\">\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value\">{workOrders.length}</span>\r\n          <span className=\"summary-label\">Total Work Orders</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-warning\">\r\n            {workOrders.filter(wo => ['draft', 'approved', 'assigned'].includes(wo.status)).length}\r\n          </span>\r\n          <span className=\"summary-label\">Open</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-good\">\r\n            {workOrders.filter(wo => wo.status === 'in_progress').length}\r\n          </span>\r\n          <span className=\"summary-label\">In Progress</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-critical\">\r\n            {workOrders.filter(wo => wo.priority === 'critical').length}\r\n          </span>\r\n          <span className=\"summary-label\">Critical Priority</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Work Orders List */}\r\n      <div className=\"work-orders-list\">\r\n        {filteredWorkOrders.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <p>No work orders found for the selected filter.</p>\r\n            <button \r\n              className=\"create-button\"\r\n              onClick={() => setShowCreateForm(true)}\r\n            >\r\n              Create First Work Order\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          filteredWorkOrders.map(wo => (\r\n            <WorkOrderCard\r\n              key={wo.id}\r\n              workOrder={wo}\r\n              onStatusChange={handleStatusChange}\r\n              onComplete={handleCompleteWorkOrder}\r\n              onViewDetails={setSelectedWorkOrder}\r\n              getStatusBadge={getStatusBadge}\r\n              getPriorityBadge={getPriorityBadge}\r\n              getWorkTypeBadge={getWorkTypeBadge}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* Create Work Order Modal */}\r\n      {showCreateForm && (\r\n        <WorkOrderCreateForm\r\n          newWorkOrder={newWorkOrder}\r\n          setNewWorkOrder={setNewWorkOrder}\r\n          equipment={equipment}\r\n          onSubmit={handleCreateWorkOrder}\r\n          onCancel={() => setShowCreateForm(false)}\r\n        />\r\n      )}\r\n\r\n      {/* Work Order Details Modal */}\r\n      {selectedWorkOrder && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content large\">\r\n            <div className=\"modal-header\">\r\n              <h2>Work Order Details - {selectedWorkOrder.wo_number}</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => setSelectedWorkOrder(null)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"work-order-details-content\">\r\n              <div className=\"details-section\">\r\n                <h3>Basic Information</h3>\r\n                <div className=\"details-grid\">\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Equipment:</span>\r\n                    <span className=\"detail-value\">{selectedWorkOrder.equipment_identifier}</span>\r\n                  </div>\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Status:</span>\r\n                    {getStatusBadge(selectedWorkOrder.status)}\r\n                  </div>\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Priority:</span>\r\n                    {getPriorityBadge(selectedWorkOrder.priority)}\r\n                  </div>\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Work Type:</span>\r\n                    {getWorkTypeBadge(selectedWorkOrder.work_type)}\r\n                  </div>\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Created By:</span>\r\n                    <span className=\"detail-value\">{selectedWorkOrder.created_by}</span>\r\n                  </div>\r\n                  <div className=\"detail-item\">\r\n                    <span className=\"detail-label\">Created:</span>\r\n                    <span className=\"detail-value\">{new Date(selectedWorkOrder.created_at).toLocaleString()}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"details-section\">\r\n                <h3>Work Description</h3>\r\n                <div className=\"description-content\">\r\n                  <h4>{selectedWorkOrder.title}</h4>\r\n                  {selectedWorkOrder.description && (\r\n                    <p>{selectedWorkOrder.description}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"details-section\">\r\n                <h3>Schedule & Resources</h3>\r\n                <div className=\"details-grid\">\r\n                  {selectedWorkOrder.assigned_to && (\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Assigned To:</span>\r\n                      <span className=\"detail-value\">{selectedWorkOrder.assigned_to}</span>\r\n                    </div>\r\n                  )}\r\n                  {selectedWorkOrder.scheduled_date && (\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Scheduled Date:</span>\r\n                      <span className=\"detail-value\">{new Date(selectedWorkOrder.scheduled_date).toLocaleDateString()}</span>\r\n                    </div>\r\n                  )}\r\n                  {selectedWorkOrder.estimated_hours && (\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Estimated Hours:</span>\r\n                      <span className=\"detail-value\">{selectedWorkOrder.estimated_hours}h</span>\r\n                    </div>\r\n                  )}\r\n                  {selectedWorkOrder.actual_hours && (\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Actual Hours:</span>\r\n                      <span className=\"detail-value\">{selectedWorkOrder.actual_hours}h</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {(selectedWorkOrder.parts_cost > 0 || selectedWorkOrder.labor_cost > 0) && (\r\n                <div className=\"details-section\">\r\n                  <h3>Costs</h3>\r\n                  <div className=\"details-grid\">\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Parts Cost:</span>\r\n                      <span className=\"detail-value\">${selectedWorkOrder.parts_cost || 0}</span>\r\n                    </div>\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Labor Cost:</span>\r\n                      <span className=\"detail-value\">${selectedWorkOrder.labor_cost || 0}</span>\r\n                    </div>\r\n                    <div className=\"detail-item\">\r\n                      <span className=\"detail-label\">Total Cost:</span>\r\n                      <span className=\"detail-value total-cost\">\r\n                        ${(selectedWorkOrder.parts_cost || 0) + (selectedWorkOrder.labor_cost || 0)}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {selectedWorkOrder.completion_notes && (\r\n                <div className=\"details-section\">\r\n                  <h3>Completion Notes</h3>\r\n                  <p>{selectedWorkOrder.completion_notes}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"modal-actions\">\r\n              <button \r\n                className=\"close-modal-button\"\r\n                onClick={() => setSelectedWorkOrder(null)}\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Work Order Completion Modal */}\r\n      {showCompletionForm && selectedWorkOrder && (\r\n        <WorkOrderCompletionForm\r\n          selectedWorkOrder={selectedWorkOrder}\r\n          completionData={completionData}\r\n          setCompletionData={setCompletionData}\r\n          onSubmit={handleSubmitCompletion}\r\n          onCancel={() => setShowCompletionForm(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkOrders;\r\n"],"names":["_ref","newWorkOrder","setNewWorkOrder","equipment","onSubmit","onCancel","handleInputChange","field","value","prev","_jsx","className","children","_jsxs","onClick","equipmentId","onChange","e","target","required","map","eq","id","identifier","name","workType","type","title","placeholder","description","rows","priority","step","min","estimatedHours","assignedTo","scheduledDate","workOrder","completionData","setCompletionData","wo_number","equipment_identifier","estimated_hours","work_type","actualHours","partsCost","laborCost","parseFloat","toFixed","disabled","completionNotes","onStatusChange","onComplete","onViewDetails","getStatusBadge","getPriorityBadge","getWorkTypeBadge","formatDate","dateString","Date","toLocaleDateString","status","assigned_to","created_at","scheduled_date","actual_hours","parts_cost","labor_cost","amount","currentStatus","includes","_Fragment","getNextStatus","WorkOrders","currentUser","useUser","workOrders","setWorkOrders","useState","setEquipment","loading","setLoading","error","setError","showCreateForm","setShowCreateForm","selectedStatus","setSelectedStatus","selectedWorkOrder","setSelectedWorkOrder","showCompletionForm","setShowCompletionForm","deficiencyId","useEffect","loadData","async","workOrdersData","equipmentData","Promise","all","window","api","getAll","err","console","message","handleStatusChange","workOrderId","newStatus","now","toISOString","updateParams","startedAt","completedAt","closedAt","updateStatus","auditLog","create","userId","username","action","entityType","entityId","oldValues","newValues","JSON","stringify","ipAddress","userAgent","navigator","handleCompleteWorkOrder","config","draft","class","label","approved","assigned","in_progress","completed","closed","cancelled","low","medium","high","critical","preventive","icon","corrective","emergency","project","filteredWorkOrders","filter","wo","length","WorkOrderCard","WorkOrderCreateForm","preventDefault","woNumber","toString","slice","find","parseInt","Error","createResult","createdBy","full_name","createdWorkOrderId","lastID","created_by","toLocaleString","completion_notes","WorkOrderCompletionForm","complete"],"sourceRoot":""}