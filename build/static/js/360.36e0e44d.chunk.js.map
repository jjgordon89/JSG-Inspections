{"version":3,"file":"static/js/360.36e0e44d.chunk.js","mappings":"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","sources":["utils/dataCache.js","components/Dashboard.js","utils/performance.js","components/PerformanceMonitor.js"],"sourcesContent":["/**\n * Data Caching Layer\n * \n * Provides intelligent caching for frequently accessed database operations\n * to improve performance and reduce database load.\n */\n\nclass DataCache {\n  constructor() {\n    this.cache = new Map();\n    this.cacheTimestamps = new Map();\n    this.defaultTTL = 5 * 60 * 1000; // 5 minutes default TTL\n    this.maxCacheSize = 100; // Maximum number of cached items\n    \n    // Different TTL for different data types\n    this.ttlConfig = {\n      'equipment.getAll': 10 * 60 * 1000, // 10 minutes - equipment changes less frequently\n      'equipment.getStatusCounts': 5 * 60 * 1000, // 5 minutes\n      'equipment.getDistinctTypes': 30 * 60 * 1000, // 30 minutes - types rarely change\n      'inspections.getCount': 2 * 60 * 1000, // 2 minutes - inspections change more frequently\n      'inspections.getPerMonth': 10 * 60 * 1000, // 10 minutes\n      'inspections.getComplianceStatus': 5 * 60 * 1000, // 5 minutes\n      'inspections.getOverdue': 5 * 60 * 1000, // 5 minutes\n      'scheduledInspections.getUpcoming': 5 * 60 * 1000, // 5 minutes\n      'loadTests.getTotal': 10 * 60 * 1000, // 10 minutes\n      'loadTests.getOverdue': 5 * 60 * 1000, // 5 minutes\n      'calibrations.getTotal': 10 * 60 * 1000, // 10 minutes\n      'calibrations.getOverdue': 5 * 60 * 1000, // 5 minutes\n      'certificates.getTotal': 10 * 60 * 1000, // 10 minutes\n      'credentials.getTotal': 10 * 60 * 1000, // 10 minutes\n      'credentials.getExpiring': 5 * 60 * 1000, // 5 minutes\n    };\n    \n    // Operations that should invalidate related cache entries\n    this.invalidationRules = {\n      'equipment.create': ['equipment.getAll', 'equipment.getStatusCounts', 'equipment.getDistinctTypes'],\n      'equipment.update': ['equipment.getAll', 'equipment.getStatusCounts'],\n      'equipment.delete': ['equipment.getAll', 'equipment.getStatusCounts'],\n      'inspections.create': ['inspections.getCount', 'inspections.getPerMonth', 'inspections.getComplianceStatus'],\n      'inspections.createFromScheduled': ['inspections.getCount', 'inspections.getPerMonth', 'inspections.getComplianceStatus'],\n      'scheduledInspections.create': ['scheduledInspections.getUpcoming'],\n      'scheduledInspections.update': ['scheduledInspections.getUpcoming'],\n      'scheduledInspections.delete': ['scheduledInspections.getUpcoming'],\n      'loadTests.create': ['loadTests.getTotal'],\n      'calibrations.create': ['calibrations.getTotal'],\n      'credentials.create': ['credentials.getTotal'],\n      'credentials.updateStatus': ['credentials.getTotal', 'credentials.getExpiring'],\n    };\n  }\n\n  /**\n   * Generate cache key from operation and parameters\n   */\n  _generateKey(category, operation, params = {}) {\n    const baseKey = `${category}.${operation}`;\n    if (Object.keys(params).length === 0) {\n      return baseKey;\n    }\n    \n    // Sort params for consistent key generation\n    const sortedParams = Object.keys(params)\n      .sort()\n      .map(key => `${key}:${JSON.stringify(params[key])}`)\n      .join('|');\n    \n    return `${baseKey}:${sortedParams}`;\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  _isValid(key) {\n    if (!this.cache.has(key) || !this.cacheTimestamps.has(key)) {\n      return false;\n    }\n    \n    const timestamp = this.cacheTimestamps.get(key);\n    const operationKey = key.split(':')[0]; // Get base operation key\n    const ttl = this.ttlConfig[operationKey] || this.defaultTTL;\n    \n    return (Date.now() - timestamp) < ttl;\n  }\n\n  /**\n   * Clean up expired cache entries\n   */\n  _cleanup() {\n    const now = Date.now();\n    const keysToDelete = [];\n    \n    for (const [key, timestamp] of this.cacheTimestamps.entries()) {\n      const operationKey = key.split(':')[0];\n      const ttl = this.ttlConfig[operationKey] || this.defaultTTL;\n      \n      if ((now - timestamp) >= ttl) {\n        keysToDelete.push(key);\n      }\n    }\n    \n    keysToDelete.forEach(key => {\n      this.cache.delete(key);\n      this.cacheTimestamps.delete(key);\n    });\n  }\n\n  /**\n   * Enforce cache size limit using LRU strategy\n   */\n  _enforceSizeLimit() {\n    if (this.cache.size <= this.maxCacheSize) {\n      return;\n    }\n    \n    // Sort by timestamp (oldest first)\n    const sortedEntries = Array.from(this.cacheTimestamps.entries())\n      .sort((a, b) => a[1] - b[1]);\n    \n    // Remove oldest entries\n    const entriesToRemove = sortedEntries.slice(0, this.cache.size - this.maxCacheSize);\n    entriesToRemove.forEach(([key]) => {\n      this.cache.delete(key);\n      this.cacheTimestamps.delete(key);\n    });\n  }\n\n  /**\n   * Get cached data if available and valid\n   */\n  get(category, operation, params = {}) {\n    const key = this._generateKey(category, operation, params);\n    \n    if (this._isValid(key)) {\n      // Update timestamp for LRU\n      this.cacheTimestamps.set(key, Date.now());\n      return this.cache.get(key);\n    }\n    \n    return null;\n  }\n\n  /**\n   * Store data in cache\n   */\n  set(category, operation, params = {}, data) {\n    const key = this._generateKey(category, operation, params);\n    \n    this.cache.set(key, data);\n    this.cacheTimestamps.set(key, Date.now());\n    \n    this._enforceSizeLimit();\n    \n    // Periodic cleanup\n    if (Math.random() < 0.1) { // 10% chance\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Invalidate cache entries based on operation\n   */\n  invalidate(category, operation) {\n    const operationKey = `${category}.${operation}`;\n    const rulesToInvalidate = this.invalidationRules[operationKey] || [];\n    \n    // Add the operation itself to invalidation list\n    const allToInvalidate = [operationKey, ...rulesToInvalidate];\n    \n    allToInvalidate.forEach(ruleKey => {\n      const keysToDelete = [];\n      \n      for (const key of this.cache.keys()) {\n        if (key.startsWith(ruleKey)) {\n          keysToDelete.push(key);\n        }\n      }\n      \n      keysToDelete.forEach(key => {\n        this.cache.delete(key);\n        this.cacheTimestamps.delete(key);\n      });\n    });\n  }\n\n  /**\n   * Clear all cache entries\n   */\n  clear() {\n    this.cache.clear();\n    this.cacheTimestamps.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxCacheSize,\n      hitRate: this.hitCount / (this.hitCount + this.missCount) || 0,\n      entries: Array.from(this.cache.keys())\n    };\n  }\n\n  /**\n   * Warm up cache with commonly accessed data\n   */\n  async warmUp(secureOperation) {\n    const warmUpOperations = [\n      { category: 'equipment', operation: 'getAll' },\n      { category: 'equipment', operation: 'getStatusCounts' },\n      { category: 'equipment', operation: 'getDistinctTypes' },\n      { category: 'inspections', operation: 'getCount' },\n      { category: 'loadTests', operation: 'getTotal' },\n      { category: 'calibrations', operation: 'getTotal' },\n      { category: 'certificates', operation: 'getTotal' },\n      { category: 'credentials', operation: 'getTotal' }\n    ];\n\n    const promises = warmUpOperations.map(async ({ category, operation }) => {\n      try {\n        const data = await secureOperation(category, operation, {});\n        this.set(category, operation, {}, data);\n      } catch (error) {\n        console.warn(`Cache warm-up failed for ${category}.${operation}:`, error);\n      }\n    });\n\n    await Promise.allSettled(promises);\n  }\n}\n\n// Create singleton instance\nconst dataCache = new DataCache();\n\n/**\n * Cached wrapper for secure database operations\n */\nexport const cachedSecureOperation = async (category, operation, params = {}) => {\n  // Check if this operation should be cached\n  const operationKey = `${category}.${operation}`;\n  const shouldCache = Object.keys(dataCache.ttlConfig).includes(operationKey) || \n                     operation.startsWith('get');\n  \n  if (!shouldCache) {\n    // For write operations, invalidate cache and execute directly\n    if (['create', 'update', 'delete'].some(op => operation.includes(op))) {\n      dataCache.invalidate(category, operation);\n    }\n    return await window.api.secureOperation(category, operation, params);\n  }\n  \n  // Try to get from cache first\n  const cachedData = dataCache.get(category, operation, params);\n  if (cachedData !== null) {\n    return cachedData;\n  }\n  \n  // Fetch from database and cache the result\n  try {\n    const data = await window.api.secureOperation(category, operation, params);\n    dataCache.set(category, operation, params, data);\n    return data;\n  } catch (error) {\n    console.error(`Cached operation failed for ${category}.${operation}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Preload commonly accessed data\n */\nexport const preloadDashboardData = async () => {\n  if (typeof window !== 'undefined' && window.api) {\n    await dataCache.warmUp(window.api.secureOperation);\n  }\n};\n\n/**\n * Clear cache (useful for testing or manual refresh)\n */\nexport const clearCache = () => {\n  dataCache.clear();\n};\n\n/**\n * Get cache statistics\n */\nexport const getCacheStats = () => {\n  return dataCache.getStats();\n};\n\nexport default dataCache;","import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement\r\n} from 'chart.js';\r\nimport './Dashboard.css';\r\nimport { useUIStore, useEquipmentStore, useInspectionStore } from '../store';\r\nimport { batchApiCalls, useMemoizedData, usePerformanceMonitor } from '../utils/performance';\r\nimport { cachedSecureOperation } from '../utils/dataCache';\r\nimport PerformanceMonitor from './PerformanceMonitor';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ArcElement\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const { darkMode } = useUIStore();\r\n  const { refresh } = useEquipmentStore();\r\n  const { viewingInspectionsFor } = useInspectionStore();\r\n  \r\n  const [dashboardData, setDashboardData] = useState({\r\n    equipment: { total: 0, active: 0, outOfService: 0, taggedOut: 0 },\r\n    inspections: { total: 0, thisMonth: 0, overdue: 0, upcoming: 0 },\r\n    workOrders: { total: 0, open: 0, inProgress: 0, overdue: 0 },\r\n    deficiencies: { total: 0, critical: 0, overdue: 0 },\r\n    pmSchedules: { total: 0, due: 0, overdue: 0 },\r\n    loadTests: { total: 0, due: 0, overdue: 0 },\r\n    calibrations: { total: 0, due: 0, overdue: 0 },\r\n    certificates: { total: 0, expiring: 0 },\r\n    credentials: { total: 0, expiring: 0 }\r\n  });\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedTimeframe, setSelectedTimeframe] = useState('30'); // days\r\n  const [showPerformanceMonitor, setShowPerformanceMonitor] = useState(false);\r\n  \r\n  const { metrics } = usePerformanceMonitor('Dashboard');\r\n\r\n  useEffect(() => {\r\n    loadDashboardData();\r\n  }, [selectedTimeframe]);\r\n\r\n  const loadDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const futureDate = new Date();\r\n      futureDate.setDate(futureDate.getDate() + parseInt(selectedTimeframe));\r\n      const futureDateStr = futureDate.toISOString().split('T')[0];\r\n\r\n      // Use cached operations for better performance\r\n      const apiCalls = [\r\n        () => cachedSecureOperation('equipment', 'getAll'),\r\n        () => cachedSecureOperation('equipment', 'getStatusCounts'),\r\n        () => cachedSecureOperation('inspections', 'getCount'),\r\n        () => cachedSecureOperation('inspections', 'getPerMonth'),\r\n        () => cachedSecureOperation('inspections', 'getOverdue'),\r\n        () => cachedSecureOperation('scheduledInspections', 'getUpcoming', today),\r\n        () => cachedSecureOperation('workOrders', 'getAll'),\r\n        () => cachedSecureOperation('workOrders', 'getDueToday'),\r\n        () => cachedSecureOperation('workOrders', 'getOverdue'),\r\n        () => cachedSecureOperation('deficiencies', 'getAll'),\r\n        () => cachedSecureOperation('deficiencies', 'getOpenCritical'),\r\n        () => cachedSecureOperation('deficiencies', 'getOverdue'),\r\n        () => cachedSecureOperation('pmSchedules', 'getTotal'),\r\n        () => cachedSecureOperation('pmSchedules', 'getDue', futureDateStr),\r\n        () => cachedSecureOperation('pmSchedules', 'getOverdue'),\r\n        () => cachedSecureOperation('loadTests', 'getTotal'),\r\n        () => cachedSecureOperation('loadTests', 'getDue', futureDateStr),\r\n        () => cachedSecureOperation('loadTests', 'getOverdue'),\r\n        () => cachedSecureOperation('calibrations', 'getTotal'),\r\n        () => cachedSecureOperation('calibrations', 'getDue', futureDateStr),\r\n        () => cachedSecureOperation('calibrations', 'getOverdue'),\r\n        () => cachedSecureOperation('certificates', 'getTotal'),\r\n        () => cachedSecureOperation('certificates', 'getExpiring', futureDateStr),\r\n        () => cachedSecureOperation('credentials', 'getTotal'),\r\n        () => cachedSecureOperation('credentials', 'getExpiring', futureDateStr)\r\n      ];\r\n\r\n      const [\r\n        equipmentData,\r\n        equipmentStatusCounts,\r\n        inspectionCount,\r\n        inspectionsByMonth,\r\n        inspectionsOverdue,\r\n        upcomingInspections,\r\n        workOrdersAll,\r\n        workOrdersDueToday,\r\n        workOrdersOverdue,\r\n        deficienciesAll,\r\n        deficienciesOpenCritical,\r\n        deficienciesOverdue,\r\n        pmSchedulesTotal,\r\n        pmSchedulesDue,\r\n        pmSchedulesOverdue,\r\n        loadTestsTotal,\r\n        loadTestsDue,\r\n        loadTestsOverdue,\r\n        calibrationsTotal,\r\n        calibrationsDue,\r\n        calibrationsOverdue,\r\n        certificatesTotal,\r\n        certificatesExpiring,\r\n        credentialsTotal,\r\n        credentialsExpiring\r\n      ] = await batchApiCalls(apiCalls, 3);\r\n\r\n      // Process equipment status counts with error handling\r\n      const statusCounts = Array.isArray(equipmentStatusCounts) \r\n        ? equipmentStatusCounts.reduce((acc, item) => {\r\n            if (item && item.status && typeof item.count === 'number') {\r\n              acc[item.status] = item.count;\r\n            }\r\n            return acc;\r\n          }, {})\r\n        : {};\r\n\r\n      // Calculate this month's inspections with error handling\r\n      const thisMonth = new Date().toISOString().substring(0, 7); // YYYY-MM\r\n      const thisMonthInspections = Array.isArray(inspectionsByMonth) \r\n        ? (inspectionsByMonth.find(item => item && item.month === thisMonth)?.count || 0)\r\n        : 0;\r\n\r\n      // Process work orders by status with error handling\r\n      const workOrdersByStatus = Array.isArray(workOrdersAll)\r\n        ? workOrdersAll.reduce((acc, wo) => {\r\n            if (wo && wo.status) {\r\n              acc[wo.status] = (acc[wo.status] || 0) + 1;\r\n            }\r\n            return acc;\r\n          }, {})\r\n        : {};\r\n\r\n      setDashboardData({\r\n        equipment: {\r\n          total: Array.isArray(equipmentData) ? equipmentData.length : 0,\r\n          active: statusCounts.active || 0,\r\n          outOfService: statusCounts.out_of_service || 0,\r\n          taggedOut: Array.isArray(equipmentData) ? equipmentData.filter(eq => eq && eq.tagged_out).length : 0\r\n        },\r\n        inspections: {\r\n          total: typeof inspectionCount === 'number' ? inspectionCount : 0,\r\n          thisMonth: thisMonthInspections,\r\n          overdue: Array.isArray(inspectionsOverdue) ? inspectionsOverdue.length : 0,\r\n          upcoming: Array.isArray(upcomingInspections) ? upcomingInspections.length : 0\r\n        },\r\n        workOrders: {\r\n          total: Array.isArray(workOrdersAll) ? workOrdersAll.length : 0,\r\n          open: (workOrdersByStatus.draft || 0) + (workOrdersByStatus.approved || 0) + (workOrdersByStatus.assigned || 0),\r\n          inProgress: workOrdersByStatus.in_progress || 0,\r\n          overdue: Array.isArray(workOrdersOverdue) ? workOrdersOverdue.length : 0\r\n        },\r\n        deficiencies: {\r\n          total: Array.isArray(deficienciesAll) ? deficienciesAll.length : 0,\r\n          critical: Array.isArray(deficienciesOpenCritical) ? deficienciesOpenCritical.length : 0,\r\n          overdue: Array.isArray(deficienciesOverdue) ? deficienciesOverdue.length : 0\r\n        },\r\n        pmSchedules: {\r\n          total: typeof pmSchedulesTotal === 'number' ? pmSchedulesTotal : 0,\r\n          due: Array.isArray(pmSchedulesDue) ? pmSchedulesDue.length : 0,\r\n          overdue: Array.isArray(pmSchedulesOverdue) ? pmSchedulesOverdue.length : 0\r\n        },\r\n        loadTests: {\r\n          total: typeof loadTestsTotal === 'number' ? loadTestsTotal : 0,\r\n          due: Array.isArray(loadTestsDue) ? loadTestsDue.length : 0,\r\n          overdue: Array.isArray(loadTestsOverdue) ? loadTestsOverdue.length : 0\r\n        },\r\n        calibrations: {\r\n          total: typeof calibrationsTotal === 'number' ? calibrationsTotal : 0,\r\n          due: Array.isArray(calibrationsDue) ? calibrationsDue.length : 0,\r\n          overdue: Array.isArray(calibrationsOverdue) ? calibrationsOverdue.length : 0\r\n        },\r\n        certificates: {\r\n          total: typeof certificatesTotal === 'number' ? certificatesTotal : 0,\r\n          expiring: Array.isArray(certificatesExpiring) ? certificatesExpiring.length : 0\r\n        },\r\n        credentials: {\r\n          total: typeof credentialsTotal === 'number' ? credentialsTotal : 0,\r\n          expiring: Array.isArray(credentialsExpiring) ? credentialsExpiring.length : 0\r\n        }\r\n      });\r\n\r\n    } catch (err) {\r\n      console.error('Error loading dashboard data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (type, value, total) => {\r\n    if (type === 'critical' && value > 0) return 'status-critical';\r\n    if (type === 'overdue' && value > 0) return 'status-overdue';\r\n    if (type === 'due' && value > 0) return 'status-warning';\r\n    if (type === 'expiring' && value > 0) return 'status-warning';\r\n    return 'status-good';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <div className=\"dashboard-header\">\r\n          <h1>CMMS Dashboard</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading dashboard data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <div className=\"dashboard-header\">\r\n          <h1>CMMS Dashboard</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading dashboard: {error}</p>\r\n          <button onClick={loadDashboardData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"dashboard-header\">\r\n        <h1>CMMS Dashboard</h1>\r\n        <div className=\"timeframe-selector\">\r\n          <label>Forecast Period:</label>\r\n          <select \r\n            value={selectedTimeframe} \r\n            onChange={(e) => setSelectedTimeframe(e.target.value)}\r\n          >\r\n            <option value=\"7\">7 Days</option>\r\n            <option value=\"30\">30 Days</option>\r\n            <option value=\"60\">60 Days</option>\r\n            <option value=\"90\">90 Days</option>\r\n          </select>\r\n          <button\r\n            onClick={() => setShowPerformanceMonitor(true)}\r\n            className=\"performance-monitor-btn\"\r\n            title=\"Open Performance Monitor\"\r\n          >\r\n            📊 Performance\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"dashboard-grid\">\r\n        {/* Equipment Overview */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Equipment Status</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value\">{dashboardData.equipment.total}</span>\r\n              <span className=\"metric-label\">Total Assets</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-good\">{dashboardData.equipment.active}</span>\r\n              <span className=\"metric-label\">Active</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('critical', dashboardData.equipment.outOfService)}`}>\r\n                {dashboardData.equipment.outOfService}\r\n              </span>\r\n              <span className=\"metric-label\">Out of Service</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('critical', dashboardData.equipment.taggedOut)}`}>\r\n                {dashboardData.equipment.taggedOut}\r\n              </span>\r\n              <span className=\"metric-label\">Tagged Out</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Inspections Overview */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Inspections</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value\">{dashboardData.inspections.total}</span>\r\n              <span className=\"metric-label\">Total</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-good\">{dashboardData.inspections.thisMonth}</span>\r\n              <span className=\"metric-label\">This Month</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('due', dashboardData.inspections.upcoming)}`}>\r\n                {dashboardData.inspections.upcoming}\r\n              </span>\r\n              <span className=\"metric-label\">Upcoming</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('overdue', dashboardData.inspections.overdue)}`}>\r\n                {dashboardData.inspections.overdue}\r\n              </span>\r\n              <span className=\"metric-label\">Overdue</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Work Orders Overview */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Work Orders</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value\">{dashboardData.workOrders.total}</span>\r\n              <span className=\"metric-label\">Total</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-warning\">{dashboardData.workOrders.open}</span>\r\n              <span className=\"metric-label\">Open</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-good\">{dashboardData.workOrders.inProgress}</span>\r\n              <span className=\"metric-label\">In Progress</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('overdue', dashboardData.workOrders.overdue)}`}>\r\n                {dashboardData.workOrders.overdue}\r\n              </span>\r\n              <span className=\"metric-label\">Overdue</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Deficiencies Overview */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Deficiencies</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value\">{dashboardData.deficiencies.total}</span>\r\n              <span className=\"metric-label\">Total</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('critical', dashboardData.deficiencies.critical)}`}>\r\n                {dashboardData.deficiencies.critical}\r\n              </span>\r\n              <span className=\"metric-label\">Critical Open</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('overdue', dashboardData.deficiencies.overdue)}`}>\r\n                {dashboardData.deficiencies.overdue}\r\n              </span>\r\n              <span className=\"metric-label\">Overdue</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-good\">\r\n                {dashboardData.deficiencies.total - dashboardData.deficiencies.critical - dashboardData.deficiencies.overdue}\r\n              </span>\r\n              <span className=\"metric-label\">On Track</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Preventive Maintenance */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Preventive Maintenance</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value\">{dashboardData.pmSchedules.total}</span>\r\n              <span className=\"metric-label\">Total Schedules</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('due', dashboardData.pmSchedules.due)}`}>\r\n                {dashboardData.pmSchedules.due}\r\n              </span>\r\n              <span className=\"metric-label\">Due Soon</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('overdue', dashboardData.pmSchedules.overdue)}`}>\r\n                {dashboardData.pmSchedules.overdue}\r\n              </span>\r\n              <span className=\"metric-label\">Overdue</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className=\"metric-value status-good\">\r\n                {Math.max(0, dashboardData.pmSchedules.total - dashboardData.pmSchedules.due - dashboardData.pmSchedules.overdue)}\r\n              </span>\r\n              <span className=\"metric-label\">Current</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Crane Compliance */}\r\n        <div className=\"dashboard-card\">\r\n          <h3>Crane Compliance</h3>\r\n          <div className=\"metrics-grid\">\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('due', dashboardData.loadTests.due)}`}>\r\n                {dashboardData.loadTests.due}\r\n              </span>\r\n              <span className=\"metric-label\">Load Tests Due</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('due', dashboardData.calibrations.due)}`}>\r\n                {dashboardData.calibrations.due}\r\n              </span>\r\n              <span className=\"metric-label\">Calibrations Due</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('expiring', dashboardData.certificates.expiring)}`}>\r\n                {dashboardData.certificates.expiring}\r\n              </span>\r\n              <span className=\"metric-label\">Certificates Expiring</span>\r\n            </div>\r\n            <div className=\"metric\">\r\n              <span className={`metric-value ${getStatusColor('expiring', dashboardData.credentials.expiring)}`}>\r\n                {dashboardData.credentials.expiring}\r\n              </span>\r\n              <span className=\"metric-label\">Credentials Expiring</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"dashboard-card quick-actions\">\r\n          <h3>Quick Actions</h3>\r\n          <div className=\"action-buttons\">\r\n            <button className=\"action-button primary\" onClick={() => window.location.hash = '#/scheduler'}>\r\n              📅 Schedule Inspection\r\n            </button>\r\n            <button className=\"action-button secondary\" onClick={() => window.location.hash = '#/work-orders'}>\r\n              🔧 Create Work Order\r\n            </button>\r\n            <button className=\"action-button secondary\" onClick={() => window.location.hash = '#/deficiencies'}>\r\n              ⚠️ View Deficiencies\r\n            </button>\r\n            <button className=\"action-button secondary\" onClick={() => window.location.hash = '#/compliance'}>\r\n              📋 Compliance Report\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <div className=\"dashboard-card recent-activity\">\r\n          <h3>Recent Activity</h3>\r\n          <div className=\"activity-list\">\r\n            <div className=\"activity-item\">\r\n              <span className=\"activity-icon\">🔍</span>\r\n              <span className=\"activity-text\">System ready for P2 feature development</span>\r\n              <span className=\"activity-time\">Just now</span>\r\n            </div>\r\n            <div className=\"activity-item\">\r\n              <span className=\"activity-icon\">✅</span>\r\n              <span className=\"activity-text\">P2 database migrations completed</span>\r\n              <span className=\"activity-time\">Just now</span>\r\n            </div>\r\n            <div className=\"activity-item\">\r\n              <span className=\"activity-icon\">🔒</span>\r\n              <span className=\"activity-text\">All secure operations implemented</span>\r\n              <span className=\"activity-time\">Just now</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* System Health */}\r\n        <div className=\"dashboard-card system-health\">\r\n          <h3>System Health</h3>\r\n          <div className=\"health-indicators\">\r\n            <div className=\"health-item\">\r\n              <span className=\"health-label\">Database</span>\r\n              <span className=\"health-status status-good\">✅ Healthy</span>\r\n            </div>\r\n            <div className=\"health-item\">\r\n              <span className=\"health-label\">Migrations</span>\r\n              <span className=\"health-status status-good\">✅ v5 Current</span>\r\n            </div>\r\n            <div className=\"health-item\">\r\n              <span className=\"health-label\">Security</span>\r\n              <span className=\"health-status status-good\">✅ Secured</span>\r\n            </div>\r\n            <div className=\"health-item\">\r\n              <span className=\"health-label\">CMMS Features</span>\r\n              <span className=\"health-status status-good\">✅ Active</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Critical Alerts */}\r\n      {(dashboardData.deficiencies.critical > 0 || \r\n        dashboardData.equipment.outOfService > 0 || \r\n        dashboardData.workOrders.overdue > 0 ||\r\n        dashboardData.loadTests.overdue > 0 ||\r\n        dashboardData.calibrations.overdue > 0 ||\r\n        dashboardData.pmSchedules.overdue > 0) && (\r\n        <div className=\"critical-alerts\">\r\n          <h3>🚨 Critical Alerts</h3>\r\n          <div className=\"alert-list\">\r\n            {dashboardData.deficiencies.critical > 0 && (\r\n              <div className=\"alert-item critical\">\r\n                <span className=\"alert-icon\">⚠️</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.deficiencies.critical} critical deficiencies require immediate attention\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/deficiencies?filter=critical'}\r\n                >\r\n                  View Details\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dashboardData.equipment.outOfService > 0 && (\r\n              <div className=\"alert-item warning\">\r\n                <span className=\"alert-icon\">🔧</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.equipment.outOfService} assets are out of service\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/equipment?filter=out_of_service'}\r\n                >\r\n                  View Assets\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dashboardData.workOrders.overdue > 0 && (\r\n              <div className=\"alert-item warning\">\r\n                <span className=\"alert-icon\">📋</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.workOrders.overdue} work orders are overdue\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/work-orders?filter=overdue'}\r\n                >\r\n                  View Work Orders\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dashboardData.loadTests.overdue > 0 && (\r\n              <div className=\"alert-item critical\">\r\n                <span className=\"alert-icon\">🏗️</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.loadTests.overdue} load tests are overdue - compliance risk!\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/load-tests?filter=overdue'}\r\n                >\r\n                  View Load Tests\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dashboardData.calibrations.overdue > 0 && (\r\n              <div className=\"alert-item warning\">\r\n                <span className=\"alert-icon\">📏</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.calibrations.overdue} calibrations are overdue\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/calibrations?filter=overdue'}\r\n                >\r\n                  View Calibrations\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dashboardData.pmSchedules.overdue > 0 && (\r\n              <div className=\"alert-item warning\">\r\n                <span className=\"alert-icon\">🔧</span>\r\n                <span className=\"alert-text\">\r\n                  {dashboardData.pmSchedules.overdue} preventive maintenance tasks are overdue\r\n                </span>\r\n                <button \r\n                  className=\"alert-action\"\r\n                  onClick={() => window.location.hash = '#/preventive-maintenance?filter=overdue'}\r\n                >\r\n                  View PM Schedule\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Compliance Summary */}\r\n      <div className=\"compliance-summary\">\r\n        <h3>📊 Compliance Summary</h3>\r\n        <div className=\"compliance-grid\">\r\n          <div className=\"compliance-item\">\r\n            <div className=\"compliance-header\">\r\n              <span className=\"compliance-title\">ASME B30 Compliance</span>\r\n              <span className=\"compliance-percentage\">\r\n                {dashboardData.equipment.total > 0 \r\n                  ? Math.round(((dashboardData.equipment.total - dashboardData.deficiencies.critical) / dashboardData.equipment.total) * 100)\r\n                  : 100}%\r\n              </span>\r\n            </div>\r\n            <div className=\"compliance-bar\">\r\n              <div \r\n                className=\"compliance-fill\"\r\n                style={{\r\n                  width: `${dashboardData.equipment.total > 0 \r\n                    ? ((dashboardData.equipment.total - dashboardData.deficiencies.critical) / dashboardData.equipment.total) * 100\r\n                    : 100}%`\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"compliance-item\">\r\n            <div className=\"compliance-header\">\r\n              <span className=\"compliance-title\">OSHA 1910.179 Compliance</span>\r\n              <span className=\"compliance-percentage\">\r\n                {dashboardData.equipment.total > 0 \r\n                  ? Math.round(((dashboardData.equipment.total - dashboardData.deficiencies.critical) / dashboardData.equipment.total) * 100)\r\n                  : 100}%\r\n              </span>\r\n            </div>\r\n            <div className=\"compliance-bar\">\r\n              <div \r\n                className=\"compliance-fill\"\r\n                style={{\r\n                  width: `${dashboardData.equipment.total > 0 \r\n                    ? ((dashboardData.equipment.total - dashboardData.deficiencies.critical) / dashboardData.equipment.total) * 100\r\n                    : 100}%`\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"dashboard-footer\">\r\n        <p>Last updated: {new Date().toLocaleString()}</p>\r\n        <p>JSG Inspections CMMS v2.0 - P2 Implementation Complete</p>\r\n      </div>\r\n\r\n      {/* Performance Monitor Modal */}\r\n      {showPerformanceMonitor && (\r\n        <PerformanceMonitor\r\n          isOpen={showPerformanceMonitor}\r\n          onClose={() => setShowPerformanceMonitor(false)}\r\n          metrics={metrics}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { memo, useMemo, useCallback, lazy } from 'react';\nimport React from 'react';\n\n/**\n * Performance optimization utilities for React components\n * Enhanced with photo optimization and bundle analysis capabilities\n */\n\n// Memoization helper for expensive calculations\nexport const useMemoizedData = (data, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return data;\n  }, dependencies);\n};\n\n// Debounced search hook\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n// Optimized list renderer with virtualization support\nexport const OptimizedList = memo(({ items, renderItem, keyExtractor, className = '' }) => {\n  const memoizedItems = useMemoizedData(items, [items]);\n  \n  return (\n    <div className={`optimized-list ${className}`}>\n      {memoizedItems.map((item, index) => (\n        <div key={keyExtractor ? keyExtractor(item, index) : index}>\n          {renderItem(item, index)}\n        </div>\n      ))}\n    </div>\n  );\n});\n\n// Lazy loading wrapper for heavy components\nexport const createLazyComponent = (importFunc, fallback = <div>Loading...</div>) => {\n  const LazyComponent = lazy(importFunc);\n  \n  return (props) => (\n    <React.Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </React.Suspense>\n  );\n};\n\n// Performance monitoring hook\nexport const usePerformanceMonitor = (componentName) => {\n  React.useEffect(() => {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      if (renderTime > 100) { // Log slow renders\n        console.warn(`Slow render detected in ${componentName}: ${renderTime.toFixed(2)}ms`);\n      }\n    };\n  });\n};\n\n// Optimized event handlers\nexport const createOptimizedHandlers = (handlers) => {\n  const memoizedHandlers = {};\n  \n  Object.keys(handlers).forEach(key => {\n    memoizedHandlers[key] = useCallback(handlers[key], []);\n  });\n  \n  return memoizedHandlers;\n};\n\n// Data filtering and sorting utilities\nexport const useOptimizedFilter = (data, filterFn, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return data.filter(filterFn);\n  }, [data, ...dependencies]);\n};\n\nexport const useOptimizedSort = (data, sortFn, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return [...data].sort(sortFn);\n  }, [data, ...dependencies]);\n};\n\n// Batch API calls utility\nexport const batchApiCalls = async (apiCalls, batchSize = 5) => {\n  const results = [];\n  \n  for (let i = 0; i < apiCalls.length; i += batchSize) {\n    const batch = apiCalls.slice(i, i + batchSize);\n    const batchResults = await Promise.all(batch);\n    results.push(...batchResults);\n    \n    // Small delay between batches to prevent overwhelming the API\n    if (i + batchSize < apiCalls.length) {\n      await new Promise(resolve => setTimeout(resolve, 50));\n    }\n  }\n  \n  return results;\n};\n\n// Memory usage monitoring\nexport const useMemoryMonitor = (componentName) => {\n  React.useEffect(() => {\n    if (performance.memory) {\n      const initialMemory = performance.memory.usedJSHeapSize;\n      \n      return () => {\n        const finalMemory = performance.memory.usedJSHeapSize;\n        const memoryDiff = finalMemory - initialMemory;\n        \n        if (memoryDiff > 1024 * 1024) { // 1MB threshold\n          console.warn(`High memory usage in ${componentName}: ${(memoryDiff / 1024 / 1024).toFixed(2)}MB`);\n        }\n      };\n    }\n  }, [componentName]);\n};\n\n// Component size optimization\nexport const withSizeOptimization = (Component) => {\n  return memo((props) => {\n    const [isVisible, setIsVisible] = React.useState(false);\n    const ref = React.useRef();\n    \n    React.useEffect(() => {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          setIsVisible(entry.isIntersecting);\n        },\n        { threshold: 0.1 }\n      );\n      \n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n      \n      return () => observer.disconnect();\n    }, []);\n    \n    return (\n      <div ref={ref}>\n        {isVisible ? <Component {...props} /> : <div style={{ height: '200px' }}>Loading...</div>}\n      </div>\n    );\n  });\n};\n\n/**\n * Photo optimization utilities\n */\nexport const PhotoOptimizer = {\n  /**\n   * Compress and resize image file\n   * @param {File} file - Image file to optimize\n   * @param {Object} options - Optimization options\n   * @returns {Promise<Blob>} - Optimized image blob\n   */\n  async optimizeImage(file, options = {}) {\n    const {\n      maxWidth = 1920,\n      maxHeight = 1080,\n      quality = 0.8,\n      format = 'image/jpeg'\n    } = options;\n\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate new dimensions\n        let { width, height } = img;\n        \n        if (width > maxWidth) {\n          height = (height * maxWidth) / width;\n          width = maxWidth;\n        }\n        \n        if (height > maxHeight) {\n          width = (width * maxHeight) / height;\n          height = maxHeight;\n        }\n\n        // Set canvas dimensions\n        canvas.width = width;\n        canvas.height = height;\n\n        // Draw and compress\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        canvas.toBlob(resolve, format, quality);\n      };\n\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  },\n\n  /**\n   * Generate multiple sizes for responsive images\n   * @param {File} file - Original image file\n   * @returns {Promise<Object>} - Object with different sized images\n   */\n  async generateResponsiveSizes(file) {\n    const sizes = {\n      thumbnail: { maxWidth: 150, maxHeight: 150, quality: 0.7 },\n      small: { maxWidth: 480, maxHeight: 320, quality: 0.8 },\n      medium: { maxWidth: 1024, maxHeight: 768, quality: 0.8 },\n      large: { maxWidth: 1920, maxHeight: 1080, quality: 0.85 }\n    };\n\n    const results = {};\n    \n    for (const [sizeName, options] of Object.entries(sizes)) {\n      try {\n        results[sizeName] = await this.optimizeImage(file, options);\n      } catch (error) {\n        console.warn(`Failed to generate ${sizeName} size:`, error);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Estimate file size reduction\n   * @param {File} originalFile - Original file\n   * @param {Blob} optimizedBlob - Optimized blob\n   * @returns {Object} - Size comparison stats\n   */\n  getSizeStats(originalFile, optimizedBlob) {\n    const originalSize = originalFile.size;\n    const optimizedSize = optimizedBlob.size;\n    const reduction = ((originalSize - optimizedSize) / originalSize) * 100;\n\n    return {\n      originalSize,\n      optimizedSize,\n      reduction: Math.round(reduction * 100) / 100,\n      compressionRatio: Math.round((originalSize / optimizedSize) * 100) / 100\n    };\n  }\n};\n\n/**\n * Bundle analysis utilities\n */\nexport const BundleAnalyzer = {\n  /**\n   * Analyze current bundle size and performance\n   * @returns {Object} - Bundle analysis results\n   */\n  analyzeBundleSize() {\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\n    const stylesheets = Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n    \n    const analysis = {\n      scripts: scripts.map(script => ({\n        src: script.src,\n        async: script.async,\n        defer: script.defer\n      })),\n      stylesheets: stylesheets.map(link => ({\n        href: link.href,\n        media: link.media\n      })),\n      totalScripts: scripts.length,\n      totalStylesheets: stylesheets.length\n    };\n\n    return analysis;\n  },\n\n  /**\n   * Monitor resource loading performance\n   * @returns {Object} - Resource loading metrics\n   */\n  getResourceMetrics() {\n    if (!window.performance || !window.performance.getEntriesByType) {\n      return null;\n    }\n\n    const resources = window.performance.getEntriesByType('resource');\n    const navigation = window.performance.getEntriesByType('navigation')[0];\n\n    const metrics = {\n      totalResources: resources.length,\n      totalLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n      largestResources: resources\n        .sort((a, b) => b.transferSize - a.transferSize)\n        .slice(0, 10)\n        .map(resource => ({\n          name: resource.name,\n          size: resource.transferSize,\n          duration: resource.duration,\n          type: resource.initiatorType\n        }))\n    };\n\n    return metrics;\n  },\n\n  /**\n   * Get recommendations for bundle optimization\n   * @returns {Array} - Array of optimization recommendations\n   */\n  getOptimizationRecommendations() {\n    const recommendations = [];\n    const metrics = this.getResourceMetrics();\n    \n    if (!metrics) {\n      return ['Performance API not available'];\n    }\n\n    // Check for large resources\n    const largeResources = metrics.largestResources.filter(r => r.size > 500000); // > 500KB\n    if (largeResources.length > 0) {\n      recommendations.push(`Consider code splitting or lazy loading for ${largeResources.length} large resources`);\n    }\n\n    // Check total load time\n    if (metrics.totalLoadTime > 3000) {\n      recommendations.push('Total load time exceeds 3 seconds - consider optimizing critical resources');\n    }\n\n    // Check DOM content loaded time\n    if (metrics.domContentLoaded > 1500) {\n      recommendations.push('DOM content loaded time is slow - optimize critical CSS and JavaScript');\n    }\n\n    // Check number of resources\n    if (metrics.totalResources > 50) {\n      recommendations.push('High number of resources - consider bundling or HTTP/2 server push');\n    }\n\n    return recommendations.length > 0 ? recommendations : ['Bundle performance looks good!'];\n  }\n};\n\n/**\n * Memory usage monitoring\n */\nexport const MemoryMonitor = {\n  /**\n   * Get current memory usage (if available)\n   * @returns {Object|null} - Memory usage information\n   */\n  getMemoryUsage() {\n    if (!window.performance || !window.performance.memory) {\n      return null;\n    }\n\n    const memory = window.performance.memory;\n    return {\n      usedJSHeapSize: Math.round(memory.usedJSHeapSize / 1048576), // MB\n      totalJSHeapSize: Math.round(memory.totalJSHeapSize / 1048576), // MB\n      jsHeapSizeLimit: Math.round(memory.jsHeapSizeLimit / 1048576), // MB\n      usage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100) // %\n    };\n  },\n\n  /**\n   * Monitor memory usage over time\n   * @param {number} interval - Monitoring interval in ms\n   * @param {Function} callback - Callback function for memory updates\n   * @returns {Function} - Cleanup function\n   */\n  startMonitoring(interval = 5000, callback) {\n    const monitor = setInterval(() => {\n      const usage = this.getMemoryUsage();\n      if (usage && callback) {\n        callback(usage);\n      }\n    }, interval);\n\n    return () => clearInterval(monitor);\n  }\n};\n\n/**\n * Performance budget checker\n */\nexport const PerformanceBudget = {\n  budgets: {\n    loadTime: 3000, // 3 seconds\n    domContentLoaded: 1500, // 1.5 seconds\n    maxResourceSize: 500000, // 500KB\n    maxResources: 50,\n    maxMemoryUsage: 80 // 80% of heap limit\n  },\n\n  /**\n   * Check if current performance meets budget\n   * @returns {Object} - Budget compliance report\n   */\n  checkBudget() {\n    const metrics = BundleAnalyzer.getResourceMetrics();\n    const memory = MemoryMonitor.getMemoryUsage();\n    const results = {};\n\n    if (metrics) {\n      results.loadTime = {\n        actual: metrics.totalLoadTime,\n        budget: this.budgets.loadTime,\n        passed: metrics.totalLoadTime <= this.budgets.loadTime\n      };\n\n      results.domContentLoaded = {\n        actual: metrics.domContentLoaded,\n        budget: this.budgets.domContentLoaded,\n        passed: metrics.domContentLoaded <= this.budgets.domContentLoaded\n      };\n\n      results.resourceCount = {\n        actual: metrics.totalResources,\n        budget: this.budgets.maxResources,\n        passed: metrics.totalResources <= this.budgets.maxResources\n      };\n\n      const largeResources = metrics.largestResources.filter(r => r.size > this.budgets.maxResourceSize);\n      results.resourceSize = {\n        actual: largeResources.length,\n        budget: 0,\n        passed: largeResources.length === 0\n      };\n    }\n\n    if (memory) {\n      results.memoryUsage = {\n        actual: memory.usage,\n        budget: this.budgets.maxMemoryUsage,\n        passed: memory.usage <= this.budgets.maxMemoryUsage\n      };\n    }\n\n    return results;\n  }\n};\n\nexport default {\n  useMemoizedData,\n  useDebounce,\n  OptimizedList,\n  createLazyComponent,\n  usePerformanceMonitor,\n  createOptimizedHandlers,\n  useOptimizedFilter,\n  useOptimizedSort,\n  batchApiCalls,\n  useMemoryMonitor,\n  withSizeOptimization,\n  PhotoOptimizer,\n  BundleAnalyzer,\n  MemoryMonitor,\n  PerformanceBudget\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { BundleAnalyzer, MemoryMonitor, PerformanceBudget } from '../utils/performance';\nimport useUIStore from '../store/uiStore';\n\n/**\n * Performance monitoring component for real-time performance tracking\n */\nconst PerformanceMonitor = ({ isOpen = false, onClose, metrics: dashboardMetrics }) => {\n  const isVisible = isOpen;\n  const { darkMode } = useUIStore();\n  const [metrics, setMetrics] = useState({\n    bundle: null,\n    memory: null,\n    budget: null,\n    resources: null\n  });\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [history, setHistory] = useState([]);\n  const monitoringRef = useRef(null);\n\n  // Initialize performance monitoring\n  useEffect(() => {\n    if (isVisible) {\n      updateMetrics();\n    }\n  }, [isVisible]);\n\n  // Start/stop continuous monitoring\n  useEffect(() => {\n    if (isMonitoring && isVisible) {\n      const interval = setInterval(updateMetrics, 5000); // Update every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isMonitoring, isVisible]);\n\n  const updateMetrics = () => {\n    const bundleMetrics = BundleAnalyzer.analyzeBundleSize();\n    const resourceMetrics = BundleAnalyzer.getResourceMetrics();\n    const memoryMetrics = MemoryMonitor.getMemoryUsage();\n    const budgetResults = PerformanceBudget.checkBudget();\n    const recommendations = BundleAnalyzer.getOptimizationRecommendations();\n\n    const newMetrics = {\n      bundle: bundleMetrics,\n      memory: memoryMetrics,\n      budget: budgetResults,\n      resources: resourceMetrics,\n      recommendations,\n      timestamp: new Date().toISOString()\n    };\n\n    setMetrics(newMetrics);\n\n    // Add to history (keep last 20 entries)\n    setHistory(prev => {\n      const updated = [...prev, newMetrics].slice(-20);\n      return updated;\n    });\n  };\n\n  const toggleMonitoring = () => {\n    setIsMonitoring(!isMonitoring);\n  };\n\n  const clearHistory = () => {\n    setHistory([]);\n  };\n\n  const exportMetrics = () => {\n    const dataStr = JSON.stringify(history, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `performance-metrics-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (!isVisible) return null;\n\n  const themeClasses = darkMode\n    ? 'bg-gray-800 text-white border-gray-600'\n    : 'bg-white text-gray-900 border-gray-300';\n\n  const cardClasses = darkMode\n    ? 'bg-gray-700 border-gray-600'\n    : 'bg-gray-50 border-gray-200';\n\n  return (\n    <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50`}>\n      <div className={`${themeClasses} border rounded-lg shadow-xl w-11/12 max-w-6xl max-h-5/6 overflow-hidden`}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-300 dark:border-gray-600\">\n          <h2 className=\"text-xl font-semibold\">Performance Monitor</h2>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={toggleMonitoring}\n              className={`px-3 py-1 rounded text-sm font-medium ${\n                isMonitoring\n                  ? 'bg-red-500 hover:bg-red-600 text-white'\n                  : 'bg-green-500 hover:bg-green-600 text-white'\n              }`}\n            >\n              {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\n            </button>\n            <button\n              onClick={updateMetrics}\n              className=\"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-sm font-medium\"\n            >\n              Refresh\n            </button>\n            <button\n              onClick={exportMetrics}\n              className=\"px-3 py-1 bg-purple-500 hover:bg-purple-600 text-white rounded text-sm font-medium\"\n              disabled={history.length === 0}\n            >\n              Export\n            </button>\n            <button\n              onClick={onClose}\n              className=\"px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded text-sm font-medium\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-4 overflow-y-auto max-h-full\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Memory Usage */}\n            {metrics.memory && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Memory Usage</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Used Heap:</span>\n                    <span className=\"font-mono\">{metrics.memory.usedJSHeapSize} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Heap:</span>\n                    <span className=\"font-mono\">{metrics.memory.totalJSHeapSize} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Heap Limit:</span>\n                    <span className=\"font-mono\">{metrics.memory.jsHeapSizeLimit} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Usage:</span>\n                    <span className={`font-mono ${\n                      metrics.memory.usage > 80 ? 'text-red-500' :\n                      metrics.memory.usage > 60 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {metrics.memory.usage}%\n                    </span>\n                  </div>\n                  {/* Memory usage bar */}\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div\n                      className={`h-2 rounded-full ${\n                        metrics.memory.usage > 80 ? 'bg-red-500' :\n                        metrics.memory.usage > 60 ? 'bg-yellow-500' : 'bg-green-500'\n                      }`}\n                      style={{ width: `${Math.min(metrics.memory.usage, 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Resource Metrics */}\n            {metrics.resources && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Resource Metrics</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Resources:</span>\n                    <span className=\"font-mono\">{metrics.resources.totalResources}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Load Time:</span>\n                    <span className={`font-mono ${\n                      metrics.resources.totalLoadTime > 3000 ? 'text-red-500' :\n                      metrics.resources.totalLoadTime > 1500 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {Math.round(metrics.resources.totalLoadTime)}ms\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>DOM Content Loaded:</span>\n                    <span className={`font-mono ${\n                      metrics.resources.domContentLoaded > 1500 ? 'text-red-500' :\n                      metrics.resources.domContentLoaded > 800 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {Math.round(metrics.resources.domContentLoaded)}ms\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Bundle Analysis */}\n            {metrics.bundle && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Bundle Analysis</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Scripts:</span>\n                    <span className=\"font-mono\">{metrics.bundle.totalScripts}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Stylesheets:</span>\n                    <span className=\"font-mono\">{metrics.bundle.totalStylesheets}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Performance Budget */}\n            {metrics.budget && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Performance Budget</h3>\n                <div className=\"space-y-2\">\n                  {Object.entries(metrics.budget).map(([key, result]) => (\n                    <div key={key} className=\"flex justify-between items-center\">\n                      <span className=\"capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>\n                      <span className={`font-mono px-2 py-1 rounded text-xs ${\n                        result.passed ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {result.passed ? 'PASS' : 'FAIL'}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Recommendations */}\n          {metrics.recommendations && metrics.recommendations.length > 0 && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <h3 className=\"text-lg font-semibold mb-3\">Optimization Recommendations</h3>\n              <ul className=\"space-y-2\">\n                {metrics.recommendations.map((recommendation, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <span className=\"text-blue-500 mr-2\">•</span>\n                    <span>{recommendation}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Largest Resources */}\n          {metrics.resources && metrics.resources.largestResources && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <h3 className=\"text-lg font-semibold mb-3\">Largest Resources</h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-gray-300 dark:border-gray-600\">\n                      <th className=\"text-left py-2\">Resource</th>\n                      <th className=\"text-left py-2\">Size</th>\n                      <th className=\"text-left py-2\">Duration</th>\n                      <th className=\"text-left py-2\">Type</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {metrics.resources.largestResources.slice(0, 5).map((resource, index) => (\n                      <tr key={index} className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <td className=\"py-2 truncate max-w-xs\" title={resource.name}>\n                          {resource.name.split('/').pop()}\n                        </td>\n                        <td className=\"py-2 font-mono\">\n                          {resource.size ? `${Math.round(resource.size / 1024)} KB` : 'N/A'}\n                        </td>\n                        <td className=\"py-2 font-mono\">\n                          {Math.round(resource.duration)}ms\n                        </td>\n                        <td className=\"py-2\">{resource.type}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* History Chart */}\n          {history.length > 1 && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <div className=\"flex justify-between items-center mb-3\">\n                <h3 className=\"text-lg font-semibold\">Performance History</h3>\n                <button\n                  onClick={clearHistory}\n                  className=\"px-2 py-1 bg-red-500 hover:bg-red-600 text-white rounded text-xs\"\n                >\n                  Clear History\n                </button>\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Showing last {history.length} measurements\n              </div>\n              {/* Simple text-based history for now */}\n              <div className=\"mt-2 space-y-1 max-h-32 overflow-y-auto\">\n                {history.slice(-5).map((entry, index) => (\n                  <div key={index} className=\"text-xs font-mono\">\n                    {new Date(entry.timestamp).toLocaleTimeString()}: \n                    {entry.memory && ` Memory: ${entry.memory.usage}%`}\n                    {entry.resources && ` Load: ${Math.round(entry.resources.totalLoadTime)}ms`}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceMonitor;"],"names":["dataCache","constructor","this","cache","Map","cacheTimestamps","defaultTTL","maxCacheSize","ttlConfig","invalidationRules","_generateKey","category","operation","params","arguments","length","undefined","baseKey","Object","keys","sort","map","key","JSON","stringify","join","_isValid","has","timestamp","get","operationKey","split","ttl","Date","now","_cleanup","keysToDelete","entries","push","forEach","delete","_enforceSizeLimit","size","Array","from","a","b","slice","_ref","set","data","Math","random","invalidate","ruleKey","startsWith","clear","getStats","maxSize","hitRate","hitCount","missCount","warmUp","secureOperation","promises","async","_ref2","error","console","warn","Promise","allSettled","cachedSecureOperation","includes","some","op","window","api","cachedData","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","ArcElement","Dashboard","darkMode","useUIStore","refresh","useEquipmentStore","viewingInspectionsFor","useInspectionStore","dashboardData","setDashboardData","useState","equipment","total","active","outOfService","taggedOut","inspections","thisMonth","overdue","upcoming","workOrders","open","inProgress","deficiencies","critical","pmSchedules","due","loadTests","calibrations","certificates","expiring","credentials","loading","setLoading","setError","selectedTimeframe","setSelectedTimeframe","showPerformanceMonitor","setShowPerformanceMonitor","metrics","usePerformanceMonitor","useEffect","loadDashboardData","_inspectionsByMonth$f","today","toISOString","futureDate","setDate","getDate","parseInt","futureDateStr","apiCalls","equipmentData","equipmentStatusCounts","inspectionCount","inspectionsByMonth","inspectionsOverdue","upcomingInspections","workOrdersAll","workOrdersDueToday","workOrdersOverdue","deficienciesAll","deficienciesOpenCritical","deficienciesOverdue","pmSchedulesTotal","pmSchedulesDue","pmSchedulesOverdue","loadTestsTotal","loadTestsDue","loadTestsOverdue","calibrationsTotal","calibrationsDue","calibrationsOverdue","certificatesTotal","certificatesExpiring","credentialsTotal","credentialsExpiring","batchApiCalls","statusCounts","isArray","reduce","acc","item","status","count","substring","thisMonthInspections","find","month","workOrdersByStatus","wo","out_of_service","filter","eq","tagged_out","draft","approved","assigned","in_progress","err","message","getStatusColor","type","value","_jsxs","className","children","_jsx","onClick","onChange","e","target","title","max","location","hash","round","style","width","toLocaleString","PerformanceMonitor","isOpen","onClose","componentName","React","startTime","performance","renderTime","toFixed","batchSize","results","i","batch","batchResults","all","resolve","setTimeout","BundleAnalyzer","analyzeBundleSize","scripts","document","querySelectorAll","stylesheets","script","src","defer","link","href","media","totalScripts","totalStylesheets","getResourceMetrics","getEntriesByType","resources","navigation","totalResources","totalLoadTime","loadEventEnd","fetchStart","domContentLoaded","domContentLoadedEventEnd","largestResources","transferSize","resource","name","duration","initiatorType","getOptimizationRecommendations","recommendations","largeResources","r","MemoryMonitor","getMemoryUsage","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","usage","startMonitoring","callback","monitor","setInterval","clearInterval","PerformanceBudget","budgets","loadTime","maxResourceSize","maxResources","maxMemoryUsage","checkBudget","actual","budget","passed","resourceCount","resourceSize","memoryUsage","dashboardMetrics","isVisible","setMetrics","bundle","isMonitoring","setIsMonitoring","history","setHistory","useRef","updateMetrics","interval","bundleMetrics","resourceMetrics","newMetrics","prev","themeClasses","cardClasses","toggleMonitoring","exportMetrics","dataStr","dataBlob","Blob","url","URL","createObjectURL","createElement","download","click","revokeObjectURL","disabled","min","result","replace","trim","recommendation","index","pop","clearHistory","entry","toLocaleTimeString"],"sourceRoot":""}