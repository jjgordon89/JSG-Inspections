{"version":3,"file":"static/js/25.5404e1b9.chunk.js","mappings":"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","sources":["utils/performance.js","components/PerformanceMonitor.js"],"sourcesContent":["import { memo, useMemo, useCallback, lazy } from 'react';\nimport React from 'react';\n\n/**\n * Performance optimization utilities for React components\n * Enhanced with photo optimization and bundle analysis capabilities\n */\n\n// Memoization helper for expensive calculations\nexport const useMemoizedData = (data, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return data;\n  }, dependencies);\n};\n\n// Debounced search hook\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n// Optimized list renderer with virtualization support\nexport const OptimizedList = memo(({ items, renderItem, keyExtractor, className = '' }) => {\n  const memoizedItems = useMemoizedData(items, [items]);\n  \n  return (\n    <div className={`optimized-list ${className}`}>\n      {memoizedItems.map((item, index) => (\n        <div key={keyExtractor ? keyExtractor(item, index) : index}>\n          {renderItem(item, index)}\n        </div>\n      ))}\n    </div>\n  );\n});\n\n// Lazy loading wrapper for heavy components\nexport const createLazyComponent = (importFunc, fallback = <div>Loading...</div>) => {\n  const LazyComponent = lazy(importFunc);\n  \n  return (props) => (\n    <React.Suspense fallback={fallback}>\n      <LazyComponent {...props} />\n    </React.Suspense>\n  );\n};\n\n// Performance monitoring hook\nexport const usePerformanceMonitor = (componentName) => {\n  React.useEffect(() => {\n    const startTime = performance.now();\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      if (renderTime > 100) { // Log slow renders\n        console.warn(`Slow render detected in ${componentName}: ${renderTime.toFixed(2)}ms`);\n      }\n    };\n  });\n};\n\n// Optimized event handlers\nexport const createOptimizedHandlers = (handlers) => {\n  const memoizedHandlers = {};\n  \n  Object.keys(handlers).forEach(key => {\n    memoizedHandlers[key] = useCallback(handlers[key], []);\n  });\n  \n  return memoizedHandlers;\n};\n\n// Data filtering and sorting utilities\nexport const useOptimizedFilter = (data, filterFn, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return data.filter(filterFn);\n  }, [data, ...dependencies]);\n};\n\nexport const useOptimizedSort = (data, sortFn, dependencies = []) => {\n  return useMemo(() => {\n    if (!data || !Array.isArray(data)) return [];\n    return [...data].sort(sortFn);\n  }, [data, ...dependencies]);\n};\n\n// Batch API calls utility\nexport const batchApiCalls = async (apiCalls, batchSize = 5) => {\n  const results = [];\n  \n  for (let i = 0; i < apiCalls.length; i += batchSize) {\n    const batch = apiCalls.slice(i, i + batchSize);\n    const batchResults = await Promise.all(batch);\n    results.push(...batchResults);\n    \n    // Small delay between batches to prevent overwhelming the API\n    if (i + batchSize < apiCalls.length) {\n      await new Promise(resolve => setTimeout(resolve, 50));\n    }\n  }\n  \n  return results;\n};\n\n// Memory usage monitoring\nexport const useMemoryMonitor = (componentName) => {\n  React.useEffect(() => {\n    if (performance.memory) {\n      const initialMemory = performance.memory.usedJSHeapSize;\n      \n      return () => {\n        const finalMemory = performance.memory.usedJSHeapSize;\n        const memoryDiff = finalMemory - initialMemory;\n        \n        if (memoryDiff > 1024 * 1024) { // 1MB threshold\n          console.warn(`High memory usage in ${componentName}: ${(memoryDiff / 1024 / 1024).toFixed(2)}MB`);\n        }\n      };\n    }\n  }, [componentName]);\n};\n\n// Component size optimization\nexport const withSizeOptimization = (Component) => {\n  return memo((props) => {\n    const [isVisible, setIsVisible] = React.useState(false);\n    const ref = React.useRef();\n    \n    React.useEffect(() => {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          setIsVisible(entry.isIntersecting);\n        },\n        { threshold: 0.1 }\n      );\n      \n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n      \n      return () => observer.disconnect();\n    }, []);\n    \n    return (\n      <div ref={ref}>\n        {isVisible ? <Component {...props} /> : <div style={{ height: '200px' }}>Loading...</div>}\n      </div>\n    );\n  });\n};\n\n/**\n * Photo optimization utilities\n */\nexport const PhotoOptimizer = {\n  /**\n   * Compress and resize image file\n   * @param {File} file - Image file to optimize\n   * @param {Object} options - Optimization options\n   * @returns {Promise<Blob>} - Optimized image blob\n   */\n  async optimizeImage(file, options = {}) {\n    const {\n      maxWidth = 1920,\n      maxHeight = 1080,\n      quality = 0.8,\n      format = 'image/jpeg'\n    } = options;\n\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate new dimensions\n        let { width, height } = img;\n        \n        if (width > maxWidth) {\n          height = (height * maxWidth) / width;\n          width = maxWidth;\n        }\n        \n        if (height > maxHeight) {\n          width = (width * maxHeight) / height;\n          height = maxHeight;\n        }\n\n        // Set canvas dimensions\n        canvas.width = width;\n        canvas.height = height;\n\n        // Draw and compress\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        canvas.toBlob(resolve, format, quality);\n      };\n\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  },\n\n  /**\n   * Generate multiple sizes for responsive images\n   * @param {File} file - Original image file\n   * @returns {Promise<Object>} - Object with different sized images\n   */\n  async generateResponsiveSizes(file) {\n    const sizes = {\n      thumbnail: { maxWidth: 150, maxHeight: 150, quality: 0.7 },\n      small: { maxWidth: 480, maxHeight: 320, quality: 0.8 },\n      medium: { maxWidth: 1024, maxHeight: 768, quality: 0.8 },\n      large: { maxWidth: 1920, maxHeight: 1080, quality: 0.85 }\n    };\n\n    const results = {};\n    \n    for (const [sizeName, options] of Object.entries(sizes)) {\n      try {\n        results[sizeName] = await this.optimizeImage(file, options);\n      } catch (error) {\n        console.warn(`Failed to generate ${sizeName} size:`, error);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Estimate file size reduction\n   * @param {File} originalFile - Original file\n   * @param {Blob} optimizedBlob - Optimized blob\n   * @returns {Object} - Size comparison stats\n   */\n  getSizeStats(originalFile, optimizedBlob) {\n    const originalSize = originalFile.size;\n    const optimizedSize = optimizedBlob.size;\n    const reduction = ((originalSize - optimizedSize) / originalSize) * 100;\n\n    return {\n      originalSize,\n      optimizedSize,\n      reduction: Math.round(reduction * 100) / 100,\n      compressionRatio: Math.round((originalSize / optimizedSize) * 100) / 100\n    };\n  }\n};\n\n/**\n * Bundle analysis utilities\n */\nexport const BundleAnalyzer = {\n  /**\n   * Analyze current bundle size and performance\n   * @returns {Object} - Bundle analysis results\n   */\n  analyzeBundleSize() {\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\n    const stylesheets = Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]'));\n    \n    const analysis = {\n      scripts: scripts.map(script => ({\n        src: script.src,\n        async: script.async,\n        defer: script.defer\n      })),\n      stylesheets: stylesheets.map(link => ({\n        href: link.href,\n        media: link.media\n      })),\n      totalScripts: scripts.length,\n      totalStylesheets: stylesheets.length\n    };\n\n    return analysis;\n  },\n\n  /**\n   * Monitor resource loading performance\n   * @returns {Object} - Resource loading metrics\n   */\n  getResourceMetrics() {\n    if (!window.performance || !window.performance.getEntriesByType) {\n      return null;\n    }\n\n    const resources = window.performance.getEntriesByType('resource');\n    const navigation = window.performance.getEntriesByType('navigation')[0];\n\n    const metrics = {\n      totalResources: resources.length,\n      totalLoadTime: navigation ? navigation.loadEventEnd - navigation.fetchStart : 0,\n      domContentLoaded: navigation ? navigation.domContentLoadedEventEnd - navigation.fetchStart : 0,\n      largestResources: resources\n        .sort((a, b) => b.transferSize - a.transferSize)\n        .slice(0, 10)\n        .map(resource => ({\n          name: resource.name,\n          size: resource.transferSize,\n          duration: resource.duration,\n          type: resource.initiatorType\n        }))\n    };\n\n    return metrics;\n  },\n\n  /**\n   * Get recommendations for bundle optimization\n   * @returns {Array} - Array of optimization recommendations\n   */\n  getOptimizationRecommendations() {\n    const recommendations = [];\n    const metrics = this.getResourceMetrics();\n    \n    if (!metrics) {\n      return ['Performance API not available'];\n    }\n\n    // Check for large resources\n    const largeResources = metrics.largestResources.filter(r => r.size > 500000); // > 500KB\n    if (largeResources.length > 0) {\n      recommendations.push(`Consider code splitting or lazy loading for ${largeResources.length} large resources`);\n    }\n\n    // Check total load time\n    if (metrics.totalLoadTime > 3000) {\n      recommendations.push('Total load time exceeds 3 seconds - consider optimizing critical resources');\n    }\n\n    // Check DOM content loaded time\n    if (metrics.domContentLoaded > 1500) {\n      recommendations.push('DOM content loaded time is slow - optimize critical CSS and JavaScript');\n    }\n\n    // Check number of resources\n    if (metrics.totalResources > 50) {\n      recommendations.push('High number of resources - consider bundling or HTTP/2 server push');\n    }\n\n    return recommendations.length > 0 ? recommendations : ['Bundle performance looks good!'];\n  }\n};\n\n/**\n * Memory usage monitoring\n */\nexport const MemoryMonitor = {\n  /**\n   * Get current memory usage (if available)\n   * @returns {Object|null} - Memory usage information\n   */\n  getMemoryUsage() {\n    if (!window.performance || !window.performance.memory) {\n      return null;\n    }\n\n    const memory = window.performance.memory;\n    return {\n      usedJSHeapSize: Math.round(memory.usedJSHeapSize / 1048576), // MB\n      totalJSHeapSize: Math.round(memory.totalJSHeapSize / 1048576), // MB\n      jsHeapSizeLimit: Math.round(memory.jsHeapSizeLimit / 1048576), // MB\n      usage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100) // %\n    };\n  },\n\n  /**\n   * Monitor memory usage over time\n   * @param {number} interval - Monitoring interval in ms\n   * @param {Function} callback - Callback function for memory updates\n   * @returns {Function} - Cleanup function\n   */\n  startMonitoring(interval = 5000, callback) {\n    const monitor = setInterval(() => {\n      const usage = this.getMemoryUsage();\n      if (usage && callback) {\n        callback(usage);\n      }\n    }, interval);\n\n    return () => clearInterval(monitor);\n  }\n};\n\n/**\n * Performance budget checker\n */\nexport const PerformanceBudget = {\n  budgets: {\n    loadTime: 3000, // 3 seconds\n    domContentLoaded: 1500, // 1.5 seconds\n    maxResourceSize: 500000, // 500KB\n    maxResources: 50,\n    maxMemoryUsage: 80 // 80% of heap limit\n  },\n\n  /**\n   * Check if current performance meets budget\n   * @returns {Object} - Budget compliance report\n   */\n  checkBudget() {\n    const metrics = BundleAnalyzer.getResourceMetrics();\n    const memory = MemoryMonitor.getMemoryUsage();\n    const results = {};\n\n    if (metrics) {\n      results.loadTime = {\n        actual: metrics.totalLoadTime,\n        budget: this.budgets.loadTime,\n        passed: metrics.totalLoadTime <= this.budgets.loadTime\n      };\n\n      results.domContentLoaded = {\n        actual: metrics.domContentLoaded,\n        budget: this.budgets.domContentLoaded,\n        passed: metrics.domContentLoaded <= this.budgets.domContentLoaded\n      };\n\n      results.resourceCount = {\n        actual: metrics.totalResources,\n        budget: this.budgets.maxResources,\n        passed: metrics.totalResources <= this.budgets.maxResources\n      };\n\n      const largeResources = metrics.largestResources.filter(r => r.size > this.budgets.maxResourceSize);\n      results.resourceSize = {\n        actual: largeResources.length,\n        budget: 0,\n        passed: largeResources.length === 0\n      };\n    }\n\n    if (memory) {\n      results.memoryUsage = {\n        actual: memory.usage,\n        budget: this.budgets.maxMemoryUsage,\n        passed: memory.usage <= this.budgets.maxMemoryUsage\n      };\n    }\n\n    return results;\n  }\n};\n\nexport default {\n  useMemoizedData,\n  useDebounce,\n  OptimizedList,\n  createLazyComponent,\n  usePerformanceMonitor,\n  createOptimizedHandlers,\n  useOptimizedFilter,\n  useOptimizedSort,\n  batchApiCalls,\n  useMemoryMonitor,\n  withSizeOptimization,\n  PhotoOptimizer,\n  BundleAnalyzer,\n  MemoryMonitor,\n  PerformanceBudget\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { BundleAnalyzer, MemoryMonitor, PerformanceBudget } from '../utils/performance';\nimport useUIStore from '../store/uiStore';\n\n/**\n * Performance monitoring component for real-time performance tracking\n */\nconst PerformanceMonitor = ({ isOpen = false, onClose, metrics: dashboardMetrics }) => {\n  const isVisible = isOpen;\n  const { darkMode } = useUIStore();\n  const [metrics, setMetrics] = useState({\n    bundle: null,\n    memory: null,\n    budget: null,\n    resources: null\n  });\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const [history, setHistory] = useState([]);\n  const monitoringRef = useRef(null);\n\n  // Initialize performance monitoring\n  useEffect(() => {\n    if (isVisible) {\n      updateMetrics();\n    }\n  }, [isVisible]);\n\n  // Start/stop continuous monitoring\n  useEffect(() => {\n    if (isMonitoring && isVisible) {\n      const interval = setInterval(updateMetrics, 5000); // Update every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isMonitoring, isVisible]);\n\n  const updateMetrics = () => {\n    const bundleMetrics = BundleAnalyzer.analyzeBundleSize();\n    const resourceMetrics = BundleAnalyzer.getResourceMetrics();\n    const memoryMetrics = MemoryMonitor.getMemoryUsage();\n    const budgetResults = PerformanceBudget.checkBudget();\n    const recommendations = BundleAnalyzer.getOptimizationRecommendations();\n\n    const newMetrics = {\n      bundle: bundleMetrics,\n      memory: memoryMetrics,\n      budget: budgetResults,\n      resources: resourceMetrics,\n      recommendations,\n      timestamp: new Date().toISOString()\n    };\n\n    setMetrics(newMetrics);\n\n    // Add to history (keep last 20 entries)\n    setHistory(prev => {\n      const updated = [...prev, newMetrics].slice(-20);\n      return updated;\n    });\n  };\n\n  const toggleMonitoring = () => {\n    setIsMonitoring(!isMonitoring);\n  };\n\n  const clearHistory = () => {\n    setHistory([]);\n  };\n\n  const exportMetrics = () => {\n    const dataStr = JSON.stringify(history, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `performance-metrics-${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (!isVisible) return null;\n\n  const themeClasses = darkMode\n    ? 'bg-gray-800 text-white border-gray-600'\n    : 'bg-white text-gray-900 border-gray-300';\n\n  const cardClasses = darkMode\n    ? 'bg-gray-700 border-gray-600'\n    : 'bg-gray-50 border-gray-200';\n\n  return (\n    <div className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50`}>\n      <div className={`${themeClasses} border rounded-lg shadow-xl w-11/12 max-w-6xl max-h-5/6 overflow-hidden`}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-300 dark:border-gray-600\">\n          <h2 className=\"text-xl font-semibold\">Performance Monitor</h2>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={toggleMonitoring}\n              className={`px-3 py-1 rounded text-sm font-medium ${\n                isMonitoring\n                  ? 'bg-red-500 hover:bg-red-600 text-white'\n                  : 'bg-green-500 hover:bg-green-600 text-white'\n              }`}\n            >\n              {isMonitoring ? 'Stop Monitoring' : 'Start Monitoring'}\n            </button>\n            <button\n              onClick={updateMetrics}\n              className=\"px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded text-sm font-medium\"\n            >\n              Refresh\n            </button>\n            <button\n              onClick={exportMetrics}\n              className=\"px-3 py-1 bg-purple-500 hover:bg-purple-600 text-white rounded text-sm font-medium\"\n              disabled={history.length === 0}\n            >\n              Export\n            </button>\n            <button\n              onClick={onClose}\n              className=\"px-3 py-1 bg-gray-500 hover:bg-gray-600 text-white rounded text-sm font-medium\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-4 overflow-y-auto max-h-full\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Memory Usage */}\n            {metrics.memory && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Memory Usage</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Used Heap:</span>\n                    <span className=\"font-mono\">{metrics.memory.usedJSHeapSize} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Total Heap:</span>\n                    <span className=\"font-mono\">{metrics.memory.totalJSHeapSize} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Heap Limit:</span>\n                    <span className=\"font-mono\">{metrics.memory.jsHeapSizeLimit} MB</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Usage:</span>\n                    <span className={`font-mono ${\n                      metrics.memory.usage > 80 ? 'text-red-500' :\n                      metrics.memory.usage > 60 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {metrics.memory.usage}%\n                    </span>\n                  </div>\n                  {/* Memory usage bar */}\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div\n                      className={`h-2 rounded-full ${\n                        metrics.memory.usage > 80 ? 'bg-red-500' :\n                        metrics.memory.usage > 60 ? 'bg-yellow-500' : 'bg-green-500'\n                      }`}\n                      style={{ width: `${Math.min(metrics.memory.usage, 100)}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Resource Metrics */}\n            {metrics.resources && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Resource Metrics</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Total Resources:</span>\n                    <span className=\"font-mono\">{metrics.resources.totalResources}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Load Time:</span>\n                    <span className={`font-mono ${\n                      metrics.resources.totalLoadTime > 3000 ? 'text-red-500' :\n                      metrics.resources.totalLoadTime > 1500 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {Math.round(metrics.resources.totalLoadTime)}ms\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>DOM Content Loaded:</span>\n                    <span className={`font-mono ${\n                      metrics.resources.domContentLoaded > 1500 ? 'text-red-500' :\n                      metrics.resources.domContentLoaded > 800 ? 'text-yellow-500' : 'text-green-500'\n                    }`}>\n                      {Math.round(metrics.resources.domContentLoaded)}ms\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Bundle Analysis */}\n            {metrics.bundle && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Bundle Analysis</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Scripts:</span>\n                    <span className=\"font-mono\">{metrics.bundle.totalScripts}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Stylesheets:</span>\n                    <span className=\"font-mono\">{metrics.bundle.totalStylesheets}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Performance Budget */}\n            {metrics.budget && (\n              <div className={`${cardClasses} border rounded-lg p-4`}>\n                <h3 className=\"text-lg font-semibold mb-3\">Performance Budget</h3>\n                <div className=\"space-y-2\">\n                  {Object.entries(metrics.budget).map(([key, result]) => (\n                    <div key={key} className=\"flex justify-between items-center\">\n                      <span className=\"capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>\n                      <span className={`font-mono px-2 py-1 rounded text-xs ${\n                        result.passed ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {result.passed ? 'PASS' : 'FAIL'}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Recommendations */}\n          {metrics.recommendations && metrics.recommendations.length > 0 && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <h3 className=\"text-lg font-semibold mb-3\">Optimization Recommendations</h3>\n              <ul className=\"space-y-2\">\n                {metrics.recommendations.map((recommendation, index) => (\n                  <li key={index} className=\"flex items-start\">\n                    <span className=\"text-blue-500 mr-2\">•</span>\n                    <span>{recommendation}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Largest Resources */}\n          {metrics.resources && metrics.resources.largestResources && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <h3 className=\"text-lg font-semibold mb-3\">Largest Resources</h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-gray-300 dark:border-gray-600\">\n                      <th className=\"text-left py-2\">Resource</th>\n                      <th className=\"text-left py-2\">Size</th>\n                      <th className=\"text-left py-2\">Duration</th>\n                      <th className=\"text-left py-2\">Type</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {metrics.resources.largestResources.slice(0, 5).map((resource, index) => (\n                      <tr key={index} className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <td className=\"py-2 truncate max-w-xs\" title={resource.name}>\n                          {resource.name.split('/').pop()}\n                        </td>\n                        <td className=\"py-2 font-mono\">\n                          {resource.size ? `${Math.round(resource.size / 1024)} KB` : 'N/A'}\n                        </td>\n                        <td className=\"py-2 font-mono\">\n                          {Math.round(resource.duration)}ms\n                        </td>\n                        <td className=\"py-2\">{resource.type}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {/* History Chart */}\n          {history.length > 1 && (\n            <div className={`${cardClasses} border rounded-lg p-4 mt-6`}>\n              <div className=\"flex justify-between items-center mb-3\">\n                <h3 className=\"text-lg font-semibold\">Performance History</h3>\n                <button\n                  onClick={clearHistory}\n                  className=\"px-2 py-1 bg-red-500 hover:bg-red-600 text-white rounded text-xs\"\n                >\n                  Clear History\n                </button>\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Showing last {history.length} measurements\n              </div>\n              {/* Simple text-based history for now */}\n              <div className=\"mt-2 space-y-1 max-h-32 overflow-y-auto\">\n                {history.slice(-5).map((entry, index) => (\n                  <div key={index} className=\"text-xs font-mono\">\n                    {new Date(entry.timestamp).toLocaleTimeString()}: \n                    {entry.memory && ` Memory: ${entry.memory.usage}%`}\n                    {entry.resources && ` Load: ${Math.round(entry.resources.totalLoadTime)}ms`}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceMonitor;"],"names":["usePerformanceMonitor","componentName","React","startTime","performance","now","renderTime","console","warn","toFixed","batchApiCalls","async","apiCalls","batchSize","arguments","length","undefined","results","i","batch","slice","batchResults","Promise","all","push","resolve","setTimeout","BundleAnalyzer","analyzeBundleSize","scripts","Array","from","document","querySelectorAll","stylesheets","map","script","src","defer","link","href","media","totalScripts","totalStylesheets","getResourceMetrics","window","getEntriesByType","resources","navigation","totalResources","totalLoadTime","loadEventEnd","fetchStart","domContentLoaded","domContentLoadedEventEnd","largestResources","sort","a","b","transferSize","resource","name","size","duration","type","initiatorType","getOptimizationRecommendations","recommendations","metrics","this","largeResources","filter","r","MemoryMonitor","getMemoryUsage","memory","usedJSHeapSize","Math","round","totalJSHeapSize","jsHeapSizeLimit","usage","startMonitoring","callback","monitor","setInterval","clearInterval","PerformanceBudget","budgets","loadTime","maxResourceSize","maxResources","maxMemoryUsage","checkBudget","actual","budget","passed","resourceCount","resourceSize","memoryUsage","_ref","isOpen","onClose","dashboardMetrics","isVisible","darkMode","useUIStore","setMetrics","useState","bundle","isMonitoring","setIsMonitoring","history","setHistory","useRef","useEffect","updateMetrics","interval","bundleMetrics","resourceMetrics","newMetrics","timestamp","Date","toISOString","prev","themeClasses","cardClasses","_jsx","className","children","_jsxs","onClick","toggleMonitoring","exportMetrics","dataStr","JSON","stringify","dataBlob","Blob","url","URL","createObjectURL","createElement","download","split","click","revokeObjectURL","disabled","style","width","min","Object","entries","_ref2","key","result","replace","trim","recommendation","index","title","pop","clearHistory","entry","toLocaleTimeString"],"sourceRoot":""}