{"version":3,"file":"static/js/688.f5db4ad2.chunk.js","mappings":"gLAoGA,QAhGA,SAAwBA,GAA+B,IAA9B,MAAEC,EAAK,OAAEC,EAAM,SAAEC,GAAUH,EAClD,MAAMI,GAASC,EAAAA,EAAAA,QAAO,MAChBC,GAAgBD,EAAAA,EAAAA,QAAO,OACtBE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,YAC5CC,EAAcC,IAAmBF,EAAAA,EAAAA,WAAS,IAEjDG,EAAAA,EAAAA,WAAU,KACR,GAAIR,EAAOS,UAAYH,EAAc,CACnC,MAAMI,EAAa,IAAIC,EAAAA,GAAWX,EAAOS,QAAS,CAChDG,WAAYC,SAASC,KACrBC,YAAa,CAACC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,MAIrCrB,EAAMsB,aAAetB,EAAMsB,YAAYC,OAAS,GAClDV,EAAWW,aAAaxB,EAAMsB,aAGhCT,EAAWY,iBAAiB,SAAWC,IACrC,MAAMC,EAAiB,IAClB3B,EACH4B,QAASF,EAAME,QACfN,YAAaI,EAAMG,OAErB5B,EAAO0B,KAGTd,EAAWY,iBAAiB,QAAS,KAC/BvB,GACFA,MAIJQ,GAAgB,GAChBG,EAAWiB,OACXzB,EAAcO,QAAUC,CAC1B,CAEA,MAAO,KACDR,EAAcO,UAChBP,EAAcO,QAAQmB,QACtB1B,EAAcO,QAAU,KACxBF,GAAgB,MAGnB,CAACV,EAAOC,EAAQC,EAAUO,IAE7B,MAuBMuB,EAA4B,kBAAVhC,EAAqBA,EAAQA,EAAM4B,QAE3D,OACEK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EACzCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,uBACPC,EAAAA,EAAAA,KAAA,SACEC,KAAK,QACLC,MAAOhC,EACPiC,SAAWC,IAAMC,OAhCEC,EAgCgBF,EAAEG,OAAOL,MA/BlD/B,EAAiBmC,QACbrC,EAAcO,SAChBP,EAAcO,QAAQgC,eAAeF,IAHdA,UAkCrBT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,UAAQS,QA5BGC,KACbzC,EAAcO,SAChBP,EAAcO,QAAQmC,UA0BWb,UAAU,WAAUC,SAAC,sBAClDC,EAAAA,EAAAA,KAAA,UAAQS,QAvBKG,KACf3C,EAAcO,SAChBP,EAAcO,QAAQmB,QAEpB7B,GACFA,KAkBmCgC,UAAU,aAAYC,SAAC,kBAG1DC,EAAAA,EAAAA,KAAA,OACEa,IAAK9C,EACL+C,IAAKlB,EACLmB,IAAI,iBACJC,MAAO,CAAEC,SAAU,OAAQC,UAAW,YAI9C,C","sources":["components/PhotoAnnotation.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { MarkerArea, ArrowMarker, TextMarker, EllipseMarker } from 'markerjs2';\r\nimport './PhotoAnnotation.css';\r\n\r\nfunction PhotoAnnotation({ photo, onSave, onCancel }) {\r\n  const imgRef = useRef(null);\r\n  const markerAreaRef = useRef(null);\r\n  const [selectedColor, setSelectedColor] = useState('#FF0000');\r\n  const [isAnnotating, setIsAnnotating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (imgRef.current && !isAnnotating) {\r\n      const markerArea = new MarkerArea(imgRef.current, {\r\n        targetRoot: document.body,\r\n        markerTypes: [ArrowMarker, TextMarker, EllipseMarker],\r\n      });\r\n\r\n      // Load existing annotations if they exist\r\n      if (photo.annotations && photo.annotations.length > 0) {\r\n        markerArea.restoreState(photo.annotations);\r\n      }\r\n\r\n      markerArea.addEventListener('render', (event) => {\r\n        const annotatedPhoto = {\r\n          ...photo,\r\n          dataUrl: event.dataUrl,\r\n          annotations: event.state\r\n        };\r\n        onSave(annotatedPhoto);\r\n      });\r\n\r\n      markerArea.addEventListener('close', () => {\r\n        if (onCancel) {\r\n          onCancel();\r\n        }\r\n      });\r\n\r\n      setIsAnnotating(true);\r\n      markerArea.show();\r\n      markerAreaRef.current = markerArea;\r\n    }\r\n\r\n    return () => {\r\n      if (markerAreaRef.current) {\r\n        markerAreaRef.current.close();\r\n        markerAreaRef.current = null;\r\n        setIsAnnotating(false);\r\n      }\r\n    };\r\n  }, [photo, onSave, onCancel, isAnnotating]);\r\n\r\n  const handleColorChange = (color) => {\r\n    setSelectedColor(color);\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.setMarkerColor(color);\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.render();\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.close();\r\n    }\r\n    if (onCancel) {\r\n      onCancel();\r\n    }\r\n  };\r\n\r\n  // Get the photo source - handle both string URLs and photo objects\r\n  const photoSrc = typeof photo === 'string' ? photo : photo.dataUrl;\r\n\r\n  return (\r\n    <div className=\"photo-annotation-container\">\r\n      <div className=\"annotation-toolbar\">\r\n        <label>Annotation Color:</label>\r\n        <input\r\n          type=\"color\"\r\n          value={selectedColor}\r\n          onChange={(e) => handleColorChange(e.target.value)}\r\n        />\r\n        <div className=\"annotation-actions\">\r\n          <button onClick={handleSave} className=\"save-btn\">Save Annotations</button>\r\n          <button onClick={handleCancel} className=\"cancel-btn\">Cancel</button>\r\n        </div>\r\n      </div>\r\n      <img \r\n        ref={imgRef} \r\n        src={photoSrc} \r\n        alt=\"For annotation\" \r\n        style={{ maxWidth: '100%', maxHeight: '70vh' }} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoAnnotation;\r\n"],"names":["_ref","photo","onSave","onCancel","imgRef","useRef","markerAreaRef","selectedColor","setSelectedColor","useState","isAnnotating","setIsAnnotating","useEffect","current","markerArea","MarkerArea","targetRoot","document","body","markerTypes","ArrowMarker","TextMarker","EllipseMarker","annotations","length","restoreState","addEventListener","event","annotatedPhoto","dataUrl","state","show","close","photoSrc","_jsxs","className","children","_jsx","type","value","onChange","e","handleColorChange","color","target","setMarkerColor","onClick","handleSave","render","handleCancel","ref","src","alt","style","maxWidth","maxHeight"],"sourceRoot":""}