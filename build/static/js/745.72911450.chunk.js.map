{"version":3,"file":"static/js/745.72911450.chunk.js","mappings":"gLAIA,MA+1BA,EA/1B8BA,KAC5B,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,MACjBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,KACpCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,OAC5BS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,cACpCW,EAAoBC,IAAyBZ,EAAAA,EAAAA,WAAS,IACtDa,EAAoBC,IAAyBd,EAAAA,EAAAA,WAAS,IAEtDe,EAAaC,IAAkBhB,EAAAA,EAAAA,UAAS,CAC7CiB,KAAM,GACNC,cAAe,GACfC,YAAa,GACbC,cAAe,WACfC,eAAgB,GAChBC,cAAe,OACfC,kBAAmB,GACnBC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GACfC,YAAa,MAGRC,EAAaC,IAAkB7B,EAAAA,EAAAA,UAAS,CAC7C8B,YAAa,GACbC,aAAc,GACdC,YAAa,GACbC,aAAc,MAGhBC,EAAAA,EAAAA,WAAU,KACRC,KACC,IAEH,MAAMA,EAAWC,UACf,IACE9B,GAAW,GACXE,EAAS,MAET,MAAO6B,EAAeC,SAAuBC,QAAQC,IAAI,CACvDC,OAAOC,IAAI5C,YAAY6C,SACvBF,OAAOC,IAAIvC,UAAUwC,WAGvB5C,EAAesC,GACfjC,EAAakC,GAGb,MAAMM,EAAoBN,EAAcO,IAAIC,GAC1CL,OAAOC,IAAIzC,YAAY8C,iBAAiBD,EAAGE,KAGvCC,SADyBV,QAAQC,IAAII,IACLM,OACtChD,EAAe+C,EAEjB,CAAE,MAAOE,GACPC,QAAQ7C,MAAM,yBAA0B4C,GACxC3C,EAAS2C,EAAIE,QACf,CAAC,QACC/C,GAAW,EACb,GAiGIgD,EAAuBC,IAC3B,MAAM,eAAEC,EAAc,gBAAEC,EAAe,eAAEC,GAAmBH,EAE5D,MAAuB,aAAnBC,GAE0B,UAAnBA,EADF,SAASC,KAAmBC,IAI5B,oBAAoBD,KAAmBC,MAI5CC,EAAgBC,IACpB,IAAKA,EAAS,MAAO,UAErB,MAAMC,EAAQ,IAAIC,KAEZC,EADM,IAAID,KAAKF,GACEC,EACjBG,EAAWC,KAAKC,KAAKH,EAAQ,OAEnC,OAAIC,EAAW,EAAU,UACrBA,GAAY,EAAU,WACtBA,GAAY,GAAW,WACpB,WAGHG,EAAqBP,IACzB,MASMQ,EARe,CACnB,QAAW,CAAEC,MAAO,cAAeC,MAAO,WAC1C,WAAY,CAAED,MAAO,WAAYC,MAAO,YACxC,SAAY,CAAED,MAAO,eAAgBC,MAAO,YAC5C,QAAW,CAAED,MAAO,cAAeC,MAAO,WAC1C,UAAW,CAAED,MAAO,cAAeC,MAAO,YAN7BX,EAAaC,IAU5B,OAAOW,EAAAA,EAAAA,KAAA,QAAMC,UAAW,aAAaJ,EAAOC,QAAQI,SAAEL,EAAOE,SAgI/D,OAAIjE,GAEAqE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8BAENF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,SAAC,0BAKnClE,GAEAmE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8BAENC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0BAAwBlE,MAC3BgE,EAAAA,EAAAA,KAAA,UAAQI,QAASxC,EAAUqC,UAAU,eAAcC,SAAC,iBAS1DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,4BACJC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,UACEF,UAAW,eAA4B,cAAd/D,EAA4B,SAAW,IAChEkE,QAASA,IAAMjE,EAAa,aAAa+D,SAAA,CAC1C,2BACgBxE,EAAY2E,OAAO,QAEpCF,EAAAA,EAAAA,MAAA,UACEF,UAAW,eAA4B,cAAd/D,EAA4B,SAAW,IAChEkE,QAASA,IAAMjE,EAAa,aAAa+D,SAAA,CAC1C,2BACgB3E,EAAY8E,OAAO,WAGtCF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,CACd,cAAdhE,IACC8D,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM7D,GAAsB,GAAM2D,SAC5C,kBAIY,cAAdhE,IACC8D,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM/D,GAAsB,GAAM6D,SAC5C,+BASM,cAAdhE,IACCiE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAExE,EAAY2E,UAC7CL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,wBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,+BAA8BC,SAC3CxE,EAAY4E,OAAOC,GAAuC,aAAlCnB,EAAamB,EAAEC,gBAA+BH,UAEzEL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,iBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gCAA+BC,SAC5CxE,EAAY4E,OAAOC,GAAuC,YAAlCnB,EAAamB,EAAEC,gBAA8BH,UAExEL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,gBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,4BAA2BC,SACxCxE,EAAY4E,OAAOC,GAAuC,YAAlCnB,EAAamB,EAAEC,gBAA8BH,UAExEL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,mBAIpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SACL,IAAvBxE,EAAY2E,QACXF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iCACHF,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM7D,GAAsB,GAAM2D,SAC5C,6BAKHxE,EAAY4C,IAAImC,IACd,MAAMC,EAAgB9E,EAAU+E,KAAKpC,GAAMA,EAAGE,KAAOgC,EAASG,cAC9D,OACET,EAAAA,EAAAA,MAAA,OAAuBF,UAAU,gBAAeC,SAAA,EAC9CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKO,EAASI,iBACdV,EAAAA,EAAAA,MAAA,QAAMF,UAAU,qBAAoBC,SAAA,CACpB,OAAbQ,QAAa,IAAbA,OAAa,EAAbA,EAAeE,aAAa,MAAiB,OAAbF,QAAa,IAAbA,OAAa,EAAbA,EAAeI,YAGpDX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,CAC7BN,EAAkBa,EAASD,gBAC5BR,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAC9BnB,EAAoB0B,YAK3BN,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,eAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAC3BO,EAASD,cAAgB,IAAIjB,KAAKkB,EAASD,eAAeO,qBAAuB,qBAGrFN,EAASO,sBACRb,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,qBAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAE,IAAIX,KAAKkB,EAASO,qBAAqBD,0BAG1EN,EAASQ,iBACRd,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,gBAC/BC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,eAAcC,SAAA,CAAEO,EAASQ,eAAe,IAAER,EAAStB,yBAKzEgB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,4BACVG,QAASA,IAnRCvC,WAC9B,IACE,MAAM6C,EAAgB9E,EAAU+E,KAAKpC,GAAMA,EAAGE,KAAOgC,EAASG,cACxD5B,EAAWzD,EAAYoF,KAAKO,GAAKA,EAAEzC,KAAOgC,EAASU,gBAEzD,IAAKT,IAAkB1B,EAErB,YADA/C,EAAS,mCAKX,MAAMmF,EAAW,MAAMV,EAAcE,iBAAgB,IAAIrB,MAAO8B,iBAAiBC,OAAO/B,KAAKgC,OAAOC,OAAO,KAErGC,EAAgB,CACpBlE,YAAakD,EAASG,aACtBQ,WACAM,MAAO,GAAG1C,EAAStC,UAAUgE,EAAcE,eAC3ChE,YAAaoC,EAASpC,aAAe,8BAA8B8D,EAAcE,eACjFe,SAAU,aACVC,SAAmD,YAAzCxC,EAAaqB,EAASD,eAA+B,OAAS,SACxEqB,WAAY,KACZC,eAAgB9C,EAAS+C,oBAAsB,KAC/CC,WAAsB,OAAX3G,QAAW,IAAXA,OAAW,EAAXA,EAAa4G,YAAa,eACrCC,cAAezB,EAASD,cACxB2B,aAAc,KACdC,aAAc3B,EAAShC,IAGnB4D,QAAuBnE,OAAOC,IAAImE,WAAWC,OAAOd,GACpDe,GAA4B,OAAdH,QAAc,IAAdA,OAAc,EAAdA,EAAgBI,UAAwB,OAAdJ,QAAc,IAAdA,OAAc,EAAdA,EAAgB5D,KAAM,QAG9DP,OAAOC,IAAIuE,SAASH,OAAO,CAC/BI,QAAmB,OAAXtH,QAAW,IAAXA,OAAW,EAAXA,EAAaoD,KAAM,KAC3BmE,UAAqB,OAAXvH,QAAW,IAAXA,OAAW,EAAXA,EAAauH,WAAY,eACnCC,OAAQ,SACRC,WAAY,aACZC,SAAUP,EACVQ,UAAW,KACXC,UAAWC,KAAKC,UAAU1B,GAC1B2B,UAAW,KACXC,UAAWC,UAAUD,YAGvBE,MAAM,cAAcnC,iCACdxD,GAER,CAAE,MAAOgB,GACPC,QAAQ7C,MAAM,+BAAgC4C,GAC9C3C,EAAS2C,EAAIE,QACf,GAiOmC0E,CAAwB/C,GAAUP,SAClD,yBAGDF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,6BAA4BC,SAAC,sBA5CzCO,EAAShC,WAyDhB,cAAdvC,IACCiE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAE3E,EAAY8E,UAC7CL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,wBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,4BAA2BC,SACxC3E,EAAY+E,OAAOY,GAA0B,aAArBA,EAAEjC,gBAA+BoB,UAE5DL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,uBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,+BAA8BC,SAC3C3E,EAAY+E,OAAOY,GAA0B,UAArBA,EAAEjC,gBAA4BoB,UAEzDL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,oBAElCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,4BAA2BC,SACxC3E,EAAY+E,OAAOY,GAA0B,cAArBA,EAAEjC,gBAAgCoB,UAE7DL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAC,2BAIpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SACL,IAAvB3E,EAAY8E,QACXF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8BACHF,EAAAA,EAAAA,KAAA,UACEC,UAAU,gBACVG,QAASA,IAAM/D,GAAsB,GAAM6D,SAC5C,6BAKH3E,EAAY+C,IAAIU,IACdmB,EAAAA,EAAAA,MAAA,OAAuBF,UAAU,gBAAeC,SAAA,EAC9CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKlB,EAAStC,QACdsD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,0BAAyBC,SAAElB,EAASyE,qBAEtDtD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAW,wBAAwBjB,EAASC,iBAAiBiB,SAChElB,EAASC,kBAEZe,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAC9BnB,EAAoBC,WAK1BA,EAASpC,cACRoD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,KAAA,KAAAE,SAAIlB,EAASpC,iBAIjBuD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC9BlB,EAAS+C,qBACR5B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,yBAC/BC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,eAAcC,SAAA,CAAElB,EAAS+C,mBAAmB,eAG/D/C,EAAS0E,kBACRvD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,sBAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAC3BgD,KAAKS,MAAM3E,EAAS0E,iBAAiBE,KAAK,WAIhD5E,EAAS6E,iBACR1D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAAC,qBAC/BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcC,SAC3BgD,KAAKS,MAAM3E,EAAS6E,gBAAgBD,KAAK,cAMjD5E,EAAS/B,eACRkD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAIlB,EAAS/B,kBAIhB+B,EAAS8E,eACR3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gCACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAIlB,EAAS8E,mBAIjB3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,qBAAoBC,SAAC,mBAGvCF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,gCAA+BC,SAAC,qBAGlDF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,2BAA0BC,SAAC,oBApEvClB,EAASP,UAgF5BrC,IACC4D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,eACVG,QAASA,IAAM/D,GAAsB,GAAO6D,SAC7C,aAKHC,EAAAA,EAAAA,MAAA,QAAM4D,SA/iBalG,UAC3BmG,EAAEC,iBAEF,IACE,MAAMC,QAA6BhG,OAAOC,IAAI5C,YAAYgH,OAAO,CAC/D7F,KAAMF,EAAYE,KAClBC,cAAeH,EAAYG,cAC3BC,YAAaJ,EAAYI,YACzBC,cAAeL,EAAYK,cAC3BC,eAAgBqH,SAAS3H,EAAYM,gBACrCC,cAAeP,EAAYO,cAC3BC,kBAAmBR,EAAYQ,kBAAoBoH,WAAW5H,EAAYQ,mBAAqB,KAC/FC,aAAcT,EAAYS,aAC1BC,eAAgBV,EAAYU,eAAiBgG,KAAKC,UAAU3G,EAAYU,eAAemH,MAAM,KAAK/F,IAAIiC,GAAKA,EAAE+D,SAAW,KACxHnH,cAAeX,EAAYW,cAAgB+F,KAAKC,UAAU3G,EAAYW,cAAckH,MAAM,KAAK/F,IAAIiC,GAAKA,EAAE+D,SAAW,KACrHlH,YAAaZ,EAAYY,cAErBmH,GAAwC,OAApBL,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBzB,UAA8B,OAApByB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBzF,KAAM,QAGhFP,OAAOC,IAAIuE,SAASH,OAAO,CAC/BI,QAAmB,OAAXtH,QAAW,IAAXA,OAAW,EAAXA,EAAaoD,KAAM,KAC3BmE,UAAqB,OAAXvH,QAAW,IAAXA,OAAW,EAAXA,EAAauH,WAAY,eACnCC,OAAQ,SACRC,WAAY,cACZC,SAAUwB,EACVvB,UAAW,KACXC,UAAWC,KAAKC,UAAU3G,GAC1B4G,UAAW,KACXC,UAAWC,UAAUD,YAGvBhH,GAAsB,GACtBI,EAAe,CACbC,KAAM,GACNC,cAAe,GACfC,YAAa,GACbC,cAAe,WACfC,eAAgB,GAChBC,cAAe,OACfC,kBAAmB,GACnBC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GACfC,YAAa,WAGTQ,GACR,CAAE,MAAOgB,GACPC,QAAQ7C,MAAM,8BAA+B4C,GAC7C3C,EAAS2C,EAAIE,QACf,GA4f8CmB,UAAU,cAAaC,SAAA,EAC3DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qBACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACL0D,MAAOhI,EAAYE,KACnB+H,SAAWT,GAAMvH,EAAe,IAAID,EAAaE,KAAMsH,EAAEU,OAAOF,QAChEG,UAAQ,EACRC,YAAY,uCAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,sBACPC,EAAAA,EAAAA,MAAA,UACEqE,MAAOhI,EAAYG,cACnB8H,SAAWT,GAAMvH,EAAe,IAAID,EAAaG,cAAeqH,EAAEU,OAAOF,QACzEG,UAAQ,EAAAzE,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,GAAEtE,SAAC,0BAnU1B,IAAI,IAAI2E,IAAIjJ,EAAU0C,IAAIC,GAAMA,EAAGuC,MAAMR,OAAOwE,WAoUlBxG,IAAIwC,IACvBd,EAAAA,EAAAA,KAAA,UAAmBwE,MAAO1D,EAAKZ,SAAEY,GAApBA,cAMrBX,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPF,EAAAA,EAAAA,KAAA,YACEwE,MAAOhI,EAAYI,YACnB6H,SAAWT,GAAMvH,EAAe,IAAID,EAAaI,YAAaoH,EAAEU,OAAOF,QACvEO,KAAK,IACLH,YAAY,uDAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,sBACPC,EAAAA,EAAAA,MAAA,UACEqE,MAAOhI,EAAYK,cACnB4H,SAAWT,GAAMvH,EAAe,IAAID,EAAaK,cAAemH,EAAEU,OAAOF,QACzEG,UAAQ,EAAAzE,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,WAAUtE,SAAC,oBACzBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,QAAOtE,SAAC,iBACtBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,YAAWtE,SAAC,2BAI9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uBACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,SACLkE,IAAI,IACJR,MAAOhI,EAAYM,eACnB2H,SAAWT,GAAMvH,EAAe,IAAID,EAAaM,eAAgBkH,EAAEU,OAAOF,QAC1EG,UAAQ,EACRC,YAAY,oBAKlBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,oBACPC,EAAAA,EAAAA,MAAA,UACEqE,MAAOhI,EAAYO,cACnB0H,SAAWT,GAAMvH,EAAe,IAAID,EAAaO,cAAeiH,EAAEU,OAAOF,QAAQtE,SAAA,EAEjFF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,OAAMtE,SAAC,UACrBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,QAAOtE,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,SAAQtE,SAAC,YACvBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,QAAOtE,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,SAAQtE,SAAC,kBAI3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,gCACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,SACLmE,KAAK,MACLD,IAAI,IACJR,MAAOhI,EAAYQ,kBACnByH,SAAWT,GAAMvH,EAAe,IAAID,EAAaQ,kBAAmBgH,EAAEU,OAAOF,QAC7EI,YAAY,qBAKlBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAA,YACEwE,MAAOhI,EAAYS,aACnBwH,SAAWT,GAAMvH,EAAe,IAAID,EAAaS,aAAc+G,EAAEU,OAAOF,QACxEO,KAAK,IACLH,YAAY,uDAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,uCACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACL0D,MAAOhI,EAAYU,eACnBuH,SAAWT,GAAMvH,EAAe,IAAID,EAAaU,eAAgB8G,EAAEU,OAAOF,QAC1EI,YAAY,8CAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,sCACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACL0D,MAAOhI,EAAYW,cACnBsH,SAAWT,GAAMvH,EAAe,IAAID,EAAaW,cAAe6G,EAAEU,OAAOF,QACzEI,YAAY,qDAKlBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,kBACPF,EAAAA,EAAAA,KAAA,YACEwE,MAAOhI,EAAYY,YACnBqH,SAAWT,GAAMvH,EAAe,IAAID,EAAaY,YAAa4G,EAAEU,OAAOF,QACvEO,KAAK,IACLH,YAAY,wDAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UAAQc,KAAK,SAASV,QAASA,IAAM/D,GAAsB,GAAQ4D,UAAU,gBAAeC,SAAC,YAG7FF,EAAAA,EAAAA,KAAA,UAAQc,KAAK,SAASb,UAAU,gBAAeC,SAAC,+BAUzD5D,IACC0D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,UACEC,UAAU,eACVG,QAASA,IAAM7D,GAAsB,GAAO2D,SAC7C,aAKHC,EAAAA,EAAAA,MAAA,QAAM4D,SA3pBalG,UAC3BmG,EAAEC,iBAEF,IACE,MAAMiB,QAA6BhH,OAAOC,IAAIzC,YAAY6G,OAAO,CAC/DhF,YAAa4G,SAAS9G,EAAYE,aAClCC,aAAc2G,SAAS9G,EAAYG,cACnCC,YAAaJ,EAAYI,YACzBC,aAAcL,EAAYK,aAAe0G,WAAW/G,EAAYK,cAAgB,OAE5EyH,GAAwC,OAApBD,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBzC,UAA8B,OAApByC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBzG,KAAM,QAGhFP,OAAOC,IAAIuE,SAASH,OAAO,CAC/BI,QAAmB,OAAXtH,QAAW,IAAXA,OAAW,EAAXA,EAAaoD,KAAM,KAC3BmE,UAAqB,OAAXvH,QAAW,IAAXA,OAAW,EAAXA,EAAauH,WAAY,eACnCC,OAAQ,SACRC,WAAY,cACZC,SAAUoC,EACVnC,UAAW,KACXC,UAAWC,KAAKC,UAAU9F,GAC1B+F,UAAW,KACXC,UAAWC,UAAUD,YAGvB9G,GAAsB,GACtBe,EAAe,CACbC,YAAa,GACbC,aAAc,GACdC,YAAa,GACbC,aAAc,WAGVE,GACR,CAAE,MAAOgB,GACPC,QAAQ7C,MAAM,8BAA+B4C,GAC7C3C,EAAS2C,EAAIE,QACf,GAsnB8CmB,UAAU,cAAaC,SAAA,EAC3DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,iBACPC,EAAAA,EAAAA,MAAA,UACEqE,MAAOnH,EAAYE,YACnBkH,SAAWT,GAAM1G,EAAe,IAAID,EAAaE,YAAayG,EAAEU,OAAOF,QACvEG,UAAQ,EAAAzE,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,GAAEtE,SAAC,qBAChBtE,EAAU0C,IAAIC,IACb4B,EAAAA,EAAAA,MAAA,UAAoBqE,MAAOjG,EAAGE,GAAGyB,SAAA,CAC9B3B,EAAGqC,aAAa,MAAIrC,EAAGuC,OADbvC,EAAGE,YAOtB0B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,mBACPC,EAAAA,EAAAA,MAAA,UACEqE,MAAOnH,EAAYG,aACnBiH,SAAWT,GAAM1G,EAAe,IAAID,EAAaG,aAAcwG,EAAEU,OAAOF,QACxEG,UAAQ,EAAAzE,SAAA,EAERF,EAAAA,EAAAA,KAAA,UAAQwE,MAAM,GAAEtE,SAAC,uBAChB3E,EACE+E,OAAOtB,IACN,IAAK3B,EAAYE,YAAa,OAAO,EACrC,MAAM6H,EAAoBxJ,EAAU+E,KAAKpC,GAAMA,EAAGE,KAAO0F,SAAS9G,EAAYE,cAC9E,OAAO6H,GAAqBpG,EAASyE,iBAAmB2B,EAAkBtE,OAE3ExC,IAAIU,IACHmB,EAAAA,EAAAA,MAAA,UAA0BqE,MAAOxF,EAASP,GAAGyB,SAAA,CAC1ClB,EAAStC,KAAK,KAAGqC,EAAoBC,GAAU,MADrCA,EAASP,YAO9B0B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qBACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,OACL0D,MAAOnH,EAAYI,YACnBgH,SAAWT,GAAM1G,EAAe,IAAID,EAAaI,YAAauG,EAAEU,OAAOF,QACvEG,UAAQ,QAIZxE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,qCACPF,EAAAA,EAAAA,KAAA,SACEc,KAAK,SACLmE,KAAK,MACLD,IAAI,IACJR,MAAOnH,EAAYK,aACnB+G,SAAWT,GAAM1G,EAAe,IAAID,EAAaK,aAAcsG,EAAEU,OAAOF,QACxEI,YAAY,kCAIhBzE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UAAQc,KAAK,SAASV,QAASA,IAAM7D,GAAsB,GAAQ0D,UAAU,gBAAeC,SAAC,YAG7FF,EAAAA,EAAAA,KAAA,UAAQc,KAAK,SAASb,UAAU,gBAAeC,SAAC,kC","sources":["components/PreventiveMaintenance.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport './PreventiveMaintenance.css';\r\n\r\nconst PreventiveMaintenance = () => {\r\n  const { currentUser } = useUser();\r\n  const [pmTemplates, setPmTemplates] = useState([]);\r\n  const [pmSchedules, setPmSchedules] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [activeTab, setActiveTab] = useState('schedules'); // 'schedules' or 'templates'\r\n  const [showCreateTemplate, setShowCreateTemplate] = useState(false);\r\n  const [showCreateSchedule, setShowCreateSchedule] = useState(false);\r\n\r\n  const [newTemplate, setNewTemplate] = useState({\r\n    name: '',\r\n    equipmentType: '',\r\n    description: '',\r\n    frequencyType: 'calendar',\r\n    frequencyValue: '',\r\n    frequencyUnit: 'days',\r\n    estimatedDuration: '',\r\n    instructions: '',\r\n    requiredSkills: '',\r\n    requiredParts: '',\r\n    safetyNotes: ''\r\n  });\r\n\r\n  const [newSchedule, setNewSchedule] = useState({\r\n    equipmentId: '',\r\n    pmTemplateId: '',\r\n    nextDueDate: '',\r\n    nextDueUsage: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [templatesData, equipmentData] = await Promise.all([\r\n        window.api.pmTemplates.getAll(),\r\n        window.api.equipment.getAll()\r\n      ]);\r\n\r\n      setPmTemplates(templatesData);\r\n      setEquipment(equipmentData);\r\n\r\n      // Load schedules for all equipment\r\n      const schedulesPromises = equipmentData.map(eq => \r\n        window.api.pmSchedules.getByEquipmentId(eq.id)\r\n      );\r\n      const schedulesResults = await Promise.all(schedulesPromises);\r\n      const allSchedules = schedulesResults.flat();\r\n      setPmSchedules(allSchedules);\r\n\r\n    } catch (err) {\r\n      console.error('Error loading PM data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateTemplate = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const createTemplateResult = await window.api.pmTemplates.create({\r\n        name: newTemplate.name,\r\n        equipmentType: newTemplate.equipmentType,\r\n        description: newTemplate.description,\r\n        frequencyType: newTemplate.frequencyType,\r\n        frequencyValue: parseInt(newTemplate.frequencyValue),\r\n        frequencyUnit: newTemplate.frequencyUnit,\r\n        estimatedDuration: newTemplate.estimatedDuration ? parseFloat(newTemplate.estimatedDuration) : null,\r\n        instructions: newTemplate.instructions,\r\n        requiredSkills: newTemplate.requiredSkills ? JSON.stringify(newTemplate.requiredSkills.split(',').map(s => s.trim())) : null,\r\n        requiredParts: newTemplate.requiredParts ? JSON.stringify(newTemplate.requiredParts.split(',').map(s => s.trim())) : null,\r\n        safetyNotes: newTemplate.safetyNotes\r\n      });\r\n      const createdTemplateId = createTemplateResult?.lastID || createTemplateResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'pm_template',\r\n        entityId: createdTemplateId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(newTemplate),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      setShowCreateTemplate(false);\r\n      setNewTemplate({\r\n        name: '',\r\n        equipmentType: '',\r\n        description: '',\r\n        frequencyType: 'calendar',\r\n        frequencyValue: '',\r\n        frequencyUnit: 'days',\r\n        estimatedDuration: '',\r\n        instructions: '',\r\n        requiredSkills: '',\r\n        requiredParts: '',\r\n        safetyNotes: ''\r\n      });\r\n      \r\n      await loadData();\r\n    } catch (err) {\r\n      console.error('Error creating PM template:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleCreateSchedule = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const createScheduleResult = await window.api.pmSchedules.create({\r\n        equipmentId: parseInt(newSchedule.equipmentId),\r\n        pmTemplateId: parseInt(newSchedule.pmTemplateId),\r\n        nextDueDate: newSchedule.nextDueDate,\r\n        nextDueUsage: newSchedule.nextDueUsage ? parseFloat(newSchedule.nextDueUsage) : null\r\n      });\r\n      const createdScheduleId = createScheduleResult?.lastID || createScheduleResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'pm_schedule',\r\n        entityId: createdScheduleId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(newSchedule),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      setShowCreateSchedule(false);\r\n      setNewSchedule({\r\n        equipmentId: '',\r\n        pmTemplateId: '',\r\n        nextDueDate: '',\r\n        nextDueUsage: ''\r\n      });\r\n      \r\n      await loadData();\r\n    } catch (err) {\r\n      console.error('Error creating PM schedule:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const getFrequencyDisplay = (template) => {\r\n    const { frequency_type, frequency_value, frequency_unit } = template;\r\n    \r\n    if (frequency_type === 'calendar') {\r\n      return `Every ${frequency_value} ${frequency_unit}`;\r\n    } else if (frequency_type === 'usage') {\r\n      return `Every ${frequency_value} ${frequency_unit}`;\r\n    } else {\r\n      return `Condition-based (${frequency_value} ${frequency_unit})`;\r\n    }\r\n  };\r\n\r\n  const getDueStatus = (dueDate) => {\r\n    if (!dueDate) return 'no-date';\r\n    \r\n    const today = new Date();\r\n    const due = new Date(dueDate);\r\n    const diffTime = due - today;\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays < 0) return 'overdue';\r\n    if (diffDays <= 7) return 'due-soon';\r\n    if (diffDays <= 30) return 'upcoming';\r\n    return 'current';\r\n  };\r\n\r\n  const getDueStatusBadge = (dueDate) => {\r\n    const status = getDueStatus(dueDate);\r\n    const statusConfig = {\r\n      'overdue': { class: 'due-overdue', label: 'Overdue' },\r\n      'due-soon': { class: 'due-soon', label: 'Due Soon' },\r\n      'upcoming': { class: 'due-upcoming', label: 'Upcoming' },\r\n      'current': { class: 'due-current', label: 'Current' },\r\n      'no-date': { class: 'due-no-date', label: 'No Date' }\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <span className={`due-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const handleGenerateWorkOrder = async (schedule) => {\r\n    try {\r\n      const equipmentItem = equipment.find(eq => eq.id === schedule.equipment_id);\r\n      const template = pmTemplates.find(t => t.id === schedule.pm_template_id);\r\n      \r\n      if (!equipmentItem || !template) {\r\n        setError('Equipment or template not found');\r\n        return;\r\n      }\r\n\r\n      // Generate unique work order number\r\n      const woNumber = `PM-${equipmentItem.equipment_id}-${new Date().getFullYear()}-${String(Date.now()).slice(-4)}`;\r\n      \r\n      const workOrderData = {\r\n        equipmentId: schedule.equipment_id,\r\n        woNumber,\r\n        title: `${template.name} - ${equipmentItem.equipment_id}`,\r\n        description: template.description || `Preventive maintenance for ${equipmentItem.equipment_id}`,\r\n        workType: 'preventive',\r\n        priority: getDueStatus(schedule.next_due_date) === 'overdue' ? 'high' : 'medium',\r\n        assignedTo: null,\r\n        estimatedHours: template.estimated_duration || null,\r\n        createdBy: currentUser?.full_name || 'Unknown User',\r\n        scheduledDate: schedule.next_due_date,\r\n        deficiencyId: null,\r\n        pmScheduleId: schedule.id\r\n      };\r\n\r\n      const createWOResult = await window.api.workOrders.create(workOrderData);\r\n      const createdWOId = createWOResult?.lastID || createWOResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'work_order',\r\n        entityId: createdWOId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(workOrderData),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      alert(`Work Order ${woNumber} created successfully!`);\r\n      await loadData(); // Refresh data to show updated state\r\n      \r\n    } catch (err) {\r\n      console.error('Error generating work order:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const calculateNextDueDate = (template, lastCompletedDate = null) => {\r\n    const baseDate = lastCompletedDate ? new Date(lastCompletedDate) : new Date();\r\n    const { frequency_type, frequency_value, frequency_unit } = template;\r\n    \r\n    if (frequency_type === 'calendar') {\r\n      switch (frequency_unit) {\r\n        case 'days':\r\n          baseDate.setDate(baseDate.getDate() + frequency_value);\r\n          break;\r\n        case 'weeks':\r\n          baseDate.setDate(baseDate.getDate() + (frequency_value * 7));\r\n          break;\r\n        case 'months':\r\n          baseDate.setMonth(baseDate.getMonth() + frequency_value);\r\n          break;\r\n        default:\r\n          baseDate.setDate(baseDate.getDate() + frequency_value);\r\n      }\r\n    }\r\n    \r\n    return baseDate.toISOString().split('T')[0]; // Return YYYY-MM-DD format\r\n  };\r\n\r\n  const handleUpdatePMScheduleAfterCompletion = async (pmScheduleId, completedDate) => {\r\n    try {\r\n      const schedule = pmSchedules.find(s => s.id === pmScheduleId);\r\n      if (!schedule) return;\r\n\r\n      const template = pmTemplates.find(t => t.id === schedule.pm_template_id);\r\n      if (!template) return;\r\n\r\n      const nextDueDate = calculateNextDueDate(template, completedDate);\r\n      \r\n      await window.api.pmSchedules.updateDue({\r\n        id: pmScheduleId,\r\n        nextDueDate,\r\n        nextDueUsage: null, // For now, we'll handle usage-based separately\r\n        lastCompletedDate: completedDate,\r\n        lastCompletedUsage: null\r\n      });\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'update',\r\n        entityType: 'pm_schedule',\r\n        entityId: pmScheduleId,\r\n        oldValues: JSON.stringify({ \r\n          next_due_date: schedule.next_due_date,\r\n          last_completed_date: schedule.last_completed_date \r\n        }),\r\n        newValues: JSON.stringify({ \r\n          next_due_date: nextDueDate,\r\n          last_completed_date: completedDate \r\n        }),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      await loadData(); // Refresh data to show updated schedule\r\n      \r\n    } catch (err) {\r\n      console.error('Error updating PM schedule:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const getEquipmentTypes = () => {\r\n    return [...new Set(equipment.map(eq => eq.type).filter(Boolean))];\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"preventive-maintenance\">\r\n        <div className=\"pm-header\">\r\n          <h1>Preventive Maintenance</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading PM data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"preventive-maintenance\">\r\n        <div className=\"pm-header\">\r\n          <h1>Preventive Maintenance</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading PM data: {error}</p>\r\n          <button onClick={loadData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"preventive-maintenance\">\r\n      <div className=\"pm-header\">\r\n        <h1>Preventive Maintenance</h1>\r\n        <div className=\"header-actions\">\r\n          <div className=\"tab-selector\">\r\n            <button \r\n              className={`tab-button ${activeTab === 'schedules' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('schedules')}\r\n            >\r\n              📅 Schedules ({pmSchedules.length})\r\n            </button>\r\n            <button \r\n              className={`tab-button ${activeTab === 'templates' ? 'active' : ''}`}\r\n              onClick={() => setActiveTab('templates')}\r\n            >\r\n              📋 Templates ({pmTemplates.length})\r\n            </button>\r\n          </div>\r\n          <div className=\"action-buttons\">\r\n            {activeTab === 'schedules' && (\r\n              <button \r\n                className=\"create-button\"\r\n                onClick={() => setShowCreateSchedule(true)}\r\n              >\r\n                + Schedule PM\r\n              </button>\r\n            )}\r\n            {activeTab === 'templates' && (\r\n              <button \r\n                className=\"create-button\"\r\n                onClick={() => setShowCreateTemplate(true)}\r\n              >\r\n                + Create Template\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* PM Schedules Tab */}\r\n      {activeTab === 'schedules' && (\r\n        <div className=\"pm-schedules\">\r\n          <div className=\"pm-summary\">\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value\">{pmSchedules.length}</span>\r\n              <span className=\"summary-label\">Total Schedules</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-warning\">\r\n                {pmSchedules.filter(s => getDueStatus(s.next_due_date) === 'due-soon').length}\r\n              </span>\r\n              <span className=\"summary-label\">Due Soon</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-critical\">\r\n                {pmSchedules.filter(s => getDueStatus(s.next_due_date) === 'overdue').length}\r\n              </span>\r\n              <span className=\"summary-label\">Overdue</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-good\">\r\n                {pmSchedules.filter(s => getDueStatus(s.next_due_date) === 'current').length}\r\n              </span>\r\n              <span className=\"summary-label\">Current</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"schedules-list\">\r\n            {pmSchedules.length === 0 ? (\r\n              <div className=\"empty-state\">\r\n                <p>No PM schedules configured.</p>\r\n                <button \r\n                  className=\"create-button\"\r\n                  onClick={() => setShowCreateSchedule(true)}\r\n                >\r\n                  Create First Schedule\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              pmSchedules.map(schedule => {\r\n                const equipmentItem = equipment.find(eq => eq.id === schedule.equipment_id);\r\n                return (\r\n                  <div key={schedule.id} className=\"schedule-card\">\r\n                    <div className=\"schedule-header\">\r\n                      <div className=\"schedule-title\">\r\n                        <h3>{schedule.template_name}</h3>\r\n                        <span className=\"schedule-equipment\">\r\n                          {equipmentItem?.equipment_id} - {equipmentItem?.type}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"schedule-badges\">\r\n                        {getDueStatusBadge(schedule.next_due_date)}\r\n                        <span className=\"frequency-badge\">\r\n                          {getFrequencyDisplay(schedule)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"schedule-details\">\r\n                      <div className=\"detail-row\">\r\n                        <span className=\"detail-label\">Next Due:</span>\r\n                        <span className=\"detail-value\">\r\n                          {schedule.next_due_date ? new Date(schedule.next_due_date).toLocaleDateString() : 'Not scheduled'}\r\n                        </span>\r\n                      </div>\r\n                      {schedule.last_completed_date && (\r\n                        <div className=\"detail-row\">\r\n                          <span className=\"detail-label\">Last Completed:</span>\r\n                          <span className=\"detail-value\">{new Date(schedule.last_completed_date).toLocaleDateString()}</span>\r\n                        </div>\r\n                      )}\r\n                      {schedule.next_due_usage && (\r\n                        <div className=\"detail-row\">\r\n                          <span className=\"detail-label\">Usage Due:</span>\r\n                          <span className=\"detail-value\">{schedule.next_due_usage} {schedule.frequency_unit}</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"schedule-actions\">\r\n                      <button \r\n                        className=\"action-button generate-wo\"\r\n                        onClick={() => handleGenerateWorkOrder(schedule)}\r\n                      >\r\n                        Generate Work Order\r\n                      </button>\r\n                      <button className=\"action-button view-history\">\r\n                        View History\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* PM Templates Tab */}\r\n      {activeTab === 'templates' && (\r\n        <div className=\"pm-templates\">\r\n          <div className=\"templates-summary\">\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value\">{pmTemplates.length}</span>\r\n              <span className=\"summary-label\">Total Templates</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-good\">\r\n                {pmTemplates.filter(t => t.frequency_type === 'calendar').length}\r\n              </span>\r\n              <span className=\"summary-label\">Calendar-Based</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-warning\">\r\n                {pmTemplates.filter(t => t.frequency_type === 'usage').length}\r\n              </span>\r\n              <span className=\"summary-label\">Usage-Based</span>\r\n            </div>\r\n            <div className=\"summary-card\">\r\n              <span className=\"summary-value status-info\">\r\n                {pmTemplates.filter(t => t.frequency_type === 'condition').length}\r\n              </span>\r\n              <span className=\"summary-label\">Condition-Based</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"templates-list\">\r\n            {pmTemplates.length === 0 ? (\r\n              <div className=\"empty-state\">\r\n                <p>No PM templates created.</p>\r\n                <button \r\n                  className=\"create-button\"\r\n                  onClick={() => setShowCreateTemplate(true)}\r\n                >\r\n                  Create First Template\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              pmTemplates.map(template => (\r\n                <div key={template.id} className=\"template-card\">\r\n                  <div className=\"template-header\">\r\n                    <div className=\"template-title\">\r\n                      <h3>{template.name}</h3>\r\n                      <span className=\"template-equipment-type\">{template.equipment_type}</span>\r\n                    </div>\r\n                    <div className=\"template-badges\">\r\n                      <span className={`frequency-type-badge ${template.frequency_type}`}>\r\n                        {template.frequency_type}\r\n                      </span>\r\n                      <span className=\"frequency-badge\">\r\n                        {getFrequencyDisplay(template)}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {template.description && (\r\n                    <div className=\"template-description\">\r\n                      <p>{template.description}</p>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"template-details\">\r\n                    {template.estimated_duration && (\r\n                      <div className=\"detail-row\">\r\n                        <span className=\"detail-label\">Estimated Duration:</span>\r\n                        <span className=\"detail-value\">{template.estimated_duration} hours</span>\r\n                      </div>\r\n                    )}\r\n                    {template.required_skills && (\r\n                      <div className=\"detail-row\">\r\n                        <span className=\"detail-label\">Required Skills:</span>\r\n                        <span className=\"detail-value\">\r\n                          {JSON.parse(template.required_skills).join(', ')}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                    {template.required_parts && (\r\n                      <div className=\"detail-row\">\r\n                        <span className=\"detail-label\">Required Parts:</span>\r\n                        <span className=\"detail-value\">\r\n                          {JSON.parse(template.required_parts).join(', ')}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {template.instructions && (\r\n                    <div className=\"template-instructions\">\r\n                      <h4>Instructions:</h4>\r\n                      <p>{template.instructions}</p>\r\n                    </div>\r\n                  )}\r\n\r\n                  {template.safety_notes && (\r\n                    <div className=\"template-safety\">\r\n                      <h4>⚠️ Safety Notes:</h4>\r\n                      <p>{template.safety_notes}</p>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"template-actions\">\r\n                    <button className=\"action-button edit\">\r\n                      Edit Template\r\n                    </button>\r\n                    <button className=\"action-button create-schedule\">\r\n                      Create Schedule\r\n                    </button>\r\n                    <button className=\"action-button deactivate\">\r\n                      Deactivate\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Create Template Modal */}\r\n      {showCreateTemplate && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content large\">\r\n            <div className=\"modal-header\">\r\n              <h2>Create PM Template</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => setShowCreateTemplate(false)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCreateTemplate} className=\"create-form\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Template Name *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newTemplate.name}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, name: e.target.value})}\r\n                    required\r\n                    placeholder=\"e.g., Monthly Crane Inspection\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Equipment Type *</label>\r\n                  <select\r\n                    value={newTemplate.equipmentType}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, equipmentType: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Equipment Type</option>\r\n                    {getEquipmentTypes().map(type => (\r\n                      <option key={type} value={type}>{type}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Description</label>\r\n                <textarea\r\n                  value={newTemplate.description}\r\n                  onChange={(e) => setNewTemplate({...newTemplate, description: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Brief description of the maintenance procedure\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Frequency Type *</label>\r\n                  <select\r\n                    value={newTemplate.frequencyType}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, frequencyType: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"calendar\">Calendar-Based</option>\r\n                    <option value=\"usage\">Usage-Based</option>\r\n                    <option value=\"condition\">Condition-Based</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Frequency Value *</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    value={newTemplate.frequencyValue}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, frequencyValue: e.target.value})}\r\n                    required\r\n                    placeholder=\"e.g., 30\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Frequency Unit</label>\r\n                  <select\r\n                    value={newTemplate.frequencyUnit}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, frequencyUnit: e.target.value})}\r\n                  >\r\n                    <option value=\"days\">Days</option>\r\n                    <option value=\"weeks\">Weeks</option>\r\n                    <option value=\"months\">Months</option>\r\n                    <option value=\"hours\">Hours</option>\r\n                    <option value=\"cycles\">Cycles</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Estimated Duration (hours)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    step=\"0.5\"\r\n                    min=\"0\"\r\n                    value={newTemplate.estimatedDuration}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, estimatedDuration: e.target.value})}\r\n                    placeholder=\"e.g., 2.5\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Instructions</label>\r\n                <textarea\r\n                  value={newTemplate.instructions}\r\n                  onChange={(e) => setNewTemplate({...newTemplate, instructions: e.target.value})}\r\n                  rows=\"4\"\r\n                  placeholder=\"Detailed step-by-step maintenance instructions\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Required Skills (comma-separated)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newTemplate.requiredSkills}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, requiredSkills: e.target.value})}\r\n                    placeholder=\"e.g., Electrical, Hydraulics, Rigging\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Required Parts (comma-separated)</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newTemplate.requiredParts}\r\n                    onChange={(e) => setNewTemplate({...newTemplate, requiredParts: e.target.value})}\r\n                    placeholder=\"e.g., Oil filter, Hydraulic fluid, Grease\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Safety Notes</label>\r\n                <textarea\r\n                  value={newTemplate.safetyNotes}\r\n                  onChange={(e) => setNewTemplate({...newTemplate, safetyNotes: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Important safety considerations and precautions\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button type=\"button\" onClick={() => setShowCreateTemplate(false)} className=\"cancel-button\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  Create Template\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Create Schedule Modal */}\r\n      {showCreateSchedule && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2>Create PM Schedule</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => setShowCreateSchedule(false)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCreateSchedule} className=\"create-form\">\r\n              <div className=\"form-group\">\r\n                <label>Equipment *</label>\r\n                <select\r\n                  value={newSchedule.equipmentId}\r\n                  onChange={(e) => setNewSchedule({...newSchedule, equipmentId: e.target.value})}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Equipment</option>\r\n                  {equipment.map(eq => (\r\n                    <option key={eq.id} value={eq.id}>\r\n                      {eq.equipment_id} - {eq.type}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>PM Template *</label>\r\n                <select\r\n                  value={newSchedule.pmTemplateId}\r\n                  onChange={(e) => setNewSchedule({...newSchedule, pmTemplateId: e.target.value})}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select PM Template</option>\r\n                  {pmTemplates\r\n                    .filter(template => {\r\n                      if (!newSchedule.equipmentId) return true;\r\n                      const selectedEquipment = equipment.find(eq => eq.id === parseInt(newSchedule.equipmentId));\r\n                      return selectedEquipment && template.equipment_type === selectedEquipment.type;\r\n                    })\r\n                    .map(template => (\r\n                      <option key={template.id} value={template.id}>\r\n                        {template.name} ({getFrequencyDisplay(template)})\r\n                      </option>\r\n                    ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Next Due Date *</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={newSchedule.nextDueDate}\r\n                  onChange={(e) => setNewSchedule({...newSchedule, nextDueDate: e.target.value})}\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Next Due Usage (if usage-based)</label>\r\n                <input\r\n                  type=\"number\"\r\n                  step=\"0.1\"\r\n                  min=\"0\"\r\n                  value={newSchedule.nextDueUsage}\r\n                  onChange={(e) => setNewSchedule({...newSchedule, nextDueUsage: e.target.value})}\r\n                  placeholder=\"e.g., 1000 (hours/cycles)\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button type=\"button\" onClick={() => setShowCreateSchedule(false)} className=\"cancel-button\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  Create Schedule\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PreventiveMaintenance;\r\n"],"names":["PreventiveMaintenance","currentUser","useUser","pmTemplates","setPmTemplates","useState","pmSchedules","setPmSchedules","equipment","setEquipment","loading","setLoading","error","setError","activeTab","setActiveTab","showCreateTemplate","setShowCreateTemplate","showCreateSchedule","setShowCreateSchedule","newTemplate","setNewTemplate","name","equipmentType","description","frequencyType","frequencyValue","frequencyUnit","estimatedDuration","instructions","requiredSkills","requiredParts","safetyNotes","newSchedule","setNewSchedule","equipmentId","pmTemplateId","nextDueDate","nextDueUsage","useEffect","loadData","async","templatesData","equipmentData","Promise","all","window","api","getAll","schedulesPromises","map","eq","getByEquipmentId","id","allSchedules","flat","err","console","message","getFrequencyDisplay","template","frequency_type","frequency_value","frequency_unit","getDueStatus","dueDate","today","Date","diffTime","diffDays","Math","ceil","getDueStatusBadge","config","class","label","_jsx","className","children","_jsxs","onClick","length","filter","s","next_due_date","schedule","equipmentItem","find","equipment_id","template_name","type","toLocaleDateString","last_completed_date","next_due_usage","t","pm_template_id","woNumber","getFullYear","String","now","slice","workOrderData","title","workType","priority","assignedTo","estimatedHours","estimated_duration","createdBy","full_name","scheduledDate","deficiencyId","pmScheduleId","createWOResult","workOrders","create","createdWOId","lastID","auditLog","userId","username","action","entityType","entityId","oldValues","newValues","JSON","stringify","ipAddress","userAgent","navigator","alert","handleGenerateWorkOrder","equipment_type","required_skills","parse","join","required_parts","safety_notes","onSubmit","e","preventDefault","createTemplateResult","parseInt","parseFloat","split","trim","createdTemplateId","value","onChange","target","required","placeholder","Set","Boolean","rows","min","step","createScheduleResult","createdScheduleId","selectedEquipment"],"sourceRoot":""}