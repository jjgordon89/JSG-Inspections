{"version":3,"file":"static/js/934.aecc1572.chunk.js","mappings":"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","sources":["utils/retry.js","components/AddEquipmentForm.js","utils/qr.js"],"sourcesContent":["/**\r\n * Retry utility for handling transient failures\r\n */\r\n\r\n/**\r\n * Retries a function with exponential backoff\r\n * @param {Function} fn - The function to retry\r\n * @param {Object} options - Retry options\r\n * @param {number} options.maxRetries - Maximum number of retries (default: 3)\r\n * @param {number} options.baseDelay - Base delay in milliseconds (default: 1000)\r\n * @param {number} options.maxDelay - Maximum delay in milliseconds (default: 10000)\r\n * @param {Function} options.shouldRetry - Function to determine if error should be retried\r\n * @returns {Promise} The result of the function or the final error\r\n */\r\nexport async function retryWithBackoff(fn, options = {}) {\r\n  const {\r\n    maxRetries = 3,\r\n    baseDelay = 1000,\r\n    maxDelay = 10000,\r\n    shouldRetry = (error) => error?.error?.retryable === true\r\n  } = options;\r\n\r\n  let lastError;\r\n  \r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      const result = await fn();\r\n      \r\n      // If the result indicates an error but it's not retryable, return immediately\r\n      if (window.api?.isError(result) && !shouldRetry(result)) {\r\n        return result;\r\n      }\r\n      \r\n      // If it's a successful result or non-retryable error, return it\r\n      if (!window.api?.isError(result)) {\r\n        return result;\r\n      }\r\n      \r\n      // Store the error for potential retry\r\n      lastError = result;\r\n      \r\n      // If this is the last attempt, don't wait\r\n      if (attempt === maxRetries) {\r\n        break;\r\n      }\r\n      \r\n      // Calculate delay with exponential backoff\r\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\r\n      console.log(`Retrying operation in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n      \r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      // If this is the last attempt or error is not retryable, break\r\n      if (attempt === maxRetries || !shouldRetry(error)) {\r\n        break;\r\n      }\r\n      \r\n      // Calculate delay with exponential backoff\r\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\r\n      console.log(`Retrying operation in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n  \r\n  return lastError;\r\n}\r\n\r\n/**\r\n * Retries a database read operation\r\n * @param {Function} dbOperation - The database operation to retry\r\n * @param {Object} options - Retry options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport function retryDatabaseRead(dbOperation, options = {}) {\r\n  return retryWithBackoff(dbOperation, {\r\n    maxRetries: 3,\r\n    baseDelay: 500,\r\n    maxDelay: 5000,\r\n    shouldRetry: (result) => {\r\n      // Retry on network errors, timeouts, or database locks\r\n      if (window.api?.isError(result)) {\r\n        const errorCode = result.error?.code;\r\n        return ['SQLITE_BUSY', 'SQLITE_LOCKED', 'NETWORK_ERROR', 'TIMEOUT'].includes(errorCode) ||\r\n               result.error?.retryable === true;\r\n      }\r\n      return false;\r\n    },\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * Makes a write operation idempotent by checking if it already succeeded\r\n * @param {Function} checkFn - Function to check if operation already succeeded\r\n * @param {Function} writeFn - The write operation to perform\r\n * @param {Object} options - Options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport async function makeIdempotent(checkFn, writeFn, options = {}) {\r\n  try {\r\n    // First check if the operation already succeeded\r\n    const checkResult = await checkFn();\r\n    \r\n    if (!window.api?.isError(checkResult) && checkResult.data) {\r\n      console.log('Operation already completed, skipping write');\r\n      return checkResult;\r\n    }\r\n  } catch (error) {\r\n    // If check fails, proceed with write operation\r\n    console.log('Check operation failed, proceeding with write:', error);\r\n  }\r\n  \r\n  // Perform the write operation\r\n  return await writeFn();\r\n}\r\n\r\n/**\r\n * Wraps a database operation with user-friendly error handling\r\n * @param {Function} operation - The database operation\r\n * @param {Function} showToast - Toast notification function\r\n * @param {string} operationName - Human-readable operation name\r\n * @param {Object} options - Options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport async function withErrorHandling(operation, showToast, operationName, options = {}) {\r\n  const { \r\n    successMessage,\r\n    retryable = false,\r\n    onSuccess,\r\n    onError \r\n  } = options;\r\n  \r\n  try {\r\n    let result;\r\n    \r\n    if (retryable) {\r\n      result = await retryDatabaseRead(operation);\r\n    } else {\r\n      result = await operation();\r\n    }\r\n    \r\n    if (window.api?.isError(result)) {\r\n      const errorMessage = window.api.getErrorMessage(result);\r\n      console.error(`${operationName} failed:`, result.error);\r\n      \r\n      if (showToast) {\r\n        showToast(`${operationName} failed: ${errorMessage}`, 'error');\r\n      }\r\n      \r\n      if (onError) {\r\n        onError(result);\r\n      }\r\n      \r\n      return result;\r\n    }\r\n    \r\n    // Success case\r\n    if (successMessage && showToast) {\r\n      showToast(successMessage, 'success');\r\n    }\r\n    \r\n    if (onSuccess) {\r\n      onSuccess(result);\r\n    }\r\n    \r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error(`${operationName} failed with exception:`, error);\r\n    \r\n    if (showToast) {\r\n      showToast(`${operationName} failed: ${error.message}`, 'error');\r\n    }\r\n    \r\n    if (onError) {\r\n      onError(error);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport './AddEquipmentForm.css';\r\nimport { generateQrCode } from '../utils/qr';\r\nimport { withErrorHandling, makeIdempotent } from '../utils/retry';\r\nimport useUIStore from '../store/uiStore';\r\n\r\nconst initialState = {\r\n  equipmentId: '',\r\n  type: 'Overhead Crane',\r\n  manufacturer: '',\r\n  model: '',\r\n  serialNumber: '',\r\n  capacity: '',\r\n  installationDate: '',\r\n  location: '',\r\n  status: 'active',\r\n  files: [],\r\n  qrCodeData: '',\r\n};\r\n\r\nfunction AddEquipmentForm({ onEquipmentAdded }) {\r\n  const [formData, setFormData] = useState(initialState);\r\n  const showToast = useUIStore((state) => state.showToast);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFormData(prev => ({ ...prev, files: e.target.files }));\r\n  };\r\n\r\n  const handleAssociateQrCode = async () => {\r\n    if (!formData.equipmentId) {\r\n      alert('Please enter an Equipment ID first.');\r\n      return;\r\n    }\r\n    const qrCode = await generateQrCode(formData.equipmentId);\r\n    setFormData(prev => ({ ...prev, qrCodeData: qrCode }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const addEquipmentOperation = async () => {\r\n      const { files, ...equipmentData } = formData;\r\n      \r\n      // First, add the equipment\r\n      const equipmentResult = await window.api.equipment.create({\r\n        equipmentId: equipmentData.equipmentId,\r\n        type: equipmentData.type,\r\n        manufacturer: equipmentData.manufacturer,\r\n        model: equipmentData.model,\r\n        serialNumber: equipmentData.serialNumber,\r\n        capacity: equipmentData.capacity,\r\n        installationDate: equipmentData.installationDate,\r\n        location: equipmentData.location,\r\n        status: equipmentData.status,\r\n        qrCodeData: equipmentData.qrCodeData\r\n      });\r\n\r\n      // Then add documents with idempotent checks\r\n      const equipmentId = equipmentResult.lastID;\r\n      const documentResults = [];\r\n\r\n      for (const file of files) {\r\n        const checkExisting = async () => {\r\n          return await window.api.documents.checkExisting(equipmentId, file.name);\r\n        };\r\n\r\n        const addDocument = async () => {\r\n          // For now, we'll use the file path directly since we don't have document import yet\r\n          return await window.api.documents.create({\r\n            equipmentId: equipmentId,\r\n            fileName: file.name,\r\n            filePath: file.path || file.name,\r\n            hash: 'placeholder', // TODO: Calculate actual hash when document import is implemented\r\n            size: file.size || 0\r\n          });\r\n        };\r\n\r\n        const documentResult = await makeIdempotent(checkExisting, addDocument);\r\n        documentResults.push(documentResult);\r\n      }\r\n\r\n      // Check if any document operations failed - simplified since secure operations throw errors\r\n      // instead of returning error objects\r\n\r\n      return { success: true, data: { equipmentId, documentsAdded: documentResults.length } };\r\n    };\r\n\r\n    const result = await withErrorHandling(\r\n      addEquipmentOperation,\r\n      showToast,\r\n      'Add Equipment',\r\n      {\r\n        successMessage: `Equipment \"${formData.equipmentId}\" added successfully`,\r\n        onSuccess: () => {\r\n          onEquipmentAdded();\r\n          setFormData(initialState);\r\n        },\r\n        onError: (error) => {\r\n          // If it was a partial success, still refresh the list\r\n          if (error.error?.partialSuccess) {\r\n            onEquipmentAdded();\r\n            setFormData(initialState);\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"add-equipment-form\">\r\n      <h3>Add New Equipment</h3>\r\n      <div className=\"form-grid\">\r\n        <input name=\"equipmentId\" value={formData.equipmentId} onChange={handleChange} placeholder=\"Equipment ID\" required />\r\n        <select name=\"type\" value={formData.type} onChange={handleChange}>\r\n          <option>Overhead Crane</option>\r\n          <option>Gantry Crane</option>\r\n          <option>Jib</option>\r\n          <option>Monorail</option>\r\n          <option>Hoist</option>\r\n        </select>\r\n        <input name=\"manufacturer\" value={formData.manufacturer} onChange={handleChange} placeholder=\"Manufacturer\" />\r\n        <input name=\"model\" value={formData.model} onChange={handleChange} placeholder=\"Model\" />\r\n        <input name=\"serialNumber\" value={formData.serialNumber} onChange={handleChange} placeholder=\"Serial Number\" />\r\n        <input name=\"capacity\" type=\"number\" value={formData.capacity} onChange={handleChange} placeholder=\"Capacity\" />\r\n        <input name=\"installationDate\" type=\"date\" value={formData.installationDate} onChange={handleChange} />\r\n        <input name=\"location\" value={formData.location} onChange={handleChange} placeholder=\"Location\" />\r\n        <select name=\"status\" value={formData.status} onChange={handleChange}>\r\n          <option value=\"active\">Active</option>\r\n          <option value=\"out of service\">Out of Service</option>\r\n          <option value=\"under maintenance\">Under Maintenance</option>\r\n        </select>\r\n        <input type=\"file\" multiple onChange={handleFileChange} className=\"form-full-width\" />\r\n        <div className=\"form-buttons\">\r\n          <button type=\"button\" onClick={handleAssociateQrCode} className=\"btn-secondary\">Associate QR/NFC Tag</button>\r\n          <button type=\"submit\" className=\"btn-submit\">Add Equipment</button>\r\n        </div>\r\n        {formData.qrCodeData && (\r\n          <div className=\"qr-code-container\">\r\n            <img src={formData.qrCodeData} alt=\"QR Code\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddEquipmentForm;\r\n","import QRCode from 'qrcode';\r\n\r\nexport const generateQrCode = async (text) => {\r\n  try {\r\n    const qrCodeDataUrl = await QRCode.toDataURL(text, {\r\n      errorCorrectionLevel: 'H',\r\n      type: 'image/jpeg',\r\n      quality: 0.3,\r\n      margin: 1,\r\n      color: {\r\n        dark:\"#010599FF\",\r\n        light:\"#FFBF60FF\"\r\n      }\r\n    });\r\n    return qrCodeDataUrl;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return null;\r\n  }\r\n};"],"names":["retryDatabaseRead","dbOperation","async","fn","options","arguments","length","undefined","maxRetries","baseDelay","maxDelay","shouldRetry","error","_error$error","retryable","lastError","attempt","_window$api","_window$api2","result","window","api","isError","delay","Math","min","pow","console","log","Promise","resolve","setTimeout","retryWithBackoff","_window$api3","_result$error","_result$error2","errorCode","code","includes","makeIdempotent","checkFn","writeFn","_window$api4","checkResult","data","initialState","equipmentId","type","manufacturer","model","serialNumber","capacity","installationDate","location","status","files","qrCodeData","_ref","onEquipmentAdded","formData","setFormData","useState","showToast","useUIStore","state","handleChange","e","name","value","target","prev","_jsxs","onSubmit","preventDefault","operation","operationName","successMessage","onSuccess","onError","_window$api5","errorMessage","getErrorMessage","message","withErrorHandling","equipmentData","equipment","create","lastID","documentResults","file","checkExisting","documents","addDocument","fileName","filePath","path","hash","size","documentResult","push","success","documentsAdded","partialSuccess","className","children","_jsx","onChange","placeholder","required","multiple","onClick","alert","qrCode","QRCode","text","errorCorrectionLevel","quality","margin","color","dark","light","err","generateQrCode","src","alt"],"sourceRoot":""}