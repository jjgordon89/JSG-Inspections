{"version":3,"file":"static/js/82.2607574d.chunk.js","mappings":"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","sources":["components/LoadTests.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport './LoadTests.css';\r\n\r\nconst LoadTests = () => {\r\n  const { currentUser } = useUser();\r\n  const [loadTests, setLoadTests] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showCreateTest, setShowCreateTest] = useState(false);\r\n  const [showScheduleNext, setShowScheduleNext] = useState(false);\r\n  const [selectedEquipmentId, setSelectedEquipmentId] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all'); // all, due, overdue, current\r\n  const [selectedTest, setSelectedTest] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const [newTest, setNewTest] = useState({\r\n    equipmentId: '',\r\n    testDate: new Date().toISOString().split('T')[0],\r\n    testType: 'annual',\r\n    testLoadPercentage: 100,\r\n    ratedCapacity: '',\r\n    testLoad: '',\r\n    testDuration: '',\r\n    inspector: '',\r\n    testResults: 'pass',\r\n    deficienciesFound: '',\r\n    correctiveActions: '',\r\n    nextTestDue: '',\r\n    certificateNumber: '',\r\n    notes: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    checkUpcomingTests();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [equipmentData] = await Promise.all([\r\n        window.api.equipment.getAll()\r\n      ]);\r\n\r\n      setEquipment(equipmentData);\r\n\r\n      // Load load tests for all equipment\r\n      const loadTestsPromises = equipmentData.map(eq => \r\n        window.api.loadTests.getByEquipmentId(eq.id)\r\n      );\r\n      const loadTestsResults = await Promise.all(loadTestsPromises);\r\n      const allLoadTests = loadTestsResults.flat();\r\n      setLoadTests(allLoadTests);\r\n\r\n    } catch (err) {\r\n      console.error('Error loading load tests data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Load Test Scheduling and Tracking\r\n  const checkUpcomingTests = async () => {\r\n    try {\r\n      const today = new Date();\r\n      const thirtyDaysFromNow = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));\r\n      \r\n      const dueTests = await window.api.loadTests.getDue(thirtyDaysFromNow.toISOString().split('T')[0]);\r\n      const overdueTests = await window.api.loadTests.getOverdue();\r\n      \r\n      const newNotifications = [];\r\n      \r\n      // Add overdue notifications\r\n      overdueTests.forEach(test => {\r\n        newNotifications.push({\r\n          type: 'critical',\r\n          message: `Load test for ${test.equipment_identifier} is overdue (due: ${new Date(test.next_test_due).toLocaleDateString()})`,\r\n          equipmentId: test.equipment_id,\r\n          testId: test.id,\r\n          dueDate: test.next_test_due\r\n        });\r\n      });\r\n      \r\n      // Add upcoming notifications\r\n      dueTests.forEach(test => {\r\n        const dueDate = new Date(test.next_test_due);\r\n        const daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));\r\n        \r\n        if (daysUntilDue <= 30 && daysUntilDue >= 0) {\r\n          newNotifications.push({\r\n            type: daysUntilDue <= 7 ? 'warning' : 'info',\r\n            message: `Load test for ${test.equipment_identifier} due in ${daysUntilDue} days (${dueDate.toLocaleDateString()})`,\r\n            equipmentId: test.equipment_id,\r\n            testId: test.id,\r\n            dueDate: test.next_test_due\r\n          });\r\n        }\r\n      });\r\n      \r\n      setNotifications(newNotifications);\r\n    } catch (err) {\r\n      console.error('Error checking upcoming tests:', err);\r\n    }\r\n  };\r\n\r\n  const handleCreateTest = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      // Calculate test load if not provided\r\n      const calculatedTestLoad = newTest.testLoad || \r\n        (parseFloat(newTest.ratedCapacity) * (newTest.testLoadPercentage / 100));\r\n\r\n      // Calculate next test due date (typically 1 year for annual tests)\r\n      const testDate = new Date(newTest.testDate);\r\n      const nextDue = new Date(testDate);\r\n      if (newTest.testType === 'annual') {\r\n        nextDue.setFullYear(nextDue.getFullYear() + 1);\r\n      } else if (newTest.testType === 'periodic') {\r\n        nextDue.setMonth(nextDue.getMonth() + 6); // 6 months for periodic\r\n      } else {\r\n        nextDue.setFullYear(nextDue.getFullYear() + 1); // Default to 1 year\r\n      }\r\n\r\n      const testData = {\r\n        ...newTest,\r\n        equipmentId: parseInt(newTest.equipmentId),\r\n        testLoadPercentage: parseInt(newTest.testLoadPercentage),\r\n        ratedCapacity: parseFloat(newTest.ratedCapacity),\r\n        testLoad: calculatedTestLoad,\r\n        testDuration: newTest.testDuration ? parseInt(newTest.testDuration) : null,\r\n        nextTestDue: newTest.nextTestDue || nextDue.toISOString().split('T')[0]\r\n      };\r\n\r\n      const createResult = await window.api.loadTests.create(testData);\r\n      const createdLoadTestId = createResult?.lastID || createResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'load_test',\r\n        entityId: createdLoadTestId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(testData),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      // Generate certificate if test passed\r\n      if (newTest.testResults === 'pass') {\r\n        const equipmentItem = equipment.find(eq => eq.id === parseInt(newTest.equipmentId));\r\n        const certificateNumber = `LT-${equipmentItem?.equipment_id}-${new Date().getFullYear()}-${String(Date.now()).slice(-4)}`;\r\n        \r\n        await window.api.certificates.create({\r\n          certificateNumber,\r\n          certificateType: 'load_test',\r\n          equipmentId: parseInt(newTest.equipmentId),\r\n          entityId: createdLoadTestId,\r\n          issueDate: newTest.testDate,\r\n          expirationDate: nextDue.toISOString().split('T')[0],\r\n          issuedBy: newTest.inspector,\r\n          qrCodeData: `${window.location.origin}/verify/${certificateNumber}`,\r\n          certificateHash: null // Will be calculated when certificate is generated\r\n        });\r\n      }\r\n\r\n      setShowCreateTest(false);\r\n      resetNewTest();\r\n      await loadData();\r\n      await checkUpcomingTests(); // Refresh notifications\r\n    } catch (err) {\r\n      console.error('Error creating load test:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Schedule Next Load Test\r\n  const handleScheduleNext = async (test) => {\r\n    try {\r\n      const equipmentItem = equipment.find(eq => eq.id === test.equipment_id);\r\n      \r\n      // Calculate next test date based on test type\r\n      const lastTestDate = new Date(test.test_date);\r\n      const nextTestDate = new Date(lastTestDate);\r\n      \r\n      if (test.test_type === 'annual') {\r\n        nextTestDate.setFullYear(nextTestDate.getFullYear() + 1);\r\n      } else if (test.test_type === 'periodic') {\r\n        nextTestDate.setMonth(nextTestDate.getMonth() + 6);\r\n      } else {\r\n        nextTestDate.setFullYear(nextTestDate.getFullYear() + 1);\r\n      }\r\n\r\n      // Pre-populate form with previous test data\r\n      setNewTest({\r\n        equipmentId: test.equipment_id.toString(),\r\n        testDate: nextTestDate.toISOString().split('T')[0],\r\n        testType: test.test_type,\r\n        testLoadPercentage: test.test_load_percentage,\r\n        ratedCapacity: test.rated_capacity.toString(),\r\n        testLoad: '',\r\n        testDuration: test.test_duration?.toString() || '',\r\n        inspector: test.inspector,\r\n        testResults: 'pass',\r\n        deficienciesFound: '',\r\n        correctiveActions: '',\r\n        nextTestDue: '',\r\n        certificateNumber: '',\r\n        notes: `Scheduled follow-up to test #${test.id}`\r\n      });\r\n\r\n      setSelectedTest(test);\r\n      setShowScheduleNext(true);\r\n    } catch (err) {\r\n      console.error('Error scheduling next test:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const resetNewTest = () => {\r\n    setNewTest({\r\n      equipmentId: '',\r\n      testDate: new Date().toISOString().split('T')[0],\r\n      testType: 'annual',\r\n      testLoadPercentage: 100,\r\n      ratedCapacity: '',\r\n      testLoad: '',\r\n      testDuration: '',\r\n      inspector: '',\r\n      testResults: 'pass',\r\n      deficienciesFound: '',\r\n      correctiveActions: '',\r\n      nextTestDue: '',\r\n      certificateNumber: '',\r\n      notes: ''\r\n    });\r\n    setSelectedTest(null);\r\n  };\r\n\r\n  const getTestStatus = (test) => {\r\n    if (!test.next_test_due) return 'no-date';\r\n    \r\n    const today = new Date();\r\n    const dueDate = new Date(test.next_test_due);\r\n    const diffTime = dueDate - today;\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays < 0) return 'overdue';\r\n    if (diffDays <= 30) return 'due-soon';\r\n    if (diffDays <= 90) return 'upcoming';\r\n    return 'current';\r\n  };\r\n\r\n  const getStatusBadge = (test) => {\r\n    const status = getTestStatus(test);\r\n    const statusConfig = {\r\n      'overdue': { class: 'status-overdue', label: 'Overdue' },\r\n      'due-soon': { class: 'status-due-soon', label: 'Due Soon' },\r\n      'upcoming': { class: 'status-upcoming', label: 'Due in 90 Days' },\r\n      'current': { class: 'status-current', label: 'Current' },\r\n      'no-date': { class: 'status-no-date', label: 'No Due Date' }\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <span className={`status-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const getFilteredTests = () => {\r\n    let filtered = loadTests;\r\n\r\n    if (selectedEquipmentId) {\r\n      filtered = filtered.filter(test => test.equipment_id === parseInt(selectedEquipmentId));\r\n    }\r\n\r\n    if (filterStatus !== 'all') {\r\n      filtered = filtered.filter(test => getTestStatus(test) === filterStatus);\r\n    }\r\n\r\n    return filtered.sort((a, b) => new Date(b.test_date) - new Date(a.test_date));\r\n  };\r\n\r\n  const getCraneEquipment = () => {\r\n    return equipment.filter(eq => \r\n      eq.type && (\r\n        eq.type.toLowerCase().includes('crane') ||\r\n        eq.type.toLowerCase().includes('hoist') ||\r\n        eq.type.toLowerCase().includes('lift')\r\n      )\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"load-tests\">\r\n        <div className=\"load-tests-header\">\r\n          <h1>Load Tests</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading load tests data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"load-tests\">\r\n        <div className=\"load-tests-header\">\r\n          <h1>Load Tests</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading load tests: {error}</p>\r\n          <button onClick={loadData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const filteredTests = getFilteredTests();\r\n  const craneEquipment = getCraneEquipment();\r\n\r\n  return (\r\n    <div className=\"load-tests\">\r\n      <div className=\"load-tests-header\">\r\n        <h1>Load Tests</h1>\r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"create-button\"\r\n            onClick={() => setShowCreateTest(true)}\r\n          >\r\n            + Schedule Load Test\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase 6: Load Test Notifications */}\r\n      {notifications.length > 0 && (\r\n        <div className=\"load-test-notifications\">\r\n          <h3>🔔 Load Test Alerts</h3>\r\n          {notifications.map((notification, index) => (\r\n            <div key={index} className={`notification ${notification.type}`}>\r\n              <span className=\"notification-message\">{notification.message}</span>\r\n              <button \r\n                className=\"notification-action\"\r\n                onClick={() => handleScheduleNext({ \r\n                  equipment_id: notification.equipmentId, \r\n                  id: notification.testId,\r\n                  next_test_due: notification.dueDate \r\n                })}\r\n              >\r\n                Schedule Test\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"load-tests-summary\">\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value\">{loadTests.length}</span>\r\n          <span className=\"summary-label\">Total Tests</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-critical\">\r\n            {loadTests.filter(t => getTestStatus(t) === 'overdue').length}\r\n          </span>\r\n          <span className=\"summary-label\">Overdue</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-warning\">\r\n            {loadTests.filter(t => getTestStatus(t) === 'due-soon').length}\r\n          </span>\r\n          <span className=\"summary-label\">Due Soon</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-good\">\r\n            {loadTests.filter(t => t.test_results === 'pass').length}\r\n          </span>\r\n          <span className=\"summary-label\">Passed</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"load-tests-filters\">\r\n        <div className=\"filter-group\">\r\n          <label>Equipment:</label>\r\n          <select\r\n            value={selectedEquipmentId}\r\n            onChange={(e) => setSelectedEquipmentId(e.target.value)}\r\n          >\r\n            <option value=\"\">All Equipment</option>\r\n            {craneEquipment.map(eq => (\r\n              <option key={eq.id} value={eq.id}>\r\n                {eq.equipment_id} - {eq.type}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"filter-group\">\r\n          <label>Status:</label>\r\n          <select\r\n            value={filterStatus}\r\n            onChange={(e) => setFilterStatus(e.target.value)}\r\n          >\r\n            <option value=\"all\">All Status</option>\r\n            <option value=\"overdue\">Overdue</option>\r\n            <option value=\"due-soon\">Due Soon</option>\r\n            <option value=\"upcoming\">Upcoming</option>\r\n            <option value=\"current\">Current</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Load Tests List */}\r\n      <div className=\"load-tests-list\">\r\n        {filteredTests.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <p>No load tests found matching the current filters.</p>\r\n            <button \r\n              className=\"create-button\"\r\n              onClick={() => setShowCreateTest(true)}\r\n            >\r\n              Schedule First Load Test\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          filteredTests.map(test => {\r\n            const equipmentItem = equipment.find(eq => eq.id === test.equipment_id);\r\n            return (\r\n              <div key={test.id} className=\"load-test-card\">\r\n                <div className=\"test-header\">\r\n                  <div className=\"test-title\">\r\n                    <h3>{equipmentItem?.equipment_id} - {equipmentItem?.type}</h3>\r\n                    <span className=\"test-type\">{test.test_type} Load Test</span>\r\n                  </div>\r\n                  <div className=\"test-badges\">\r\n                    {getStatusBadge(test)}\r\n                    <span className={`result-badge ${test.test_results}`}>\r\n                      {test.test_results === 'pass' ? '✅ Passed' : '❌ Failed'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"test-details\">\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Test Date:</span>\r\n                    <span className=\"detail-value\">{new Date(test.test_date).toLocaleDateString()}</span>\r\n                  </div>\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Test Load:</span>\r\n                    <span className=\"detail-value\">\r\n                      {test.test_load} lbs ({test.test_load_percentage}% of {test.rated_capacity} lbs)\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Inspector:</span>\r\n                    <span className=\"detail-value\">{test.inspector}</span>\r\n                  </div>\r\n                  {test.next_test_due && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Next Test Due:</span>\r\n                      <span className=\"detail-value\">{new Date(test.next_test_due).toLocaleDateString()}</span>\r\n                    </div>\r\n                  )}\r\n                  {test.certificate_number && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Certificate:</span>\r\n                      <span className=\"detail-value\">{test.certificate_number}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {test.deficiencies_found && (\r\n                  <div className=\"test-deficiencies\">\r\n                    <h4>⚠️ Deficiencies Found:</h4>\r\n                    <p>{test.deficiencies_found}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {test.corrective_actions && (\r\n                  <div className=\"test-actions-taken\">\r\n                    <h4>🔧 Corrective Actions:</h4>\r\n                    <p>{test.corrective_actions}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {test.notes && (\r\n                  <div className=\"test-notes\">\r\n                    <h4>📝 Notes:</h4>\r\n                    <p>{test.notes}</p>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"test-actions\">\r\n                  <button className=\"action-button view-certificate\">\r\n                    View Certificate\r\n                  </button>\r\n                  <button \r\n                    className=\"action-button schedule-next\"\r\n                    onClick={() => handleScheduleNext(test)}\r\n                  >\r\n                    Schedule Next Test\r\n                  </button>\r\n                  <button className=\"action-button edit\">\r\n                    Edit Test\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      {/* Create/Schedule Load Test Modal */}\r\n      {(showCreateTest || showScheduleNext) && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content large\">\r\n            <div className=\"modal-header\">\r\n              <h2>{showScheduleNext ? 'Schedule Next Load Test' : 'Schedule Load Test'}</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => {\r\n                  setShowCreateTest(false);\r\n                  setShowScheduleNext(false);\r\n                  resetNewTest();\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCreateTest} className=\"create-form\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Equipment *</label>\r\n                  <select\r\n                    value={newTest.equipmentId}\r\n                    onChange={(e) => setNewTest({...newTest, equipmentId: e.target.value})}\r\n                    required\r\n                    disabled={showScheduleNext}\r\n                  >\r\n                    <option value=\"\">Select Equipment</option>\r\n                    {craneEquipment.map(eq => (\r\n                      <option key={eq.id} value={eq.id}>\r\n                        {eq.equipment_id} - {eq.type} ({eq.capacity} lbs)\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Test Date *</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newTest.testDate}\r\n                    onChange={(e) => setNewTest({...newTest, testDate: e.target.value})}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Test Type *</label>\r\n                  <select\r\n                    value={newTest.testType}\r\n                    onChange={(e) => setNewTest({...newTest, testType: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"annual\">Annual</option>\r\n                    <option value=\"periodic\">Periodic</option>\r\n                    <option value=\"initial\">Initial</option>\r\n                    <option value=\"after_repair\">After Repair</option>\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Test Load Percentage *</label>\r\n                  <select\r\n                    value={newTest.testLoadPercentage}\r\n                    onChange={(e) => setNewTest({...newTest, testLoadPercentage: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"100\">100% (Rated Load)</option>\r\n                    <option value=\"110\">110% (Proof Load)</option>\r\n                    <option value=\"125\">125% (Initial Test)</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Rated Capacity (lbs) *</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    step=\"0.01\"\r\n                    value={newTest.ratedCapacity}\r\n                    onChange={(e) => setNewTest({...newTest, ratedCapacity: e.target.value})}\r\n                    required\r\n                    placeholder=\"e.g., 5000\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Test Duration (minutes)</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    value={newTest.testDuration}\r\n                    onChange={(e) => setNewTest({...newTest, testDuration: e.target.value})}\r\n                    placeholder=\"e.g., 10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Inspector *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newTest.inspector}\r\n                    onChange={(e) => setNewTest({...newTest, inspector: e.target.value})}\r\n                    required\r\n                    placeholder=\"Inspector name\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Test Results *</label>\r\n                  <select\r\n                    value={newTest.testResults}\r\n                    onChange={(e) => setNewTest({...newTest, testResults: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"pass\">Pass</option>\r\n                    <option value=\"fail\">Fail</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              {newTest.testResults === 'fail' && (\r\n                <div className=\"form-group\">\r\n                  <label>Deficiencies Found *</label>\r\n                  <textarea\r\n                    value={newTest.deficienciesFound}\r\n                    onChange={(e) => setNewTest({...newTest, deficienciesFound: e.target.value})}\r\n                    rows=\"3\"\r\n                    required\r\n                    placeholder=\"Describe deficiencies found during the test\"\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"form-group\">\r\n                <label>Corrective Actions</label>\r\n                <textarea\r\n                  value={newTest.correctiveActions}\r\n                  onChange={(e) => setNewTest({...newTest, correctiveActions: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Describe any corrective actions taken\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Certificate Number</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newTest.certificateNumber}\r\n                    onChange={(e) => setNewTest({...newTest, certificateNumber: e.target.value})}\r\n                    placeholder=\"Will be auto-generated if blank\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Next Test Due</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newTest.nextTestDue}\r\n                    onChange={(e) => setNewTest({...newTest, nextTestDue: e.target.value})}\r\n                    placeholder=\"Will be auto-calculated if blank\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Notes</label>\r\n                <textarea\r\n                  value={newTest.notes}\r\n                  onChange={(e) => setNewTest({...newTest, notes: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Additional notes about the test\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={() => {\r\n                    setShowCreateTest(false);\r\n                    setShowScheduleNext(false);\r\n                    resetNewTest();\r\n                  }} \r\n                  className=\"cancel-button\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  {showScheduleNext ? 'Schedule Next Test' : 'Create Load Test'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadTests;\r\n"],"names":["LoadTests","currentUser","useUser","loadTests","setLoadTests","useState","equipment","setEquipment","loading","setLoading","error","setError","showCreateTest","setShowCreateTest","showScheduleNext","setShowScheduleNext","selectedEquipmentId","setSelectedEquipmentId","filterStatus","setFilterStatus","selectedTest","setSelectedTest","notifications","setNotifications","newTest","setNewTest","equipmentId","testDate","Date","toISOString","split","testType","testLoadPercentage","ratedCapacity","testLoad","testDuration","inspector","testResults","deficienciesFound","correctiveActions","nextTestDue","certificateNumber","notes","useEffect","loadData","checkUpcomingTests","async","equipmentData","Promise","all","window","api","getAll","loadTestsPromises","map","eq","getByEquipmentId","id","allLoadTests","flat","err","console","message","today","thirtyDaysFromNow","getTime","dueTests","getDue","overdueTests","getOverdue","newNotifications","forEach","test","push","type","equipment_identifier","next_test_due","toLocaleDateString","equipment_id","testId","dueDate","daysUntilDue","Math","ceil","handleScheduleNext","_test$test_duration","find","lastTestDate","test_date","nextTestDate","test_type","setFullYear","getFullYear","setMonth","getMonth","toString","test_load_percentage","rated_capacity","test_duration","resetNewTest","getTestStatus","diffTime","diffDays","getStatusBadge","config","class","label","_jsx","className","children","_jsxs","onClick","filteredTests","getFilteredTests","filtered","filter","parseInt","sort","a","b","craneEquipment","toLowerCase","includes","length","notification","index","t","test_results","value","onChange","e","target","equipmentItem","test_load","certificate_number","deficiencies_found","corrective_actions","onSubmit","preventDefault","calculatedTestLoad","parseFloat","nextDue","testData","createResult","create","createdLoadTestId","lastID","auditLog","userId","username","action","entityType","entityId","oldValues","newValues","JSON","stringify","ipAddress","userAgent","navigator","String","now","slice","certificates","certificateType","issueDate","expirationDate","issuedBy","qrCodeData","location","origin","certificateHash","required","disabled","capacity","min","step","placeholder","rows"],"sourceRoot":""}