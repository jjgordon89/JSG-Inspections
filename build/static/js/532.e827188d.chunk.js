"use strict";(self.webpackChunkjsg_inspections=self.webpackChunkjsg_inspections||[]).push([[532],{532:(e,a,i)=>{i.r(a),i.d(a,{default:()=>n});var t=i(5043),s=i(4107),l=i(579);const n=()=>{const{currentUser:e}=(0,s.J)(),[a,i]=(0,t.useState)([]),[n,r]=(0,t.useState)([]),[c,d]=(0,t.useState)(!0),[o,u]=(0,t.useState)(null),[m,h]=(0,t.useState)(!1),[b,p]=(0,t.useState)(!1),[x,j]=(0,t.useState)(""),[v,g]=(0,t.useState)("all"),[y,N]=(0,t.useState)(null),[f,w]=(0,t.useState)([]),[D,C]=(0,t.useState)({equipmentId:"",instrumentType:"",calibrationDate:(new Date).toISOString().split("T")[0],calibrationDueDate:"",calibratedBy:"",calibrationAgency:"",certificateNumber:"",calibrationResults:"pass",accuracyTolerance:"",actualAccuracy:"",adjustmentsMade:"",notes:""});(0,t.useEffect)(()=>{_(),S()},[]);const _=async()=>{try{d(!0),u(null);const[e]=await Promise.all([window.api.equipment.getAll()]);r(e);const a=e.map(e=>window.api.calibrations.getByEquipmentId(e.id)),t=(await Promise.all(a)).flat();i(t)}catch(e){console.error("Error loading calibrations data:",e),u(e.message)}finally{d(!1)}},S=async()=>{try{const e=new Date,a=new Date(e.getTime()+2592e6),i=await window.api.calibrations.getDue(a.toISOString().split("T")[0]),t=await window.api.calibrations.getOverdue(),s=[];t.forEach(e=>{s.push({type:"critical",message:`Calibration for ${e.equipment_identifier} is overdue (due: ${new Date(e.calibration_due_date).toLocaleDateString()})`,equipmentId:e.equipment_id,calibrationId:e.id,dueDate:e.calibration_due_date})}),i.forEach(a=>{const i=new Date(a.calibration_due_date),t=Math.ceil((i-e)/864e5);t<=30&&t>=0&&s.push({type:t<=7?"warning":"info",message:`Calibration for ${a.equipment_identifier} due in ${t} days (${i.toLocaleDateString()})`,equipmentId:a.equipment_id,calibrationId:a.id,dueDate:a.calibration_due_date})}),w(s)}catch(e){console.error("Error checking upcoming calibrations:",e)}},q=async e=>{try{n.find(a=>a.id===e.equipment_id);const a=new Date(e.calibration_date),i=new Date(a);i.setFullYear(i.getFullYear()+1),C({equipmentId:e.equipment_id.toString(),instrumentType:e.instrument_type,calibrationDate:i.toISOString().split("T")[0],calibrationDueDate:"",calibratedBy:e.calibrated_by,calibrationAgency:e.calibration_agency||"",certificateNumber:"",calibrationResults:"pass",accuracyTolerance:e.accuracy_tolerance||"",actualAccuracy:"",adjustmentsMade:"",notes:`Scheduled follow-up to calibration #${e.id}`}),N(e),p(!0)}catch(a){console.error("Error scheduling next calibration:",a),u(a.message)}},I=()=>{C({equipmentId:"",instrumentType:"",calibrationDate:(new Date).toISOString().split("T")[0],calibrationDueDate:"",calibratedBy:"",calibrationAgency:"",certificateNumber:"",calibrationResults:"pass",accuracyTolerance:"",actualAccuracy:"",adjustmentsMade:"",notes:""}),N(null)},A=e=>{if(!e.calibration_due_date)return"no-date";const a=new Date,i=new Date(e.calibration_due_date)-a,t=Math.ceil(i/864e5);return t<0?"overdue":t<=30?"due-soon":t<=90?"upcoming":"current"},T=e=>{const a={overdue:{class:"status-overdue",label:"Overdue"},"due-soon":{class:"status-due-soon",label:"Due Soon"},upcoming:{class:"status-upcoming",label:"Due in 90 Days"},current:{class:"status-current",label:"Current"},"no-date":{class:"status-no-date",label:"No Due Date"}}[A(e)];return(0,l.jsx)("span",{className:`status-badge ${a.class}`,children:a.label})};if(c)return(0,l.jsxs)("div",{className:"calibrations",children:[(0,l.jsx)("div",{className:"calibrations-header",children:(0,l.jsx)("h1",{children:"Calibrations"})}),(0,l.jsx)("div",{className:"loading-spinner",children:"Loading calibrations data..."})]});if(o)return(0,l.jsxs)("div",{className:"calibrations",children:[(0,l.jsx)("div",{className:"calibrations-header",children:(0,l.jsx)("h1",{children:"Calibrations"})}),(0,l.jsxs)("div",{className:"error-message",children:[(0,l.jsxs)("p",{children:["Error loading calibrations: ",o]}),(0,l.jsx)("button",{onClick:_,className:"retry-button",children:"Retry"})]})]});const L=(()=>{let e=a;return x&&(e=e.filter(e=>e.equipment_id===parseInt(x))),"all"!==v&&(e=e.filter(e=>A(e)===v)),e.sort((e,a)=>new Date(a.calibration_date)-new Date(e.calibration_date))})(),k=n.filter(e=>e.type&&(e.type.toLowerCase().includes("crane")||e.type.toLowerCase().includes("hoist")||e.type.toLowerCase().includes("scale")||e.type.toLowerCase().includes("gauge")||e.type.toLowerCase().includes("meter")||e.type.toLowerCase().includes("load")||e.type.toLowerCase().includes("test")));return(0,l.jsxs)("div",{className:"calibrations",children:[(0,l.jsxs)("div",{className:"calibrations-header",children:[(0,l.jsx)("h1",{children:"Calibrations"}),(0,l.jsx)("div",{className:"header-actions",children:(0,l.jsx)("button",{className:"create-button",onClick:()=>h(!0),children:"+ Record Calibration"})})]}),f.length>0&&(0,l.jsxs)("div",{className:"calibration-notifications",children:[(0,l.jsx)("h3",{children:"\ud83d\udd14 Calibration Alerts"}),f.map((e,a)=>(0,l.jsxs)("div",{className:`notification ${e.type}`,children:[(0,l.jsx)("span",{className:"notification-message",children:e.message}),(0,l.jsx)("button",{className:"notification-action",onClick:()=>q({equipment_id:e.equipmentId,id:e.calibrationId,calibration_due_date:e.dueDate}),children:"Schedule Calibration"})]},a))]}),(0,l.jsxs)("div",{className:"calibrations-summary",children:[(0,l.jsxs)("div",{className:"summary-card",children:[(0,l.jsx)("span",{className:"summary-value",children:a.length}),(0,l.jsx)("span",{className:"summary-label",children:"Total Calibrations"})]}),(0,l.jsxs)("div",{className:"summary-card",children:[(0,l.jsx)("span",{className:"summary-value status-critical",children:a.filter(e=>"overdue"===A(e)).length}),(0,l.jsx)("span",{className:"summary-label",children:"Overdue"})]}),(0,l.jsxs)("div",{className:"summary-card",children:[(0,l.jsx)("span",{className:"summary-value status-warning",children:a.filter(e=>"due-soon"===A(e)).length}),(0,l.jsx)("span",{className:"summary-label",children:"Due Soon"})]}),(0,l.jsxs)("div",{className:"summary-card",children:[(0,l.jsx)("span",{className:"summary-value status-good",children:a.filter(e=>"pass"===e.calibration_results).length}),(0,l.jsx)("span",{className:"summary-label",children:"Passed"})]})]}),(0,l.jsxs)("div",{className:"calibrations-filters",children:[(0,l.jsxs)("div",{className:"filter-group",children:[(0,l.jsx)("label",{children:"Equipment:"}),(0,l.jsxs)("select",{value:x,onChange:e=>j(e.target.value),children:[(0,l.jsx)("option",{value:"",children:"All Equipment"}),k.map(e=>(0,l.jsxs)("option",{value:e.id,children:[e.equipment_id," - ",e.type]},e.id))]})]}),(0,l.jsxs)("div",{className:"filter-group",children:[(0,l.jsx)("label",{children:"Status:"}),(0,l.jsxs)("select",{value:v,onChange:e=>g(e.target.value),children:[(0,l.jsx)("option",{value:"all",children:"All Status"}),(0,l.jsx)("option",{value:"overdue",children:"Overdue"}),(0,l.jsx)("option",{value:"due-soon",children:"Due Soon"}),(0,l.jsx)("option",{value:"upcoming",children:"Upcoming"}),(0,l.jsx)("option",{value:"current",children:"Current"})]})]})]}),(0,l.jsx)("div",{className:"calibrations-list",children:0===L.length?(0,l.jsxs)("div",{className:"empty-state",children:[(0,l.jsx)("p",{children:"No calibrations found matching the current filters."}),(0,l.jsx)("button",{className:"create-button",onClick:()=>h(!0),children:"Record First Calibration"})]}):L.map(e=>{const a=n.find(a=>a.id===e.equipment_id);return(0,l.jsxs)("div",{className:"calibration-card",children:[(0,l.jsxs)("div",{className:"calibration-header",children:[(0,l.jsxs)("div",{className:"calibration-title",children:[(0,l.jsxs)("h3",{children:[null===a||void 0===a?void 0:a.equipment_id," - ",e.instrument_type]}),(0,l.jsx)("span",{className:"equipment-type",children:null===a||void 0===a?void 0:a.type})]}),(0,l.jsxs)("div",{className:"calibration-badges",children:[T(e),(0,l.jsx)("span",{className:`result-badge ${e.calibration_results}`,children:"pass"===e.calibration_results?"\u2705 Passed":"fail"===e.calibration_results?"\u274c Failed":"\u26a0\ufe0f Limited"})]})]}),(0,l.jsxs)("div",{className:"calibration-details",children:[(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Calibration Date:"}),(0,l.jsx)("span",{className:"detail-value",children:new Date(e.calibration_date).toLocaleDateString()})]}),(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Due Date:"}),(0,l.jsx)("span",{className:"detail-value",children:new Date(e.calibration_due_date).toLocaleDateString()})]}),(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Calibrated By:"}),(0,l.jsx)("span",{className:"detail-value",children:e.calibrated_by})]}),e.calibration_agency&&(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Agency:"}),(0,l.jsx)("span",{className:"detail-value",children:e.calibration_agency})]}),e.certificate_number&&(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Certificate:"}),(0,l.jsx)("span",{className:"detail-value",children:e.certificate_number})]}),e.accuracy_tolerance&&(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Tolerance:"}),(0,l.jsx)("span",{className:"detail-value",children:e.accuracy_tolerance})]}),e.actual_accuracy&&(0,l.jsxs)("div",{className:"detail-row",children:[(0,l.jsx)("span",{className:"detail-label",children:"Actual Accuracy:"}),(0,l.jsx)("span",{className:"detail-value",children:e.actual_accuracy})]})]}),e.adjustments_made&&(0,l.jsxs)("div",{className:"calibration-adjustments",children:[(0,l.jsx)("h4",{children:"\ud83d\udd27 Adjustments Made:"}),(0,l.jsx)("p",{children:e.adjustments_made})]}),e.notes&&(0,l.jsxs)("div",{className:"calibration-notes",children:[(0,l.jsx)("h4",{children:"\ud83d\udcdd Notes:"}),(0,l.jsx)("p",{children:e.notes})]}),(0,l.jsxs)("div",{className:"calibration-actions",children:[(0,l.jsx)("button",{className:"action-button view-certificate",children:"View Certificate"}),(0,l.jsx)("button",{className:"action-button schedule-next",onClick:()=>q(e),children:"Schedule Next Calibration"}),(0,l.jsx)("button",{className:"action-button edit",children:"Edit Calibration"})]})]},e.id)})}),(m||b)&&(0,l.jsx)("div",{className:"modal-overlay",children:(0,l.jsxs)("div",{className:"modal-content large",children:[(0,l.jsxs)("div",{className:"modal-header",children:[(0,l.jsx)("h2",{children:b?"Schedule Next Calibration":"Record Calibration"}),(0,l.jsx)("button",{className:"close-button",onClick:()=>{h(!1),p(!1),I()},children:"\xd7"})]}),(0,l.jsxs)("form",{onSubmit:async a=>{a.preventDefault();try{let a=D.calibrationDueDate;if(!a){const e=new Date(D.calibrationDate),i=new Date(e);i.setFullYear(i.getFullYear()+1),a=i.toISOString().split("T")[0]}const i={...D,equipmentId:parseInt(D.equipmentId),calibrationDueDate:a},t=await window.api.calibrations.create(i),s=(null===t||void 0===t?void 0:t.lastID)||(null===t||void 0===t?void 0:t.id)||0;if(await window.api.auditLog.create({userId:(null===e||void 0===e?void 0:e.id)||null,username:(null===e||void 0===e?void 0:e.username)||"Unknown User",action:"create",entityType:"calibration",entityId:s,oldValues:null,newValues:JSON.stringify(i),ipAddress:null,userAgent:navigator.userAgent}),"pass"===D.calibrationResults){const e=n.find(e=>e.id===parseInt(D.equipmentId)),i=`CAL-${null===e||void 0===e?void 0:e.equipment_id}-${(new Date).getFullYear()}-${String(Date.now()).slice(-4)}`;await window.api.certificates.create({certificateNumber:i,certificateType:"calibration",equipmentId:parseInt(D.equipmentId),entityId:s,issueDate:D.calibrationDate,expirationDate:a,issuedBy:D.calibratedBy,qrCodeData:`${window.location.origin}/verify/${i}`,certificateHash:null})}h(!1),p(!1),I(),await _(),await S()}catch(i){console.error("Error creating calibration:",i),u(i.message)}},className:"create-form",children:[(0,l.jsxs)("div",{className:"form-row",children:[(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Equipment *"}),(0,l.jsxs)("select",{value:D.equipmentId,onChange:e=>C({...D,equipmentId:e.target.value}),required:!0,disabled:b,children:[(0,l.jsx)("option",{value:"",children:"Select Equipment"}),k.map(e=>(0,l.jsxs)("option",{value:e.id,children:[e.equipment_id," - ",e.type]},e.id))]})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Instrument Type *"}),(0,l.jsxs)("select",{value:D.instrumentType,onChange:e=>C({...D,instrumentType:e.target.value}),required:!0,children:[(0,l.jsx)("option",{value:"",children:"Select Instrument Type"}),["Load Block","Load Cell","Pressure Gauge","Torque Wrench","Dynamometer","Scale","Test Weight","Multimeter","Oscilloscope","Calibrator","Other"].map(e=>(0,l.jsx)("option",{value:e,children:e},e))]})]})]}),(0,l.jsxs)("div",{className:"form-row",children:[(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Calibration Date *"}),(0,l.jsx)("input",{type:"date",value:D.calibrationDate,onChange:e=>C({...D,calibrationDate:e.target.value}),required:!0})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Due Date"}),(0,l.jsx)("input",{type:"date",value:D.calibrationDueDate,onChange:e=>C({...D,calibrationDueDate:e.target.value}),placeholder:"Will be auto-calculated if blank"})]})]}),(0,l.jsxs)("div",{className:"form-row",children:[(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Calibrated By *"}),(0,l.jsx)("input",{type:"text",value:D.calibratedBy,onChange:e=>C({...D,calibratedBy:e.target.value}),required:!0,placeholder:"Technician name"})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Calibration Agency"}),(0,l.jsx)("input",{type:"text",value:D.calibrationAgency,onChange:e=>C({...D,calibrationAgency:e.target.value}),placeholder:"External calibration service"})]})]}),(0,l.jsxs)("div",{className:"form-row",children:[(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Certificate Number"}),(0,l.jsx)("input",{type:"text",value:D.certificateNumber,onChange:e=>C({...D,certificateNumber:e.target.value}),placeholder:"Calibration certificate number"})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Calibration Results *"}),(0,l.jsxs)("select",{value:D.calibrationResults,onChange:e=>C({...D,calibrationResults:e.target.value}),required:!0,children:[(0,l.jsx)("option",{value:"pass",children:"Pass"}),(0,l.jsx)("option",{value:"fail",children:"Fail"}),(0,l.jsx)("option",{value:"limited",children:"Limited"})]})]})]}),(0,l.jsxs)("div",{className:"form-row",children:[(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Accuracy Tolerance"}),(0,l.jsx)("input",{type:"text",value:D.accuracyTolerance,onChange:e=>C({...D,accuracyTolerance:e.target.value}),placeholder:"e.g., \xb10.1% or \xb11 lb"})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Actual Accuracy"}),(0,l.jsx)("input",{type:"text",value:D.actualAccuracy,onChange:e=>C({...D,actualAccuracy:e.target.value}),placeholder:"e.g., \xb10.05% or \xb10.5 lb"})]})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Adjustments Made"}),(0,l.jsx)("textarea",{value:D.adjustmentsMade,onChange:e=>C({...D,adjustmentsMade:e.target.value}),rows:"3",placeholder:"Describe any adjustments or repairs made during calibration"})]}),(0,l.jsxs)("div",{className:"form-group",children:[(0,l.jsx)("label",{children:"Notes"}),(0,l.jsx)("textarea",{value:D.notes,onChange:e=>C({...D,notes:e.target.value}),rows:"3",placeholder:"Additional notes about the calibration"})]}),(0,l.jsxs)("div",{className:"form-actions",children:[(0,l.jsx)("button",{type:"button",onClick:()=>{h(!1),p(!1),I()},className:"cancel-button",children:"Cancel"}),(0,l.jsx)("button",{type:"submit",className:"submit-button",children:b?"Schedule Next Calibration":"Record Calibration"})]})]})]})})]})}}}]);
//# sourceMappingURL=532.e827188d.chunk.js.map