{"version":3,"file":"static/js/460.38fd56db.chunk.js","mappings":"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","sources":["components/Credentials.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport './Credentials.css';\r\n\r\nconst Credentials = () => {\r\n  const { currentUser } = useUser();\r\n  const [credentials, setCredentials] = useState([]);\r\n  const [workOrders, setWorkOrders] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showCreateCredential, setShowCreateCredential] = useState(false);\r\n  const [showRenewCredential, setShowRenewCredential] = useState(false);\r\n  const [showCredentialCheck, setShowCredentialCheck] = useState(false);\r\n  const [filterPerson, setFilterPerson] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all'); // all, active, expiring, expired\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [selectedCredential, setSelectedCredential] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [credentialCheckResults, setCredentialCheckResults] = useState([]);\r\n\r\n  const [newCredential, setNewCredential] = useState({\r\n    personName: '',\r\n    credentialType: '',\r\n    equipmentTypes: '',\r\n    certificationBody: '',\r\n    certificateNumber: '',\r\n    issueDate: '',\r\n    expirationDate: '',\r\n    renewalRequired: true,\r\n    notes: ''\r\n  });\r\n\r\n  const [credentialCheck, setCredentialCheck] = useState({\r\n    personName: '',\r\n    workOrderId: '',\r\n    equipmentType: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    checkExpiringCredentials();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [credentialsData, workOrdersData] = await Promise.all([\r\n        window.api.credentials.getAll(),\r\n        window.api.workOrders.getAll()\r\n      ]);\r\n\r\n      setCredentials(credentialsData);\r\n      setWorkOrders(workOrdersData);\r\n\r\n    } catch (err) {\r\n      console.error('Error loading credentials data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Credential Expiration Notifications\r\n  const checkExpiringCredentials = async () => {\r\n    try {\r\n      const today = new Date();\r\n      const thirtyDaysFromNow = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));\r\n      \r\n      const expiringCredentials = await window.api.credentials.getExpiring(thirtyDaysFromNow.toISOString().split('T')[0]);\r\n      \r\n      const newNotifications = [];\r\n      \r\n      expiringCredentials.forEach(credential => {\r\n        const expirationDate = new Date(credential.expiration_date);\r\n        const daysUntilExpiry = Math.ceil((expirationDate - today) / (1000 * 60 * 60 * 24));\r\n        \r\n        if (daysUntilExpiry < 0) {\r\n          newNotifications.push({\r\n            type: 'critical',\r\n            message: `${credential.person_name}'s ${credential.credential_type} credential expired ${Math.abs(daysUntilExpiry)} days ago`,\r\n            credentialId: credential.id,\r\n            personName: credential.person_name,\r\n            credentialType: credential.credential_type,\r\n            expirationDate: credential.expiration_date\r\n          });\r\n        } else if (daysUntilExpiry <= 7) {\r\n          newNotifications.push({\r\n            type: 'warning',\r\n            message: `${credential.person_name}'s ${credential.credential_type} credential expires in ${daysUntilExpiry} days`,\r\n            credentialId: credential.id,\r\n            personName: credential.person_name,\r\n            credentialType: credential.credential_type,\r\n            expirationDate: credential.expiration_date\r\n          });\r\n        } else if (daysUntilExpiry <= 30) {\r\n          newNotifications.push({\r\n            type: 'info',\r\n            message: `${credential.person_name}'s ${credential.credential_type} credential expires in ${daysUntilExpiry} days`,\r\n            credentialId: credential.id,\r\n            personName: credential.person_name,\r\n            credentialType: credential.credential_type,\r\n            expirationDate: credential.expiration_date\r\n          });\r\n        }\r\n      });\r\n      \r\n      setNotifications(newNotifications);\r\n    } catch (err) {\r\n      console.error('Error checking expiring credentials:', err);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Link Credentials to Work Assignments\r\n  const handleCredentialCheck = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const personCredentials = await window.api.credentials.getByPerson(credentialCheck.personName);\r\n      const workOrder = workOrders.find(wo => wo.id === parseInt(credentialCheck.workOrderId));\r\n      \r\n      const results = [];\r\n      \r\n      // Check if person has required credentials for the work type and equipment\r\n      const requiredCredentials = getRequiredCredentials(workOrder, credentialCheck.equipmentType);\r\n      \r\n      requiredCredentials.forEach(required => {\r\n        const matchingCredential = personCredentials.find(cred => \r\n          cred.credential_type === required.type &&\r\n          (cred.equipment_types ? JSON.parse(cred.equipment_types).includes(credentialCheck.equipmentType) : true)\r\n        );\r\n        \r\n        if (matchingCredential) {\r\n          const status = getCredentialStatus(matchingCredential);\r\n          results.push({\r\n            required: required.type,\r\n            status: status === 'current' ? 'valid' : status,\r\n            credential: matchingCredential,\r\n            message: status === 'current' ? \r\n              `✅ Valid ${required.type} credential` : \r\n              `❌ ${required.type} credential is ${status}`\r\n          });\r\n        } else {\r\n          results.push({\r\n            required: required.type,\r\n            status: 'missing',\r\n            credential: null,\r\n            message: `❌ Missing required ${required.type} credential`\r\n          });\r\n        }\r\n      });\r\n      \r\n      setCredentialCheckResults(results);\r\n      \r\n      // Log audit entry for credential check\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'credential_check',\r\n        entityType: 'work_order',\r\n        entityId: parseInt(credentialCheck.workOrderId),\r\n        oldValues: null,\r\n        newValues: JSON.stringify({\r\n          personName: credentialCheck.personName,\r\n          equipmentType: credentialCheck.equipmentType,\r\n          results: results\r\n        }),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n      \r\n    } catch (err) {\r\n      console.error('Error checking credentials:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Get Required Credentials for Work Type and Equipment\r\n  const getRequiredCredentials = (workOrder, equipmentType) => {\r\n    const required = [];\r\n    \r\n    // Base requirements by equipment type\r\n    if (equipmentType.toLowerCase().includes('crane')) {\r\n      required.push({ type: 'Crane Operator' });\r\n      required.push({ type: 'Rigger' });\r\n      required.push({ type: 'Signal Person' });\r\n    }\r\n    \r\n    if (equipmentType.toLowerCase().includes('hoist')) {\r\n      required.push({ type: 'Crane Operator' });\r\n    }\r\n    \r\n    // Additional requirements by work type\r\n    if (workOrder?.work_type === 'corrective' || workOrder?.work_type === 'emergency') {\r\n      required.push({ type: 'Maintenance Technician' });\r\n    }\r\n    \r\n    if (workOrder?.priority === 'critical') {\r\n      required.push({ type: 'Supervisor' });\r\n    }\r\n    \r\n    // Always require inspector for inspection-related work\r\n    if (workOrder?.title?.toLowerCase().includes('inspect') || \r\n        workOrder?.description?.toLowerCase().includes('inspect')) {\r\n      required.push({ type: 'Inspector' });\r\n    }\r\n    \r\n    return required;\r\n  };\r\n\r\n  const handleCreateCredential = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      const credentialData = {\r\n        ...newCredential,\r\n        equipmentTypes: newCredential.equipmentTypes ? \r\n          JSON.stringify(newCredential.equipmentTypes.split(',').map(s => s.trim())) : \r\n          null,\r\n        renewalRequired: newCredential.renewalRequired ? 1 : 0\r\n      };\r\n\r\n      const createResult = await window.api.credentials.create(credentialData);\r\n      const createdCredentialId = createResult?.lastID || createResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'credential',\r\n        entityId: createdCredentialId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(credentialData),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      setShowCreateCredential(false);\r\n      setShowRenewCredential(false);\r\n      resetNewCredential();\r\n      await loadData();\r\n      await checkExpiringCredentials(); // Refresh notifications\r\n    } catch (err) {\r\n      console.error('Error creating credential:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Renew Credential\r\n  const handleRenewCredential = async (credential) => {\r\n    try {\r\n      // Calculate new expiration date (typically 1-3 years depending on credential type)\r\n      const issueDate = new Date();\r\n      const expirationDate = new Date(issueDate);\r\n      \r\n      // Set renewal period based on credential type\r\n      if (credential.credential_type === 'Crane Operator' || credential.credential_type === 'Rigger') {\r\n        expirationDate.setFullYear(expirationDate.getFullYear() + 3); // 3 years for NCCCO\r\n      } else if (credential.credential_type === 'Inspector') {\r\n        expirationDate.setFullYear(expirationDate.getFullYear() + 2); // 2 years for inspectors\r\n      } else {\r\n        expirationDate.setFullYear(expirationDate.getFullYear() + 1); // 1 year default\r\n      }\r\n\r\n      // Pre-populate form with renewal data\r\n      setNewCredential({\r\n        personName: credential.person_name,\r\n        credentialType: credential.credential_type,\r\n        equipmentTypes: credential.equipment_types ? \r\n          JSON.parse(credential.equipment_types).join(', ') : '',\r\n        certificationBody: credential.certification_body,\r\n        certificateNumber: '', // New certificate number\r\n        issueDate: issueDate.toISOString().split('T')[0],\r\n        expirationDate: expirationDate.toISOString().split('T')[0],\r\n        renewalRequired: credential.renewal_required,\r\n        notes: `Renewal of credential #${credential.id}`\r\n      });\r\n\r\n      setSelectedCredential(credential);\r\n      setShowRenewCredential(true);\r\n    } catch (err) {\r\n      console.error('Error renewing credential:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const resetNewCredential = () => {\r\n    setNewCredential({\r\n      personName: '',\r\n      credentialType: '',\r\n      equipmentTypes: '',\r\n      certificationBody: '',\r\n      certificateNumber: '',\r\n      issueDate: '',\r\n      expirationDate: '',\r\n      renewalRequired: true,\r\n      notes: ''\r\n    });\r\n    setSelectedCredential(null);\r\n  };\r\n\r\n  const resetCredentialCheck = () => {\r\n    setCredentialCheck({\r\n      personName: '',\r\n      workOrderId: '',\r\n      equipmentType: ''\r\n    });\r\n    setCredentialCheckResults([]);\r\n  };\r\n\r\n  const getCredentialStatus = (credential) => {\r\n    if (credential.status !== 'active') return credential.status;\r\n    \r\n    if (!credential.expiration_date) return 'no-expiry';\r\n    \r\n    const today = new Date();\r\n    const expiryDate = new Date(credential.expiration_date);\r\n    const diffTime = expiryDate - today;\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays < 0) return 'expired';\r\n    if (diffDays <= 30) return 'expiring-soon';\r\n    if (diffDays <= 90) return 'expiring-later';\r\n    return 'current';\r\n  };\r\n\r\n  const getStatusBadge = (credential) => {\r\n    const status = getCredentialStatus(credential);\r\n    const statusConfig = {\r\n      'expired': { class: 'status-expired', label: 'Expired' },\r\n      'expiring-soon': { class: 'status-expiring-soon', label: 'Expires Soon' },\r\n      'expiring-later': { class: 'status-expiring-later', label: 'Expires in 90 Days' },\r\n      'current': { class: 'status-current', label: 'Current' },\r\n      'suspended': { class: 'status-suspended', label: 'Suspended' },\r\n      'revoked': { class: 'status-revoked', label: 'Revoked' },\r\n      'no-expiry': { class: 'status-no-expiry', label: 'No Expiry' }\r\n    };\r\n\r\n    const config = statusConfig[status] || { class: 'status-unknown', label: status };\r\n    return <span className={`status-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const getFilteredCredentials = () => {\r\n    let filtered = credentials;\r\n\r\n    if (filterPerson) {\r\n      filtered = filtered.filter(cred => \r\n        cred.person_name.toLowerCase().includes(filterPerson.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (filterType !== 'all') {\r\n      filtered = filtered.filter(cred => cred.credential_type === filterType);\r\n    }\r\n\r\n    if (filterStatus !== 'all') {\r\n      if (filterStatus === 'expiring') {\r\n        filtered = filtered.filter(cred => {\r\n          const status = getCredentialStatus(cred);\r\n          return status === 'expiring-soon' || status === 'expiring-later';\r\n        });\r\n      } else {\r\n        filtered = filtered.filter(cred => getCredentialStatus(cred) === filterStatus);\r\n      }\r\n    }\r\n\r\n    return filtered.sort((a, b) => {\r\n      // Sort by person name, then by expiration date\r\n      if (a.person_name !== b.person_name) {\r\n        return a.person_name.localeCompare(b.person_name);\r\n      }\r\n      return new Date(a.expiration_date || '9999-12-31') - new Date(b.expiration_date || '9999-12-31');\r\n    });\r\n  };\r\n\r\n  const getUniquePersons = () => {\r\n    return [...new Set(credentials.map(cred => cred.person_name))].sort();\r\n  };\r\n\r\n  const getUniqueCredentialTypes = () => {\r\n    return [...new Set(credentials.map(cred => cred.credential_type))].sort();\r\n  };\r\n\r\n  const credentialTypes = [\r\n    'Crane Operator',\r\n    'Rigger',\r\n    'Signal Person',\r\n    'Inspector',\r\n    'Maintenance Technician',\r\n    'Safety Officer',\r\n    'Supervisor',\r\n    'Other'\r\n  ];\r\n\r\n  const certificationBodies = [\r\n    'NCCCO (National Commission for the Certification of Crane Operators)',\r\n    'OSHA (Occupational Safety and Health Administration)',\r\n    'ASME (American Society of Mechanical Engineers)',\r\n    'AWS (American Welding Society)',\r\n    'Company Internal',\r\n    'Other'\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"credentials\">\r\n        <div className=\"credentials-header\">\r\n          <h1>Credentials</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading credentials data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"credentials\">\r\n        <div className=\"credentials-header\">\r\n          <h1>Credentials</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading credentials: {error}</p>\r\n          <button onClick={loadData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const filteredCredentials = getFilteredCredentials();\r\n  const uniquePersons = getUniquePersons();\r\n  const uniqueTypes = getUniqueCredentialTypes();\r\n\r\n  return (\r\n    <div className=\"credentials\">\r\n      <div className=\"credentials-header\">\r\n        <h1>Credentials</h1>\r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"create-button secondary\"\r\n            onClick={() => setShowCredentialCheck(true)}\r\n          >\r\n            🔍 Check Credentials\r\n          </button>\r\n          <button \r\n            className=\"create-button\"\r\n            onClick={() => setShowCreateCredential(true)}\r\n          >\r\n            + Add Credential\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase 6: Credential Expiration Notifications */}\r\n      {notifications.length > 0 && (\r\n        <div className=\"credential-notifications\">\r\n          <h3>🔔 Credential Expiration Alerts</h3>\r\n          {notifications.map((notification, index) => (\r\n            <div key={index} className={`notification ${notification.type}`}>\r\n              <span className=\"notification-message\">{notification.message}</span>\r\n              <button \r\n                className=\"notification-action\"\r\n                onClick={() => handleRenewCredential({ \r\n                  id: notification.credentialId,\r\n                  person_name: notification.personName,\r\n                  credential_type: notification.credentialType,\r\n                  expiration_date: notification.expirationDate\r\n                })}\r\n              >\r\n                Renew Credential\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"credentials-summary\">\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value\">{credentials.length}</span>\r\n          <span className=\"summary-label\">Total Credentials</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-good\">\r\n            {credentials.filter(c => getCredentialStatus(c) === 'current').length}\r\n          </span>\r\n          <span className=\"summary-label\">Current</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-warning\">\r\n            {credentials.filter(c => {\r\n              const status = getCredentialStatus(c);\r\n              return status === 'expiring-soon' || status === 'expiring-later';\r\n            }).length}\r\n          </span>\r\n          <span className=\"summary-label\">Expiring</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-critical\">\r\n            {credentials.filter(c => getCredentialStatus(c) === 'expired').length}\r\n          </span>\r\n          <span className=\"summary-label\">Expired</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"credentials-filters\">\r\n        <div className=\"filter-group\">\r\n          <label>Person:</label>\r\n          <select\r\n            value={filterPerson}\r\n            onChange={(e) => setFilterPerson(e.target.value)}\r\n          >\r\n            <option value=\"\">All Persons</option>\r\n            {uniquePersons.map(person => (\r\n              <option key={person} value={person}>{person}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"filter-group\">\r\n          <label>Credential Type:</label>\r\n          <select\r\n            value={filterType}\r\n            onChange={(e) => setFilterType(e.target.value)}\r\n          >\r\n            <option value=\"all\">All Types</option>\r\n            {uniqueTypes.map(type => (\r\n              <option key={type} value={type}>{type}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"filter-group\">\r\n          <label>Status:</label>\r\n          <select\r\n            value={filterStatus}\r\n            onChange={(e) => setFilterStatus(e.target.value)}\r\n          >\r\n            <option value=\"all\">All Status</option>\r\n            <option value=\"current\">Current</option>\r\n            <option value=\"expiring\">Expiring</option>\r\n            <option value=\"expired\">Expired</option>\r\n            <option value=\"suspended\">Suspended</option>\r\n            <option value=\"revoked\">Revoked</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Credentials List */}\r\n      <div className=\"credentials-list\">\r\n        {filteredCredentials.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <p>No credentials found matching the current filters.</p>\r\n            <button \r\n              className=\"create-button\"\r\n              onClick={() => setShowCreateCredential(true)}\r\n            >\r\n              Add First Credential\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          filteredCredentials.map(credential => (\r\n            <div key={credential.id} className=\"credential-card\">\r\n              <div className=\"credential-header\">\r\n                <div className=\"credential-title\">\r\n                  <h3>{credential.person_name}</h3>\r\n                  <span className=\"credential-type\">{credential.credential_type}</span>\r\n                </div>\r\n                <div className=\"credential-badges\">\r\n                  {getStatusBadge(credential)}\r\n                  {credential.renewal_required && (\r\n                    <span className=\"renewal-badge\">Renewal Required</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"credential-details\">\r\n                <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">Issue Date:</span>\r\n                  <span className=\"detail-value\">{new Date(credential.issue_date).toLocaleDateString()}</span>\r\n                </div>\r\n                <div className=\"detail-row\">\r\n                  <span className=\"detail-label\">Expiration Date:</span>\r\n                  <span className=\"detail-value\">{new Date(credential.expiration_date).toLocaleDateString()}</span>\r\n                </div>\r\n                {credential.certification_body && (\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Certification Body:</span>\r\n                    <span className=\"detail-value\">{credential.certification_body}</span>\r\n                  </div>\r\n                )}\r\n                {credential.certificate_number && (\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Certificate Number:</span>\r\n                    <span className=\"detail-value\">{credential.certificate_number}</span>\r\n                  </div>\r\n                )}\r\n                {credential.equipment_types && (\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Equipment Types:</span>\r\n                    <span className=\"detail-value\">\r\n                      {JSON.parse(credential.equipment_types).join(', ')}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {credential.notes && (\r\n                <div className=\"credential-notes\">\r\n                  <h4>📝 Notes:</h4>\r\n                  <p>{credential.notes}</p>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"credential-actions\">\r\n                <button className=\"action-button view-certificate\">\r\n                  View Certificate\r\n                </button>\r\n                <button \r\n                  className=\"action-button renew\"\r\n                  onClick={() => handleRenewCredential(credential)}\r\n                >\r\n                  Renew Credential\r\n                </button>\r\n                <button className=\"action-button edit\">\r\n                  Edit\r\n                </button>\r\n                {credential.status === 'active' && (\r\n                  <button className=\"action-button suspend\">\r\n                    Suspend\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* Phase 6: Credential Check Modal */}\r\n      {showCredentialCheck && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h2>Check Work Assignment Credentials</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => {\r\n                  setShowCredentialCheck(false);\r\n                  resetCredentialCheck();\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCredentialCheck} className=\"create-form\">\r\n              <div className=\"form-group\">\r\n                <label>Person Name *</label>\r\n                <select\r\n                  value={credentialCheck.personName}\r\n                  onChange={(e) => setCredentialCheck({...credentialCheck, personName: e.target.value})}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Person</option>\r\n                  {uniquePersons.map(person => (\r\n                    <option key={person} value={person}>{person}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Work Order *</label>\r\n                <select\r\n                  value={credentialCheck.workOrderId}\r\n                  onChange={(e) => setCredentialCheck({...credentialCheck, workOrderId: e.target.value})}\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Work Order</option>\r\n                  {workOrders.filter(wo => wo.status !== 'closed').map(wo => (\r\n                    <option key={wo.id} value={wo.id}>\r\n                      {wo.wo_number} - {wo.title}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Equipment Type *</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={credentialCheck.equipmentType}\r\n                  onChange={(e) => setCredentialCheck({...credentialCheck, equipmentType: e.target.value})}\r\n                  required\r\n                  placeholder=\"e.g., Overhead Crane, Mobile Crane\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={() => {\r\n                    setShowCredentialCheck(false);\r\n                    resetCredentialCheck();\r\n                  }} \r\n                  className=\"cancel-button\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  Check Credentials\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            {/* Credential Check Results */}\r\n            {credentialCheckResults.length > 0 && (\r\n              <div className=\"credential-check-results\">\r\n                <h3>Credential Check Results</h3>\r\n                {credentialCheckResults.map((result, index) => (\r\n                  <div key={index} className={`check-result ${result.status}`}>\r\n                    <span className=\"result-message\">{result.message}</span>\r\n                    {result.credential && (\r\n                      <div className=\"result-details\">\r\n                        <small>\r\n                          Expires: {new Date(result.credential.expiration_date).toLocaleDateString()}\r\n                          {result.credential.certificate_number && \r\n                            ` | Cert: ${result.credential.certificate_number}`\r\n                          }\r\n                        </small>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Create/Renew Credential Modal */}\r\n      {(showCreateCredential || showRenewCredential) && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content large\">\r\n            <div className=\"modal-header\">\r\n              <h2>{showRenewCredential ? 'Renew Credential' : 'Add Credential'}</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => {\r\n                  setShowCreateCredential(false);\r\n                  setShowRenewCredential(false);\r\n                  resetNewCredential();\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCreateCredential} className=\"create-form\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Person Name *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCredential.personName}\r\n                    onChange={(e) => setNewCredential({...newCredential, personName: e.target.value})}\r\n                    required\r\n                    placeholder=\"Full name of credential holder\"\r\n                    disabled={showRenewCredential}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Credential Type *</label>\r\n                  <select\r\n                    value={newCredential.credentialType}\r\n                    onChange={(e) => setNewCredential({...newCredential, credentialType: e.target.value})}\r\n                    required\r\n                    disabled={showRenewCredential}\r\n                  >\r\n                    <option value=\"\">Select Credential Type</option>\r\n                    {credentialTypes.map(type => (\r\n                      <option key={type} value={type}>{type}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Equipment Types (comma-separated)</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newCredential.equipmentTypes}\r\n                  onChange={(e) => setNewCredential({...newCredential, equipmentTypes: e.target.value})}\r\n                  placeholder=\"e.g., Overhead Crane, Mobile Crane, Hoist\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Certification Body *</label>\r\n                  <select\r\n                    value={newCredential.certificationBody}\r\n                    onChange={(e) => setNewCredential({...newCredential, certificationBody: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Certification Body</option>\r\n                    {certificationBodies.map(body => (\r\n                      <option key={body} value={body}>{body}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Certificate Number</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCredential.certificateNumber}\r\n                    onChange={(e) => setNewCredential({...newCredential, certificateNumber: e.target.value})}\r\n                    placeholder=\"Certificate or license number\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Issue Date *</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newCredential.issueDate}\r\n                    onChange={(e) => setNewCredential({...newCredential, issueDate: e.target.value})}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Expiration Date *</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newCredential.expirationDate}\r\n                    onChange={(e) => setNewCredential({...newCredential, expirationDate: e.target.value})}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label className=\"checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={newCredential.renewalRequired}\r\n                    onChange={(e) => setNewCredential({...newCredential, renewalRequired: e.target.checked})}\r\n                  />\r\n                  Renewal Required\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Notes</label>\r\n                <textarea\r\n                  value={newCredential.notes}\r\n                  onChange={(e) => setNewCredential({...newCredential, notes: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Additional notes about the credential\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={() => {\r\n                    setShowCreateCredential(false);\r\n                    setShowRenewCredential(false);\r\n                    resetNewCredential();\r\n                  }} \r\n                  className=\"cancel-button\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  {showRenewCredential ? 'Renew Credential' : 'Add Credential'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Credentials;\r\n"],"names":["Credentials","currentUser","useUser","credentials","setCredentials","useState","workOrders","setWorkOrders","loading","setLoading","error","setError","showCreateCredential","setShowCreateCredential","showRenewCredential","setShowRenewCredential","showCredentialCheck","setShowCredentialCheck","filterPerson","setFilterPerson","filterStatus","setFilterStatus","filterType","setFilterType","selectedCredential","setSelectedCredential","notifications","setNotifications","credentialCheckResults","setCredentialCheckResults","newCredential","setNewCredential","personName","credentialType","equipmentTypes","certificationBody","certificateNumber","issueDate","expirationDate","renewalRequired","notes","credentialCheck","setCredentialCheck","workOrderId","equipmentType","useEffect","loadData","checkExpiringCredentials","async","credentialsData","workOrdersData","Promise","all","window","api","getAll","err","console","message","today","Date","thirtyDaysFromNow","getTime","expiringCredentials","getExpiring","toISOString","split","newNotifications","forEach","credential","expiration_date","daysUntilExpiry","Math","ceil","push","type","person_name","credential_type","abs","credentialId","id","getRequiredCredentials","workOrder","_workOrder$title","_workOrder$descriptio","required","toLowerCase","includes","work_type","priority","title","description","handleRenewCredential","setFullYear","getFullYear","equipment_types","JSON","parse","join","certification_body","renewal_required","resetNewCredential","resetCredentialCheck","getCredentialStatus","status","diffTime","diffDays","getStatusBadge","config","class","label","_jsx","className","children","_jsxs","onClick","filteredCredentials","getFilteredCredentials","filtered","filter","cred","sort","a","b","localeCompare","uniquePersons","Set","map","uniqueTypes","length","notification","index","c","value","onChange","e","target","person","issue_date","toLocaleDateString","certificate_number","onSubmit","preventDefault","personCredentials","getByPerson","find","wo","parseInt","results","matchingCredential","auditLog","create","userId","username","action","entityType","entityId","oldValues","newValues","stringify","ipAddress","userAgent","navigator","wo_number","placeholder","result","credentialData","s","trim","createResult","createdCredentialId","lastID","disabled","body","checked","rows"],"sourceRoot":""}