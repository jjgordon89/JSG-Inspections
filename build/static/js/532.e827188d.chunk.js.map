{"version":3,"file":"static/js/532.e827188d.chunk.js","mappings":"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","sources":["components/Calibrations.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport './Calibrations.css';\r\n\r\nconst Calibrations = () => {\r\n  const { currentUser } = useUser();\r\n  const [calibrations, setCalibrations] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [showCreateCalibration, setShowCreateCalibration] = useState(false);\r\n  const [showScheduleNext, setShowScheduleNext] = useState(false);\r\n  const [selectedEquipmentId, setSelectedEquipmentId] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all'); // all, due, overdue, current\r\n  const [selectedCalibration, setSelectedCalibration] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const [newCalibration, setNewCalibration] = useState({\r\n    equipmentId: '',\r\n    instrumentType: '',\r\n    calibrationDate: new Date().toISOString().split('T')[0],\r\n    calibrationDueDate: '',\r\n    calibratedBy: '',\r\n    calibrationAgency: '',\r\n    certificateNumber: '',\r\n    calibrationResults: 'pass',\r\n    accuracyTolerance: '',\r\n    actualAccuracy: '',\r\n    adjustmentsMade: '',\r\n    notes: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    checkUpcomingCalibrations();\r\n  }, []);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const [equipmentData] = await Promise.all([\r\n        window.api.equipment.getAll()\r\n      ]);\r\n\r\n      setEquipment(equipmentData);\r\n\r\n      // Load calibrations for all equipment\r\n      const calibrationsPromises = equipmentData.map(eq => \r\n        window.api.calibrations.getByEquipmentId(eq.id)\r\n      );\r\n      const calibrationsResults = await Promise.all(calibrationsPromises);\r\n      const allCalibrations = calibrationsResults.flat();\r\n      setCalibrations(allCalibrations);\r\n\r\n    } catch (err) {\r\n      console.error('Error loading calibrations data:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Calibration Scheduling and Tracking\r\n  const checkUpcomingCalibrations = async () => {\r\n    try {\r\n      const today = new Date();\r\n      const thirtyDaysFromNow = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000));\r\n      \r\n      const dueCalibrations = await window.api.calibrations.getDue(thirtyDaysFromNow.toISOString().split('T')[0]);\r\n      const overdueCalibrations = await window.api.calibrations.getOverdue();\r\n      \r\n      const newNotifications = [];\r\n      \r\n      // Add overdue notifications\r\n      overdueCalibrations.forEach(calibration => {\r\n        newNotifications.push({\r\n          type: 'critical',\r\n          message: `Calibration for ${calibration.equipment_identifier} is overdue (due: ${new Date(calibration.calibration_due_date).toLocaleDateString()})`,\r\n          equipmentId: calibration.equipment_id,\r\n          calibrationId: calibration.id,\r\n          dueDate: calibration.calibration_due_date\r\n        });\r\n      });\r\n      \r\n      // Add upcoming notifications\r\n      dueCalibrations.forEach(calibration => {\r\n        const dueDate = new Date(calibration.calibration_due_date);\r\n        const daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));\r\n        \r\n        if (daysUntilDue <= 30 && daysUntilDue >= 0) {\r\n          newNotifications.push({\r\n            type: daysUntilDue <= 7 ? 'warning' : 'info',\r\n            message: `Calibration for ${calibration.equipment_identifier} due in ${daysUntilDue} days (${dueDate.toLocaleDateString()})`,\r\n            equipmentId: calibration.equipment_id,\r\n            calibrationId: calibration.id,\r\n            dueDate: calibration.calibration_due_date\r\n          });\r\n        }\r\n      });\r\n      \r\n      setNotifications(newNotifications);\r\n    } catch (err) {\r\n      console.error('Error checking upcoming calibrations:', err);\r\n    }\r\n  };\r\n\r\n  const handleCreateCalibration = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      // Calculate due date if not provided (typically 1 year for most instruments)\r\n      let dueDate = newCalibration.calibrationDueDate;\r\n      if (!dueDate) {\r\n        const calibrationDate = new Date(newCalibration.calibrationDate);\r\n        const nextDue = new Date(calibrationDate);\r\n        nextDue.setFullYear(nextDue.getFullYear() + 1);\r\n        dueDate = nextDue.toISOString().split('T')[0];\r\n      }\r\n\r\n      const calibrationData = {\r\n        ...newCalibration,\r\n        equipmentId: parseInt(newCalibration.equipmentId),\r\n        calibrationDueDate: dueDate\r\n      };\r\n\r\n      const createResult = await window.api.calibrations.create(calibrationData);\r\n      const createdCalibrationId = createResult?.lastID || createResult?.id || 0;\r\n\r\n      // Log audit entry\r\n      await window.api.auditLog.create({\r\n        userId: currentUser?.id || null,\r\n        username: currentUser?.username || 'Unknown User',\r\n        action: 'create',\r\n        entityType: 'calibration',\r\n        entityId: createdCalibrationId,\r\n        oldValues: null,\r\n        newValues: JSON.stringify(calibrationData),\r\n        ipAddress: null,\r\n        userAgent: navigator.userAgent\r\n      });\r\n\r\n      // Generate certificate if calibration passed\r\n      if (newCalibration.calibrationResults === 'pass') {\r\n        const equipmentItem = equipment.find(eq => eq.id === parseInt(newCalibration.equipmentId));\r\n        const certificateNumber = `CAL-${equipmentItem?.equipment_id}-${new Date().getFullYear()}-${String(Date.now()).slice(-4)}`;\r\n        \r\n        await window.api.certificates.create({\r\n          certificateNumber,\r\n          certificateType: 'calibration',\r\n          equipmentId: parseInt(newCalibration.equipmentId),\r\n          entityId: createdCalibrationId,\r\n          issueDate: newCalibration.calibrationDate,\r\n          expirationDate: dueDate,\r\n          issuedBy: newCalibration.calibratedBy,\r\n          qrCodeData: `${window.location.origin}/verify/${certificateNumber}`,\r\n          certificateHash: null // Will be calculated when certificate is generated\r\n        });\r\n      }\r\n\r\n      setShowCreateCalibration(false);\r\n      setShowScheduleNext(false);\r\n      resetNewCalibration();\r\n      await loadData();\r\n      await checkUpcomingCalibrations(); // Refresh notifications\r\n    } catch (err) {\r\n      console.error('Error creating calibration:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Phase 6: Schedule Next Calibration\r\n  const handleScheduleNext = async (calibration) => {\r\n    try {\r\n      const equipmentItem = equipment.find(eq => eq.id === calibration.equipment_id);\r\n      \r\n      // Calculate next calibration date (typically 1 year)\r\n      const lastCalibrationDate = new Date(calibration.calibration_date);\r\n      const nextCalibrationDate = new Date(lastCalibrationDate);\r\n      nextCalibrationDate.setFullYear(nextCalibrationDate.getFullYear() + 1);\r\n\r\n      // Pre-populate form with previous calibration data\r\n      setNewCalibration({\r\n        equipmentId: calibration.equipment_id.toString(),\r\n        instrumentType: calibration.instrument_type,\r\n        calibrationDate: nextCalibrationDate.toISOString().split('T')[0],\r\n        calibrationDueDate: '',\r\n        calibratedBy: calibration.calibrated_by,\r\n        calibrationAgency: calibration.calibration_agency || '',\r\n        certificateNumber: '',\r\n        calibrationResults: 'pass',\r\n        accuracyTolerance: calibration.accuracy_tolerance || '',\r\n        actualAccuracy: '',\r\n        adjustmentsMade: '',\r\n        notes: `Scheduled follow-up to calibration #${calibration.id}`\r\n      });\r\n\r\n      setSelectedCalibration(calibration);\r\n      setShowScheduleNext(true);\r\n    } catch (err) {\r\n      console.error('Error scheduling next calibration:', err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const resetNewCalibration = () => {\r\n    setNewCalibration({\r\n      equipmentId: '',\r\n      instrumentType: '',\r\n      calibrationDate: new Date().toISOString().split('T')[0],\r\n      calibrationDueDate: '',\r\n      calibratedBy: '',\r\n      calibrationAgency: '',\r\n      certificateNumber: '',\r\n      calibrationResults: 'pass',\r\n      accuracyTolerance: '',\r\n      actualAccuracy: '',\r\n      adjustmentsMade: '',\r\n      notes: ''\r\n    });\r\n    setSelectedCalibration(null);\r\n  };\r\n\r\n  const getCalibrationStatus = (calibration) => {\r\n    if (!calibration.calibration_due_date) return 'no-date';\r\n    \r\n    const today = new Date();\r\n    const dueDate = new Date(calibration.calibration_due_date);\r\n    const diffTime = dueDate - today;\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays < 0) return 'overdue';\r\n    if (diffDays <= 30) return 'due-soon';\r\n    if (diffDays <= 90) return 'upcoming';\r\n    return 'current';\r\n  };\r\n\r\n  const getStatusBadge = (calibration) => {\r\n    const status = getCalibrationStatus(calibration);\r\n    const statusConfig = {\r\n      'overdue': { class: 'status-overdue', label: 'Overdue' },\r\n      'due-soon': { class: 'status-due-soon', label: 'Due Soon' },\r\n      'upcoming': { class: 'status-upcoming', label: 'Due in 90 Days' },\r\n      'current': { class: 'status-current', label: 'Current' },\r\n      'no-date': { class: 'status-no-date', label: 'No Due Date' }\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <span className={`status-badge ${config.class}`}>{config.label}</span>;\r\n  };\r\n\r\n  const getFilteredCalibrations = () => {\r\n    let filtered = calibrations;\r\n\r\n    if (selectedEquipmentId) {\r\n      filtered = filtered.filter(cal => cal.equipment_id === parseInt(selectedEquipmentId));\r\n    }\r\n\r\n    if (filterStatus !== 'all') {\r\n      filtered = filtered.filter(cal => getCalibrationStatus(cal) === filterStatus);\r\n    }\r\n\r\n    return filtered.sort((a, b) => new Date(b.calibration_date) - new Date(a.calibration_date));\r\n  };\r\n\r\n  const getInstrumentEquipment = () => {\r\n    return equipment.filter(eq => \r\n      eq.type && (\r\n        eq.type.toLowerCase().includes('crane') ||\r\n        eq.type.toLowerCase().includes('hoist') ||\r\n        eq.type.toLowerCase().includes('scale') ||\r\n        eq.type.toLowerCase().includes('gauge') ||\r\n        eq.type.toLowerCase().includes('meter') ||\r\n        eq.type.toLowerCase().includes('load') ||\r\n        eq.type.toLowerCase().includes('test')\r\n      )\r\n    );\r\n  };\r\n\r\n  const instrumentTypes = [\r\n    'Load Block',\r\n    'Load Cell',\r\n    'Pressure Gauge',\r\n    'Torque Wrench',\r\n    'Dynamometer',\r\n    'Scale',\r\n    'Test Weight',\r\n    'Multimeter',\r\n    'Oscilloscope',\r\n    'Calibrator',\r\n    'Other'\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"calibrations\">\r\n        <div className=\"calibrations-header\">\r\n          <h1>Calibrations</h1>\r\n        </div>\r\n        <div className=\"loading-spinner\">Loading calibrations data...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"calibrations\">\r\n        <div className=\"calibrations-header\">\r\n          <h1>Calibrations</h1>\r\n        </div>\r\n        <div className=\"error-message\">\r\n          <p>Error loading calibrations: {error}</p>\r\n          <button onClick={loadData} className=\"retry-button\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const filteredCalibrations = getFilteredCalibrations();\r\n  const instrumentEquipment = getInstrumentEquipment();\r\n\r\n  return (\r\n    <div className=\"calibrations\">\r\n      <div className=\"calibrations-header\">\r\n        <h1>Calibrations</h1>\r\n        <div className=\"header-actions\">\r\n          <button \r\n            className=\"create-button\"\r\n            onClick={() => setShowCreateCalibration(true)}\r\n          >\r\n            + Record Calibration\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Phase 6: Calibration Notifications */}\r\n      {notifications.length > 0 && (\r\n        <div className=\"calibration-notifications\">\r\n          <h3>🔔 Calibration Alerts</h3>\r\n          {notifications.map((notification, index) => (\r\n            <div key={index} className={`notification ${notification.type}`}>\r\n              <span className=\"notification-message\">{notification.message}</span>\r\n              <button \r\n                className=\"notification-action\"\r\n                onClick={() => handleScheduleNext({ \r\n                  equipment_id: notification.equipmentId, \r\n                  id: notification.calibrationId,\r\n                  calibration_due_date: notification.dueDate \r\n                })}\r\n              >\r\n                Schedule Calibration\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"calibrations-summary\">\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value\">{calibrations.length}</span>\r\n          <span className=\"summary-label\">Total Calibrations</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-critical\">\r\n            {calibrations.filter(c => getCalibrationStatus(c) === 'overdue').length}\r\n          </span>\r\n          <span className=\"summary-label\">Overdue</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-warning\">\r\n            {calibrations.filter(c => getCalibrationStatus(c) === 'due-soon').length}\r\n          </span>\r\n          <span className=\"summary-label\">Due Soon</span>\r\n        </div>\r\n        <div className=\"summary-card\">\r\n          <span className=\"summary-value status-good\">\r\n            {calibrations.filter(c => c.calibration_results === 'pass').length}\r\n          </span>\r\n          <span className=\"summary-label\">Passed</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <div className=\"calibrations-filters\">\r\n        <div className=\"filter-group\">\r\n          <label>Equipment:</label>\r\n          <select\r\n            value={selectedEquipmentId}\r\n            onChange={(e) => setSelectedEquipmentId(e.target.value)}\r\n          >\r\n            <option value=\"\">All Equipment</option>\r\n            {instrumentEquipment.map(eq => (\r\n              <option key={eq.id} value={eq.id}>\r\n                {eq.equipment_id} - {eq.type}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"filter-group\">\r\n          <label>Status:</label>\r\n          <select\r\n            value={filterStatus}\r\n            onChange={(e) => setFilterStatus(e.target.value)}\r\n          >\r\n            <option value=\"all\">All Status</option>\r\n            <option value=\"overdue\">Overdue</option>\r\n            <option value=\"due-soon\">Due Soon</option>\r\n            <option value=\"upcoming\">Upcoming</option>\r\n            <option value=\"current\">Current</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Calibrations List */}\r\n      <div className=\"calibrations-list\">\r\n        {filteredCalibrations.length === 0 ? (\r\n          <div className=\"empty-state\">\r\n            <p>No calibrations found matching the current filters.</p>\r\n            <button \r\n              className=\"create-button\"\r\n              onClick={() => setShowCreateCalibration(true)}\r\n            >\r\n              Record First Calibration\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          filteredCalibrations.map(calibration => {\r\n            const equipmentItem = equipment.find(eq => eq.id === calibration.equipment_id);\r\n            return (\r\n              <div key={calibration.id} className=\"calibration-card\">\r\n                <div className=\"calibration-header\">\r\n                  <div className=\"calibration-title\">\r\n                    <h3>{equipmentItem?.equipment_id} - {calibration.instrument_type}</h3>\r\n                    <span className=\"equipment-type\">{equipmentItem?.type}</span>\r\n                  </div>\r\n                  <div className=\"calibration-badges\">\r\n                    {getStatusBadge(calibration)}\r\n                    <span className={`result-badge ${calibration.calibration_results}`}>\r\n                      {calibration.calibration_results === 'pass' ? '✅ Passed' : \r\n                       calibration.calibration_results === 'fail' ? '❌ Failed' : '⚠️ Limited'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"calibration-details\">\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Calibration Date:</span>\r\n                    <span className=\"detail-value\">{new Date(calibration.calibration_date).toLocaleDateString()}</span>\r\n                  </div>\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Due Date:</span>\r\n                    <span className=\"detail-value\">{new Date(calibration.calibration_due_date).toLocaleDateString()}</span>\r\n                  </div>\r\n                  <div className=\"detail-row\">\r\n                    <span className=\"detail-label\">Calibrated By:</span>\r\n                    <span className=\"detail-value\">{calibration.calibrated_by}</span>\r\n                  </div>\r\n                  {calibration.calibration_agency && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Agency:</span>\r\n                      <span className=\"detail-value\">{calibration.calibration_agency}</span>\r\n                    </div>\r\n                  )}\r\n                  {calibration.certificate_number && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Certificate:</span>\r\n                      <span className=\"detail-value\">{calibration.certificate_number}</span>\r\n                    </div>\r\n                  )}\r\n                  {calibration.accuracy_tolerance && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Tolerance:</span>\r\n                      <span className=\"detail-value\">{calibration.accuracy_tolerance}</span>\r\n                    </div>\r\n                  )}\r\n                  {calibration.actual_accuracy && (\r\n                    <div className=\"detail-row\">\r\n                      <span className=\"detail-label\">Actual Accuracy:</span>\r\n                      <span className=\"detail-value\">{calibration.actual_accuracy}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {calibration.adjustments_made && (\r\n                  <div className=\"calibration-adjustments\">\r\n                    <h4>🔧 Adjustments Made:</h4>\r\n                    <p>{calibration.adjustments_made}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {calibration.notes && (\r\n                  <div className=\"calibration-notes\">\r\n                    <h4>📝 Notes:</h4>\r\n                    <p>{calibration.notes}</p>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"calibration-actions\">\r\n                  <button className=\"action-button view-certificate\">\r\n                    View Certificate\r\n                  </button>\r\n                  <button \r\n                    className=\"action-button schedule-next\"\r\n                    onClick={() => handleScheduleNext(calibration)}\r\n                  >\r\n                    Schedule Next Calibration\r\n                  </button>\r\n                  <button className=\"action-button edit\">\r\n                    Edit Calibration\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      {/* Create/Schedule Calibration Modal */}\r\n      {(showCreateCalibration || showScheduleNext) && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content large\">\r\n            <div className=\"modal-header\">\r\n              <h2>{showScheduleNext ? 'Schedule Next Calibration' : 'Record Calibration'}</h2>\r\n              <button \r\n                className=\"close-button\"\r\n                onClick={() => {\r\n                  setShowCreateCalibration(false);\r\n                  setShowScheduleNext(false);\r\n                  resetNewCalibration();\r\n                }}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <form onSubmit={handleCreateCalibration} className=\"create-form\">\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Equipment *</label>\r\n                  <select\r\n                    value={newCalibration.equipmentId}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, equipmentId: e.target.value})}\r\n                    required\r\n                    disabled={showScheduleNext}\r\n                  >\r\n                    <option value=\"\">Select Equipment</option>\r\n                    {instrumentEquipment.map(eq => (\r\n                      <option key={eq.id} value={eq.id}>\r\n                        {eq.equipment_id} - {eq.type}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Instrument Type *</label>\r\n                  <select\r\n                    value={newCalibration.instrumentType}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, instrumentType: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Instrument Type</option>\r\n                    {instrumentTypes.map(type => (\r\n                      <option key={type} value={type}>{type}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Calibration Date *</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newCalibration.calibrationDate}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, calibrationDate: e.target.value})}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Due Date</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    value={newCalibration.calibrationDueDate}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, calibrationDueDate: e.target.value})}\r\n                    placeholder=\"Will be auto-calculated if blank\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Calibrated By *</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCalibration.calibratedBy}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, calibratedBy: e.target.value})}\r\n                    required\r\n                    placeholder=\"Technician name\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Calibration Agency</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCalibration.calibrationAgency}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, calibrationAgency: e.target.value})}\r\n                    placeholder=\"External calibration service\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Certificate Number</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCalibration.certificateNumber}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, certificateNumber: e.target.value})}\r\n                    placeholder=\"Calibration certificate number\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Calibration Results *</label>\r\n                  <select\r\n                    value={newCalibration.calibrationResults}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, calibrationResults: e.target.value})}\r\n                    required\r\n                  >\r\n                    <option value=\"pass\">Pass</option>\r\n                    <option value=\"fail\">Fail</option>\r\n                    <option value=\"limited\">Limited</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-row\">\r\n                <div className=\"form-group\">\r\n                  <label>Accuracy Tolerance</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCalibration.accuracyTolerance}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, accuracyTolerance: e.target.value})}\r\n                    placeholder=\"e.g., ±0.1% or ±1 lb\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label>Actual Accuracy</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={newCalibration.actualAccuracy}\r\n                    onChange={(e) => setNewCalibration({...newCalibration, actualAccuracy: e.target.value})}\r\n                    placeholder=\"e.g., ±0.05% or ±0.5 lb\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Adjustments Made</label>\r\n                <textarea\r\n                  value={newCalibration.adjustmentsMade}\r\n                  onChange={(e) => setNewCalibration({...newCalibration, adjustmentsMade: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Describe any adjustments or repairs made during calibration\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Notes</label>\r\n                <textarea\r\n                  value={newCalibration.notes}\r\n                  onChange={(e) => setNewCalibration({...newCalibration, notes: e.target.value})}\r\n                  rows=\"3\"\r\n                  placeholder=\"Additional notes about the calibration\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-actions\">\r\n                <button \r\n                  type=\"button\" \r\n                  onClick={() => {\r\n                    setShowCreateCalibration(false);\r\n                    setShowScheduleNext(false);\r\n                    resetNewCalibration();\r\n                  }} \r\n                  className=\"cancel-button\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                  {showScheduleNext ? 'Schedule Next Calibration' : 'Record Calibration'}\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calibrations;\r\n"],"names":["Calibrations","currentUser","useUser","calibrations","setCalibrations","useState","equipment","setEquipment","loading","setLoading","error","setError","showCreateCalibration","setShowCreateCalibration","showScheduleNext","setShowScheduleNext","selectedEquipmentId","setSelectedEquipmentId","filterStatus","setFilterStatus","selectedCalibration","setSelectedCalibration","notifications","setNotifications","newCalibration","setNewCalibration","equipmentId","instrumentType","calibrationDate","Date","toISOString","split","calibrationDueDate","calibratedBy","calibrationAgency","certificateNumber","calibrationResults","accuracyTolerance","actualAccuracy","adjustmentsMade","notes","useEffect","loadData","checkUpcomingCalibrations","async","equipmentData","Promise","all","window","api","getAll","calibrationsPromises","map","eq","getByEquipmentId","id","allCalibrations","flat","err","console","message","today","thirtyDaysFromNow","getTime","dueCalibrations","getDue","overdueCalibrations","getOverdue","newNotifications","forEach","calibration","push","type","equipment_identifier","calibration_due_date","toLocaleDateString","equipment_id","calibrationId","dueDate","daysUntilDue","Math","ceil","handleScheduleNext","find","lastCalibrationDate","calibration_date","nextCalibrationDate","setFullYear","getFullYear","toString","instrument_type","calibrated_by","calibration_agency","accuracy_tolerance","resetNewCalibration","getCalibrationStatus","diffTime","diffDays","getStatusBadge","config","class","label","_jsx","className","children","_jsxs","onClick","filteredCalibrations","getFilteredCalibrations","filtered","filter","cal","parseInt","sort","a","b","instrumentEquipment","toLowerCase","includes","length","notification","index","c","calibration_results","value","onChange","e","target","equipmentItem","certificate_number","actual_accuracy","adjustments_made","onSubmit","preventDefault","nextDue","calibrationData","createResult","create","createdCalibrationId","lastID","auditLog","userId","username","action","entityType","entityId","oldValues","newValues","JSON","stringify","ipAddress","userAgent","navigator","String","now","slice","certificates","certificateType","issueDate","expirationDate","issuedBy","qrCodeData","location","origin","certificateHash","required","disabled","placeholder","rows"],"sourceRoot":""}