{"version":3,"file":"static/js/688.d158e007.chunk.js","mappings":"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","sources":["components/PhotoAnnotation.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { MarkerArea, ArrowMarker, TextMarker, EllipseMarker } from 'markerjs2';\r\nimport './PhotoAnnotation.css';\r\n\r\n// Photo compression utility\r\nconst compressImage = (file, quality = 0.8, maxWidth = 1920, maxHeight = 1080) => {\r\n  return new Promise((resolve) => {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n    \r\n    img.onload = () => {\r\n      // Calculate new dimensions\r\n      let { width, height } = img;\r\n      if (width > maxWidth || height > maxHeight) {\r\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\r\n        width *= ratio;\r\n        height *= ratio;\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      // Draw and compress\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      canvas.toBlob(resolve, 'image/jpeg', quality);\r\n    };\r\n    \r\n    img.src = URL.createObjectURL(file);\r\n  });\r\n};\r\n\r\nfunction PhotoAnnotation({ photo, onSave, onCancel, enableBatchMode = false, batchPhotos = [] }) {\r\n  const imgRef = useRef(null);\r\n  const markerAreaRef = useRef(null);\r\n  const [selectedColor, setSelectedColor] = useState('#FF0000');\r\n  const [compressionQuality, setCompressionQuality] = useState(0.8);\r\n  const [currentBatchIndex, setCurrentBatchIndex] = useState(0);\r\n  const [batchAnnotations, setBatchAnnotations] = useState({});\r\n  const [isAnnotating, setIsAnnotating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (imgRef.current && !isAnnotating) {\r\n      const markerArea = new MarkerArea(imgRef.current, {\r\n        targetRoot: document.body,\r\n        markerTypes: [ArrowMarker, TextMarker, EllipseMarker],\r\n      });\r\n\r\n      // Load existing annotations if they exist\r\n      if (photo.annotations && photo.annotations.length > 0) {\r\n        markerArea.restoreState(photo.annotations);\r\n      }\r\n\r\n      markerArea.addEventListener('render', (event) => {\r\n        const annotatedPhoto = {\r\n          ...photo,\r\n          dataUrl: event.dataUrl,\r\n          annotations: event.state\r\n        };\r\n        onSave(annotatedPhoto);\r\n      });\r\n\r\n      markerArea.addEventListener('close', () => {\r\n        if (onCancel) {\r\n          onCancel();\r\n        }\r\n      });\r\n\r\n      setIsAnnotating(true);\r\n      markerArea.show();\r\n      markerAreaRef.current = markerArea;\r\n    }\r\n\r\n    return () => {\r\n      if (markerAreaRef.current) {\r\n        markerAreaRef.current.close();\r\n        markerAreaRef.current = null;\r\n        setIsAnnotating(false);\r\n      }\r\n    };\r\n  }, [photo, onSave, onCancel, isAnnotating]);\r\n\r\n  const handleColorChange = (color) => {\r\n    setSelectedColor(color);\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.setMarkerColor(color);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.render();\r\n    }\r\n  };\r\n\r\n  const handleBatchSave = async () => {\r\n    if (enableBatchMode && batchPhotos.length > 0) {\r\n      const currentPhoto = batchPhotos[currentBatchIndex];\r\n      if (markerAreaRef.current && currentPhoto) {\r\n        // Save current annotations\r\n        const annotatedData = await new Promise((resolve) => {\r\n          markerAreaRef.current.addEventListener('render', (event) => {\r\n            resolve({\r\n              dataUrl: event.dataUrl,\r\n              annotations: markerAreaRef.current.getState()\r\n            });\r\n          }, { once: true });\r\n          markerAreaRef.current.render();\r\n        });\r\n        \r\n        setBatchAnnotations(prev => ({\r\n          ...prev,\r\n          [currentBatchIndex]: annotatedData\r\n        }));\r\n        \r\n        // Move to next photo or finish\r\n        if (currentBatchIndex < batchPhotos.length - 1) {\r\n          setCurrentBatchIndex(prev => prev + 1);\r\n        } else {\r\n          // All photos processed, save batch\r\n          if (onSave) {\r\n            onSave(batchAnnotations);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCompress = async () => {\r\n    const photoSrc = typeof photo === 'string' ? photo : photo.dataUrl;\r\n    if (photoSrc) {\r\n      try {\r\n        // Convert data URL to blob\r\n        const response = await fetch(photoSrc);\r\n        const blob = await response.blob();\r\n        \r\n        // Compress the image\r\n        const compressedBlob = await compressImage(blob, compressionQuality);\r\n        \r\n        // Convert back to data URL\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          const compressedDataUrl = reader.result;\r\n          if (onSave) {\r\n            onSave({\r\n              dataUrl: compressedDataUrl,\r\n              compressed: true,\r\n              originalSize: blob.size,\r\n              compressedSize: compressedBlob.size,\r\n              compressionRatio: (1 - compressedBlob.size / blob.size).toFixed(2)\r\n            });\r\n          }\r\n        };\r\n        reader.readAsDataURL(compressedBlob);\r\n      } catch (error) {\r\n        console.error('Compression failed:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (markerAreaRef.current) {\r\n      markerAreaRef.current.close();\r\n    }\r\n    if (onCancel) {\r\n      onCancel();\r\n    }\r\n  };\r\n\r\n  const handlePreviousBatch = () => {\r\n    if (currentBatchIndex > 0) {\r\n      setCurrentBatchIndex(prev => prev - 1);\r\n    }\r\n  };\r\n\r\n  const handleNextBatch = () => {\r\n    if (currentBatchIndex < batchPhotos.length - 1) {\r\n      setCurrentBatchIndex(prev => prev + 1);\r\n    }\r\n  };\r\n\r\n  // Get the photo source - handle both string URLs and photo objects\r\n  const currentPhoto = enableBatchMode && batchPhotos.length > 0 \r\n    ? batchPhotos[currentBatchIndex] \r\n    : photo;\r\n  const photoSrc = typeof currentPhoto === 'string' ? currentPhoto : currentPhoto?.dataUrl;\r\n\r\n  return (\r\n    <div className=\"photo-annotation-container\">\r\n      <div className=\"annotation-toolbar\">\r\n        <div className=\"toolbar-section\">\r\n          <label>Annotation Color:</label>\r\n          <input\r\n            type=\"color\"\r\n            value={selectedColor}\r\n            onChange={(e) => handleColorChange(e.target.value)}\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"toolbar-section\">\r\n          <label>Compression Quality:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0.1\"\r\n            max=\"1\"\r\n            step=\"0.1\"\r\n            value={compressionQuality}\r\n            onChange={(e) => setCompressionQuality(parseFloat(e.target.value))}\r\n          />\r\n          <span>{Math.round(compressionQuality * 100)}%</span>\r\n          <button onClick={handleCompress} className=\"compress-btn\">Compress Photo</button>\r\n        </div>\r\n        \r\n        {enableBatchMode && batchPhotos.length > 0 && (\r\n          <div className=\"toolbar-section batch-controls\">\r\n            <span>Photo {currentBatchIndex + 1} of {batchPhotos.length}</span>\r\n            <button \r\n              onClick={handlePreviousBatch} \r\n              disabled={currentBatchIndex === 0}\r\n              className=\"nav-btn\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <button \r\n              onClick={handleNextBatch} \r\n              disabled={currentBatchIndex === batchPhotos.length - 1}\r\n              className=\"nav-btn\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"annotation-actions\">\r\n          {enableBatchMode ? (\r\n            <>\r\n              <button onClick={handleBatchSave} className=\"save-btn\">\r\n                {currentBatchIndex === batchPhotos.length - 1 ? 'Finish Batch' : 'Save & Next'}\r\n              </button>\r\n              <button onClick={handleCancel} className=\"cancel-btn\">Cancel Batch</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={handleSave} className=\"save-btn\">Save Annotations</button>\r\n              <button onClick={handleCancel} className=\"cancel-btn\">Cancel</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <img \r\n        ref={imgRef} \r\n        src={photoSrc} \r\n        alt=\"For annotation\" \r\n        style={{ maxWidth: '100%', maxHeight: '70vh' }} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoAnnotation;\r\n"],"names":["_ref","photo","onSave","onCancel","enableBatchMode","batchPhotos","imgRef","useRef","markerAreaRef","selectedColor","setSelectedColor","useState","compressionQuality","setCompressionQuality","currentBatchIndex","setCurrentBatchIndex","batchAnnotations","setBatchAnnotations","isAnnotating","setIsAnnotating","useEffect","current","markerArea","MarkerArea","targetRoot","document","body","markerTypes","ArrowMarker","TextMarker","EllipseMarker","annotations","length","restoreState","addEventListener","event","annotatedPhoto","dataUrl","state","show","close","handleCancel","currentPhoto","photoSrc","_jsxs","className","children","_jsx","type","value","onChange","e","handleColorChange","color","target","setMarkerColor","min","max","step","parseFloat","Math","round","onClick","async","response","fetch","blob","compressedBlob","file","quality","arguments","undefined","maxWidth","maxHeight","Promise","resolve","canvas","createElement","ctx","getContext","img","Image","onload","width","height","ratio","drawImage","toBlob","src","URL","createObjectURL","compressImage","reader","FileReader","compressedDataUrl","result","compressed","originalSize","size","compressedSize","compressionRatio","toFixed","readAsDataURL","error","console","handlePreviousBatch","prev","disabled","handleNextBatch","_Fragment","annotatedData","getState","once","render","ref","alt","style"],"sourceRoot":""}