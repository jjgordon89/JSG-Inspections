{"version":3,"file":"static/js/949.727f2c56.chunk.js","mappings":"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","sources":["components/Scheduler.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Scheduler.css';\r\n\r\nfunction Scheduler() {\r\n  const [scheduledInspections, setScheduledInspections] = useState([]);\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [selectedEquipment, setSelectedEquipment] = useState('');\r\n  const [scheduledDate, setScheduledDate] = useState('');\r\n  const [assignedInspector, setAssignedInspector] = useState('');\r\n  const [editingInspection, setEditingInspection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchScheduledInspections();\r\n    fetchEquipment();\r\n  }, []);\r\n\r\n  const fetchScheduledInspections = async () => {\r\n    try {\r\n      const inspections = await window.api.all('SELECT * FROM scheduled_inspections ORDER BY scheduled_date');\r\n      setScheduledInspections(inspections);\r\n    } catch (error) {\r\n      console.error('Error fetching scheduled inspections:', error);\r\n    }\r\n  };\r\n\r\n  const fetchEquipment = async () => {\r\n    try {\r\n      const equipmentList = await window.api.all('SELECT * FROM equipment');\r\n      setEquipment(equipmentList);\r\n    } catch (error) {\r\n      console.error('Error fetching equipment:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSelectedEquipment('');\r\n    setScheduledDate('');\r\n    setAssignedInspector('');\r\n    setEditingInspection(null);\r\n  }\r\n\r\n  const handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log('Form submitted with:', { selectedEquipment, scheduledDate, assignedInspector });\r\n    if (!selectedEquipment || !scheduledDate) {\r\n      console.log('Validation failed:', { selectedEquipment, scheduledDate });\r\n      alert('Please select equipment and a date.');\r\n      return;\r\n    }\r\n    console.log('Validation passed, proceeding with API call');\r\n\r\n    try {\r\n      if (editingInspection) {\r\n        // Update existing inspection\r\n        await window.api.run(\r\n          'UPDATE scheduled_inspections SET equipment_id = ?, scheduled_date = ?, assigned_inspector = ? WHERE id = ?',\r\n          [parseInt(selectedEquipment), scheduledDate, assignedInspector, editingInspection.id]\r\n        );\r\n      } else {\r\n        // Add new inspection\r\n        await window.api.run(\r\n          'INSERT INTO scheduled_inspections (equipment_id, scheduled_date, assigned_inspector, status, equipmentIdentifier) VALUES (?, ?, ?, ?, ?)',\r\n          [parseInt(selectedEquipment), scheduledDate, assignedInspector, 'scheduled', `EQ-${selectedEquipment.toString().padStart(3, '0')}`]\r\n        );\r\n      }\r\n\r\n      fetchScheduledInspections();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Error saving scheduled inspection:', error);\r\n      alert('Failed to save scheduled inspection. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleEditInspection = (inspection) => {\r\n    setEditingInspection(inspection);\r\n    setSelectedEquipment(inspection.equipment_id);\r\n    setScheduledDate(inspection.scheduled_date);\r\n    setAssignedInspector(inspection.assigned_inspector);\r\n  };\r\n\r\n  const handleDeleteInspection = async (id) => {\r\n    if (window.confirm('Are you sure you want to delete this scheduled inspection?')) {\r\n      try {\r\n        await window.api.run('DELETE FROM scheduled_inspections WHERE id = ?', [id]);\r\n        fetchScheduledInspections();\r\n      } catch (error) {\r\n        console.error('Error deleting scheduled inspection:', error);\r\n        alert('Failed to delete scheduled inspection. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (inspectionId, newStatus) => {\r\n    try {\r\n      await window.api.run(\r\n        'UPDATE scheduled_inspections SET status = ? WHERE id = ?',\r\n        [newStatus, inspectionId]\r\n      );\r\n      fetchScheduledInspections();\r\n    } catch (error) {\r\n      console.error('Error updating inspection status:', error);\r\n      alert('Failed to update inspection status. Please try again.');\r\n    }\r\n  };\r\n\r\n  const startInspection = (inspection) => {\r\n    // This would typically navigate to the inspection form\r\n    // For now, we'll just update the status to in_progress\r\n    handleStatusChange(inspection.id, 'in_progress');\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'scheduled': return '#007bff';\r\n      case 'in_progress': return '#ffc107';\r\n      case 'completed': return '#28a745';\r\n      default: return '#6c757d';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"scheduler\">\r\n      <h2>Inspection Scheduler</h2>\r\n      <form onSubmit={handleFormSubmit} className=\"scheduler-form\">\r\n        <select\r\n          value={selectedEquipment}\r\n          onChange={(e) => setSelectedEquipment(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\">Select Equipment</option>\r\n          {equipment.map((item) => (\r\n            <option key={item.id} value={item.id}>\r\n              {item.equipment_id} - {item.type}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"date\"\r\n          value={scheduledDate}\r\n          onChange={(e) => setScheduledDate(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Assigned Inspector\"\r\n          value={assignedInspector}\r\n          onChange={(e) => setAssignedInspector(e.target.value)}\r\n        />\r\n        <button type=\"submit\">{editingInspection ? 'Update Inspection' : 'Schedule Inspection'}</button>\r\n        {editingInspection && <button type=\"button\" onClick={resetForm}>Cancel Edit</button>}\r\n      </form>\r\n\r\n      <div className=\"scheduled-inspections-list\">\r\n        <h3>Scheduled Inspections</h3>\r\n        {scheduledInspections.length === 0 ? (\r\n          <p>No scheduled inspections found.</p>\r\n        ) : (\r\n          <div className=\"inspections-grid\">\r\n            {scheduledInspections.map((inspection) => (\r\n              <div key={inspection.id} className=\"inspection-card\">\r\n                <div className=\"inspection-header\">\r\n                  <h4>Equipment: {inspection.equipmentIdentifier}</h4>\r\n                  <span \r\n                    className=\"status-badge\" \r\n                    style={{ backgroundColor: getStatusColor(inspection.status) }}\r\n                  >\r\n                    {inspection.status.replace('_', ' ').toUpperCase()}\r\n                  </span>\r\n                </div>\r\n                <div className=\"inspection-details\">\r\n                  <p><strong>Date:</strong> {new Date(inspection.scheduled_date).toLocaleDateString()}</p>\r\n                  <p><strong>Inspector:</strong> {inspection.assigned_inspector || 'Unassigned'}</p>\r\n                </div>\r\n                <div className=\"inspection-actions\">\r\n                  {inspection.status === 'scheduled' && (\r\n                    <button \r\n                      onClick={() => startInspection(inspection)}\r\n                      className=\"start-btn\"\r\n                    >\r\n                      Start Inspection\r\n                    </button>\r\n                  )}\r\n                  {inspection.status === 'in_progress' && (\r\n                    <button \r\n                      onClick={() => handleStatusChange(inspection.id, 'completed')}\r\n                      className=\"complete-btn\"\r\n                    >\r\n                      Mark Complete\r\n                    </button>\r\n                  )}\r\n                  <button \r\n                    onClick={() => handleEditInspection(inspection)}\r\n                    className=\"edit-btn\"\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button \r\n                    onClick={() => handleDeleteInspection(inspection.id)} \r\n                    className=\"delete-btn\"\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scheduler;\r\n"],"names":["scheduledInspections","setScheduledInspections","useState","equipment","setEquipment","selectedEquipment","setSelectedEquipment","scheduledDate","setScheduledDate","assignedInspector","setAssignedInspector","editingInspection","setEditingInspection","useEffect","fetchScheduledInspections","fetchEquipment","async","inspections","window","api","all","error","console","equipmentList","resetForm","handleStatusChange","inspectionId","newStatus","run","alert","getStatusColor","status","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","log","parseInt","id","toString","padStart","value","onChange","target","required","map","item","equipment_id","type","placeholder","onClick","length","inspection","equipmentIdentifier","style","backgroundColor","replace","toUpperCase","Date","scheduled_date","toLocaleDateString","assigned_inspector","startInspection","handleEditInspection","confirm","handleDeleteInspection"],"sourceRoot":""}