{"version":3,"file":"static/js/740.5bb93406.chunk.js","mappings":"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","sources":["components/DocumentList.js","components/EquipmentCard.js","components/EquipmentList.js","utils/retry.js","components/AddEquipmentForm.js","utils/qr.js","components/Equipment.js","components/QrScanner.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction DocumentList({ equipmentId }) {\r\n  const [documents, setDocuments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (equipmentId) {\r\n      // Use secure operation instead of generic SQL\r\n      window.api.documents.getByEquipmentId(equipmentId).then(result => {\r\n        if (window.api.isError(result)) {\r\n          console.error('Failed to load documents:', window.api.getErrorMessage(result));\r\n          setDocuments([]);\r\n        } else {\r\n          setDocuments(result.data || []);\r\n        }\r\n      });\r\n    }\r\n  }, [equipmentId]);\r\n\r\n  const handleOpenDocument = async (filePath) => {\r\n    try {\r\n      const result = await window.api.openFilePath(filePath);\r\n      if (window.api.isError(result)) {\r\n        console.error('Failed to open document:', window.api.getErrorMessage(result));\r\n        alert(`Failed to open document: ${window.api.getErrorMessage(result)}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error opening document:', error);\r\n      alert('Failed to open document. Please check if the file exists.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Documents</h3>\r\n      <ul>\r\n        {documents.map((doc) => (\r\n          <li key={doc.id}>\r\n            <button \r\n              onClick={() => handleOpenDocument(doc.file_path)}\r\n              className=\"text-blue-600 hover:text-blue-800 underline bg-transparent border-none cursor-pointer\"\r\n            >\r\n              {doc.file_name}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DocumentList;\r\n","import React from 'react';\r\nimport './EquipmentCard.css';\r\nimport DocumentList from './DocumentList';\r\nimport { generateEquipmentPdf } from '../utils/generatePdf';\r\n\r\nfunction EquipmentCard({ equipment, onEdit, onDelete, onViewInspections, onInspect }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{equipment.equipment_id} - {equipment.type}</h5>\r\n        <p className=\"card-text\"><strong>Manufacturer:</strong> {equipment.manufacturer}</p>\r\n        <p className=\"card-text\"><strong>Model:</strong> {equipment.model}</p>\r\n        <p className=\"card-text\"><strong>Serial Number:</strong> {equipment.serial_number}</p>\r\n        <p className=\"card-text\"><strong>Status:</strong> <span className={`status status-${equipment.status.toLowerCase().replace(/ /g, '-')}`}>{equipment.status}</span></p>\r\n        <DocumentList equipmentId={equipment.id} />\r\n        <div className=\"card-buttons\">\r\n          <button onClick={() => onInspect(equipment)} className=\"btn-primary\">Inspect</button>\r\n          <button onClick={() => onViewInspections(equipment.id)} className=\"btn-outline\">View History</button>\r\n          <button onClick={() => onEdit(equipment)} className=\"btn-secondary\">Edit</button>\r\n          <button onClick={() => generateEquipmentPdf(equipment)} className=\"btn-secondary\">PDF</button>\r\n          <button onClick={() => {\r\n            if (window.confirm(`Are you sure you want to delete ${equipment.manufacturer} ${equipment.model}?`)) {\r\n              onDelete(equipment.id);\r\n            }\r\n          }} className=\"btn-danger\">Delete</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EquipmentCard;","import React, { useEffect, useState } from 'react';\r\nimport EquipmentCard from './EquipmentCard';\r\nimport QrScanner from './QrScanner';\r\nimport './EquipmentList.css';\r\nimport { useEquipmentStore } from '../store';\r\n\r\nfunction EquipmentList({ onViewInspections, showToast }) {\r\n  const [equipment, setEquipment] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(5);\r\n\r\n  const [isScannerOpen, setIsScannerOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\nconst fetchEquipment = async () => {\r\n  try {\r\n    setLoading(true);\r\n    setError(null);\r\n    const equipmentData = await window.api.secure.equipment.getAll();\r\n    \r\n    if (Array.isArray(equipmentData)) {\r\n      setEquipment(equipmentData);\r\n    } else {\r\n      throw new Error('Invalid equipment data received');\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch equipment:', error);\r\n    setError(error.message || 'Failed to load equipment');\r\n    if (showToast) showToast('Failed to load equipment');\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n};\r\n\r\n  // Get state and actions from equipmentStore\r\n  const refresh = useEquipmentStore((state) => state.refresh);\r\n  const searchTerm = useEquipmentStore((state) => state.searchTerm);\r\n  const setSearchTerm = useEquipmentStore((state) => state.setSearchTerm);\r\n  const setEditingEquipment = useEquipmentStore((state) => state.setEditingEquipment);\r\n  const setInspectingEquipment = useEquipmentStore((state) => state.setInspectingEquipment);\r\n\r\n  useEffect(() => {\r\n    fetchEquipment();\r\n  }, [refresh]); // Re-fetch when refresh state changes\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await window.api.equipment.delete(id);\r\n      fetchEquipment();\r\n      if (showToast) showToast('Equipment deleted');\r\n    } catch (error) {\r\n      console.error('Failed to delete equipment:', error);\r\n      if (showToast) showToast('Failed to delete equipment');\r\n    }\r\n  };\r\n\r\n  const handleScan = async (scannedData) => {\r\n    if (scannedData) {\r\n      try {\r\n        const equipment = await window.api.equipment.getByEquipmentId(scannedData);\r\n        if (equipment) {\r\n          setInspectingEquipment(equipment);\r\n        } else {\r\n          alert('Equipment not found');\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to find equipment:', error);\r\n        alert('Error searching for equipment');\r\n      }\r\n    }\r\n    setIsScannerOpen(false);\r\n  };\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  // Filter equipment by search term (manufacturer or model)\r\n  const filteredEquipment = equipment.filter(\r\n    (item) =>\r\n      ((item.manufacturer || '') || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      ((item.model || '') || '').toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const currentItems = filteredEquipment.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <section className=\"equipment-list-section\">\r\n        <div className=\"toolbar\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by manufacturer or model...\"\r\n            value={searchTerm}\r\n            onChange={(e) => {\r\n              setSearchTerm(e.target.value);\r\n              setCurrentPage(1);\r\n            }}\r\n            className=\"equipment-search-input\"\r\n            aria-label=\"Search equipment\"\r\n            disabled\r\n          />\r\n          <button className=\"scan-button\" disabled>Scan Equipment QR</button>\r\n        </div>\r\n        <div className=\"equipment-card-grid\">\r\n          <div style={{ gridColumn: '1/-1', textAlign: 'center', padding: '2rem' }}>\r\n            <div className=\"loading-spinner\">Loading equipment...</div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <section className=\"equipment-list-section\">\r\n        <div className=\"toolbar\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by manufacturer or model...\"\r\n            value={searchTerm}\r\n            onChange={(e) => {\r\n              setSearchTerm(e.target.value);\r\n              setCurrentPage(1);\r\n            }}\r\n            className=\"equipment-search-input\"\r\n            aria-label=\"Search equipment\"\r\n            disabled\r\n          />\r\n          <button className=\"scan-button\" disabled>Scan Equipment QR</button>\r\n        </div>\r\n        <div className=\"equipment-card-grid\">\r\n          <div style={{ gridColumn: '1/-1', textAlign: 'center', padding: '2rem' }}>\r\n            <div className=\"error-message\">\r\n              <p>Error loading equipment: {error}</p>\r\n              <button onClick={fetchEquipment} className=\"retry-button\">\r\n                Retry\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section className=\"equipment-list-section\">\r\n      <div className=\"toolbar\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by manufacturer or model...\"\r\n          value={searchTerm}\r\n          onChange={(e) => {\r\n            setSearchTerm(e.target.value);\r\n            setCurrentPage(1);\r\n          }}\r\n          className=\"equipment-search-input\"\r\n          aria-label=\"Search equipment\"\r\n        />\r\n        <button onClick={() => setIsScannerOpen(true)} className=\"scan-button\">Scan Equipment QR</button>\r\n      </div>\r\n      <div className=\"equipment-card-grid\">\r\n        {currentItems.length === 0 ? (\r\n          <div style={{ gridColumn: '1/-1', textAlign: 'center', color: '#888' }}>\r\n            {filteredEquipment.length === 0 && equipment.length > 0 \r\n              ? 'No equipment matches your search criteria.'\r\n              : 'No equipment found.'\r\n            }\r\n          </div>\r\n        ) : (\r\n          currentItems.map((item) => (\r\n            <EquipmentCard\r\n              key={item.id}\r\n              equipment={item}\r\n              onEdit={setEditingEquipment}\r\n              onDelete={handleDelete}\r\n              onViewInspections={onViewInspections}\r\n              onInspect={setInspectingEquipment}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"pagination\">\r\n        {Array.from({ length: Math.ceil(filteredEquipment.length / itemsPerPage) }, (_, i) => (\r\n          <button\r\n            key={i + 1}\r\n            onClick={() => paginate(i + 1)}\r\n            className={currentPage === i + 1 ? 'active' : ''}\r\n            aria-current={currentPage === i + 1 ? 'page' : undefined}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {isScannerOpen && <QrScanner onScan={handleScan} onClose={() => setIsScannerOpen(false)} />}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default EquipmentList;\r\n","/**\r\n * Retry utility for handling transient failures\r\n */\r\n\r\n/**\r\n * Retries a function with exponential backoff\r\n * @param {Function} fn - The function to retry\r\n * @param {Object} options - Retry options\r\n * @param {number} options.maxRetries - Maximum number of retries (default: 3)\r\n * @param {number} options.baseDelay - Base delay in milliseconds (default: 1000)\r\n * @param {number} options.maxDelay - Maximum delay in milliseconds (default: 10000)\r\n * @param {Function} options.shouldRetry - Function to determine if error should be retried\r\n * @returns {Promise} The result of the function or the final error\r\n */\r\nexport async function retryWithBackoff(fn, options = {}) {\r\n  const {\r\n    maxRetries = 3,\r\n    baseDelay = 1000,\r\n    maxDelay = 10000,\r\n    shouldRetry = (error) => error?.error?.retryable === true\r\n  } = options;\r\n\r\n  let lastError;\r\n  \r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      const result = await fn();\r\n      \r\n      // If the result indicates an error but it's not retryable, return immediately\r\n      if (window.api?.isError(result) && !shouldRetry(result)) {\r\n        return result;\r\n      }\r\n      \r\n      // If it's a successful result or non-retryable error, return it\r\n      if (!window.api?.isError(result)) {\r\n        return result;\r\n      }\r\n      \r\n      // Store the error for potential retry\r\n      lastError = result;\r\n      \r\n      // If this is the last attempt, don't wait\r\n      if (attempt === maxRetries) {\r\n        break;\r\n      }\r\n      \r\n      // Calculate delay with exponential backoff\r\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\r\n      console.log(`Retrying operation in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n      \r\n    } catch (error) {\r\n      lastError = error;\r\n      \r\n      // If this is the last attempt or error is not retryable, break\r\n      if (attempt === maxRetries || !shouldRetry(error)) {\r\n        break;\r\n      }\r\n      \r\n      // Calculate delay with exponential backoff\r\n      const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);\r\n      console.log(`Retrying operation in ${delay}ms (attempt ${attempt + 1}/${maxRetries + 1})`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n  \r\n  return lastError;\r\n}\r\n\r\n/**\r\n * Retries a database read operation\r\n * @param {Function} dbOperation - The database operation to retry\r\n * @param {Object} options - Retry options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport function retryDatabaseRead(dbOperation, options = {}) {\r\n  return retryWithBackoff(dbOperation, {\r\n    maxRetries: 3,\r\n    baseDelay: 500,\r\n    maxDelay: 5000,\r\n    shouldRetry: (result) => {\r\n      // Retry on network errors, timeouts, or database locks\r\n      if (window.api?.isError(result)) {\r\n        const errorCode = result.error?.code;\r\n        return ['SQLITE_BUSY', 'SQLITE_LOCKED', 'NETWORK_ERROR', 'TIMEOUT'].includes(errorCode) ||\r\n               result.error?.retryable === true;\r\n      }\r\n      return false;\r\n    },\r\n    ...options\r\n  });\r\n}\r\n\r\n/**\r\n * Makes a write operation idempotent by checking if it already succeeded\r\n * @param {Function} checkFn - Function to check if operation already succeeded\r\n * @param {Function} writeFn - The write operation to perform\r\n * @param {Object} options - Options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport async function makeIdempotent(checkFn, writeFn, options = {}) {\r\n  try {\r\n    // First check if the operation already succeeded\r\n    const checkResult = await checkFn();\r\n    \r\n    if (!window.api?.isError(checkResult) && checkResult.data) {\r\n      console.log('Operation already completed, skipping write');\r\n      return checkResult;\r\n    }\r\n  } catch (error) {\r\n    // If check fails, proceed with write operation\r\n    console.log('Check operation failed, proceeding with write:', error);\r\n  }\r\n  \r\n  // Perform the write operation\r\n  return await writeFn();\r\n}\r\n\r\n/**\r\n * Wraps a database operation with user-friendly error handling\r\n * @param {Function} operation - The database operation\r\n * @param {Function} showToast - Toast notification function\r\n * @param {string} operationName - Human-readable operation name\r\n * @param {Object} options - Options\r\n * @returns {Promise} The result of the operation\r\n */\r\nexport async function withErrorHandling(operation, showToast, operationName, options = {}) {\r\n  const { \r\n    successMessage,\r\n    retryable = false,\r\n    onSuccess,\r\n    onError \r\n  } = options;\r\n  \r\n  try {\r\n    let result;\r\n    \r\n    if (retryable) {\r\n      result = await retryDatabaseRead(operation);\r\n    } else {\r\n      result = await operation();\r\n    }\r\n    \r\n    if (window.api?.isError(result)) {\r\n      const errorMessage = window.api.getErrorMessage(result);\r\n      console.error(`${operationName} failed:`, result.error);\r\n      \r\n      if (showToast) {\r\n        showToast(`${operationName} failed: ${errorMessage}`, 'error');\r\n      }\r\n      \r\n      if (onError) {\r\n        onError(result);\r\n      }\r\n      \r\n      return result;\r\n    }\r\n    \r\n    // Success case\r\n    if (successMessage && showToast) {\r\n      showToast(successMessage, 'success');\r\n    }\r\n    \r\n    if (onSuccess) {\r\n      onSuccess(result);\r\n    }\r\n    \r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error(`${operationName} failed with exception:`, error);\r\n    \r\n    if (showToast) {\r\n      showToast(`${operationName} failed: ${error.message}`, 'error');\r\n    }\r\n    \r\n    if (onError) {\r\n      onError(error);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport './AddEquipmentForm.css';\r\nimport { generateQrCode } from '../utils/qr';\r\nimport { withErrorHandling, makeIdempotent } from '../utils/retry';\r\nimport useUIStore from '../store/uiStore';\r\n\r\nconst initialState = {\r\n  equipmentId: '',\r\n  type: 'Overhead Crane',\r\n  manufacturer: '',\r\n  model: '',\r\n  serialNumber: '',\r\n  capacity: '',\r\n  installationDate: '',\r\n  location: '',\r\n  status: 'active',\r\n  files: [],\r\n  qrCodeData: '',\r\n};\r\n\r\nfunction AddEquipmentForm({ onEquipmentAdded }) {\r\n  const [formData, setFormData] = useState(initialState);\r\n  const showToast = useUIStore((state) => state.showToast);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFormData(prev => ({ ...prev, files: e.target.files }));\r\n  };\r\n\r\n  const handleAssociateQrCode = async () => {\r\n    if (!formData.equipmentId) {\r\n      alert('Please enter an Equipment ID first.');\r\n      return;\r\n    }\r\n    const qrCode = await generateQrCode(formData.equipmentId);\r\n    setFormData(prev => ({ ...prev, qrCodeData: qrCode }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const addEquipmentOperation = async () => {\r\n      const { files, ...equipmentData } = formData;\r\n      \r\n      // First, add the equipment\r\n      const equipmentResult = await window.api.equipment.create({\r\n        equipmentId: equipmentData.equipmentId,\r\n        type: equipmentData.type,\r\n        manufacturer: equipmentData.manufacturer,\r\n        model: equipmentData.model,\r\n        serialNumber: equipmentData.serialNumber,\r\n        capacity: equipmentData.capacity,\r\n        installationDate: equipmentData.installationDate,\r\n        location: equipmentData.location,\r\n        status: equipmentData.status,\r\n        qrCodeData: equipmentData.qrCodeData\r\n      });\r\n\r\n      // Then add documents with idempotent checks\r\n      const equipmentId = equipmentResult.lastID;\r\n      const documentResults = [];\r\n\r\n      for (const file of files) {\r\n        const checkExisting = async () => {\r\n          return await window.api.documents.checkExisting(equipmentId, file.name);\r\n        };\r\n\r\n        const addDocument = async () => {\r\n          // For now, we'll use the file path directly since we don't have document import yet\r\n          return await window.api.documents.create({\r\n            equipmentId: equipmentId,\r\n            fileName: file.name,\r\n            filePath: file.path || file.name,\r\n            hash: 'placeholder', // TODO: Calculate actual hash when document import is implemented\r\n            size: file.size || 0\r\n          });\r\n        };\r\n\r\n        const documentResult = await makeIdempotent(checkExisting, addDocument);\r\n        documentResults.push(documentResult);\r\n      }\r\n\r\n      // Check if any document operations failed - simplified since secure operations throw errors\r\n      // instead of returning error objects\r\n\r\n      return { success: true, data: { equipmentId, documentsAdded: documentResults.length } };\r\n    };\r\n\r\n    const result = await withErrorHandling(\r\n      addEquipmentOperation,\r\n      showToast,\r\n      'Add Equipment',\r\n      {\r\n        successMessage: `Equipment \"${formData.equipmentId}\" added successfully`,\r\n        onSuccess: () => {\r\n          onEquipmentAdded();\r\n          setFormData(initialState);\r\n        },\r\n        onError: (error) => {\r\n          // If it was a partial success, still refresh the list\r\n          if (error.error?.partialSuccess) {\r\n            onEquipmentAdded();\r\n            setFormData(initialState);\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"add-equipment-form\">\r\n      <h3>Add New Equipment</h3>\r\n      <div className=\"form-grid\">\r\n        <input name=\"equipmentId\" value={formData.equipmentId} onChange={handleChange} placeholder=\"Equipment ID\" required />\r\n        <select name=\"type\" value={formData.type} onChange={handleChange}>\r\n          <option>Overhead Crane</option>\r\n          <option>Gantry Crane</option>\r\n          <option>Jib</option>\r\n          <option>Monorail</option>\r\n          <option>Hoist</option>\r\n        </select>\r\n        <input name=\"manufacturer\" value={formData.manufacturer} onChange={handleChange} placeholder=\"Manufacturer\" />\r\n        <input name=\"model\" value={formData.model} onChange={handleChange} placeholder=\"Model\" />\r\n        <input name=\"serialNumber\" value={formData.serialNumber} onChange={handleChange} placeholder=\"Serial Number\" />\r\n        <input name=\"capacity\" type=\"number\" value={formData.capacity} onChange={handleChange} placeholder=\"Capacity\" />\r\n        <input name=\"installationDate\" type=\"date\" value={formData.installationDate} onChange={handleChange} />\r\n        <input name=\"location\" value={formData.location} onChange={handleChange} placeholder=\"Location\" />\r\n        <select name=\"status\" value={formData.status} onChange={handleChange}>\r\n          <option value=\"active\">Active</option>\r\n          <option value=\"out of service\">Out of Service</option>\r\n          <option value=\"under maintenance\">Under Maintenance</option>\r\n        </select>\r\n        <input type=\"file\" multiple onChange={handleFileChange} className=\"form-full-width\" />\r\n        <div className=\"form-buttons\">\r\n          <button type=\"button\" onClick={handleAssociateQrCode} className=\"btn-secondary\">Associate QR/NFC Tag</button>\r\n          <button type=\"submit\" className=\"btn-submit\">Add Equipment</button>\r\n        </div>\r\n        {formData.qrCodeData && (\r\n          <div className=\"qr-code-container\">\r\n            <img src={formData.qrCodeData} alt=\"QR Code\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddEquipmentForm;\r\n","import QRCode from 'qrcode';\r\n\r\nexport const generateQrCode = async (text) => {\r\n  try {\r\n    const qrCodeDataUrl = await QRCode.toDataURL(text, {\r\n      errorCorrectionLevel: 'H',\r\n      type: 'image/jpeg',\r\n      quality: 0.3,\r\n      margin: 1,\r\n      color: {\r\n        dark:\"#010599FF\",\r\n        light:\"#FFBF60FF\"\r\n      }\r\n    });\r\n    return qrCodeDataUrl;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return null;\r\n  }\r\n};","import React, { useState } from 'react';\nimport AddEquipmentForm from './AddEquipmentForm';\nimport EquipmentList from './EquipmentList';\nimport { useEquipmentStore } from '../store';\nimport './Equipment.css';\n\nfunction Equipment({ onViewInspections, showToast }) {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const searchTerm = useEquipmentStore((state) => state.searchTerm);\n  const setSearchTerm = useEquipmentStore((state) => state.setSearchTerm);\n  const filterStatus = useEquipmentStore((state) => state.filterStatus);\n  const setFilterStatus = useEquipmentStore((state) => state.setFilterStatus);\n\n  const handleEquipmentAdded = () => {\n    setShowAddForm(false);\n    if (showToast) {\n      showToast('Equipment added successfully!', 'success');\n    }\n  };\n\n  return (\n    <div className=\"equipment-container\" data-testid=\"equipment-container\">\n      <div className=\"equipment-header\">\n        <h2>Equipment Management</h2>\n        <div className=\"equipment-controls\">\n          <input\n            type=\"text\"\n            placeholder=\"Search equipment...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n            className=\"filter-select\"\n            aria-label=\"Filter by status\"\n          >\n            <option value=\"all\">All Status</option>\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n            <option value=\"under maintenance\">Under Maintenance</option>\n          </select>\n          <button\n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\"btn-primary\"\n          >\n            {showAddForm ? 'Cancel' : 'Add Equipment'}\n          </button>\n        </div>\n      </div>\n\n      {showAddForm && (\n        <div className=\"add-equipment-section\">\n          <AddEquipmentForm \n            onEquipmentAdded={handleEquipmentAdded} \n            showToast={showToast} \n          />\n        </div>\n      )}\n\n      <EquipmentList \n        onViewInspections={onViewInspections} \n        showToast={showToast}\n        searchTerm={searchTerm}\n        filterStatus={filterStatus}\n      />\n    </div>\n  );\n}\n\nexport default Equipment;","import React, { useState } from 'react';\r\nimport { QrReader } from 'react-qr-reader';\r\nimport Modal from './Modal';\r\n\r\nconst QrScanner = ({ onScan, onClose }) => {\r\n  const [data, setData] = useState('No result');\r\n\r\n  const handleScan = (result, error) => {\r\n    if (!!result) {\r\n      setData(result?.text);\r\n      onScan(result?.text);\r\n      onClose();\r\n    }\r\n\r\n    if (!!error) {\r\n      console.info(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal onClose={onClose}>\r\n      <div className=\"qr-scanner-container\">\r\n        <QrReader\r\n          onResult={handleScan}\r\n          constraints={{ facingMode: 'environment' }}\r\n          style={{ width: '100%' }}\r\n        />\r\n        <p>{data}</p>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QrScanner;"],"names":["_ref","equipmentId","documents","setDocuments","useState","useEffect","window","api","getByEquipmentId","then","result","isError","console","error","getErrorMessage","data","_jsxs","children","_jsx","map","doc","onClick","async","openFilePath","filePath","alert","handleOpenDocument","file_path","className","file_name","id","equipment","onEdit","onDelete","onViewInspections","onInspect","equipment_id","type","manufacturer","model","serial_number","status","toLowerCase","replace","DocumentList","generateEquipmentPdf","confirm","showToast","setEquipment","currentPage","setCurrentPage","itemsPerPage","isScannerOpen","setIsScannerOpen","loading","setLoading","setError","fetchEquipment","equipmentData","secure","getAll","Array","isArray","Error","message","refresh","useEquipmentStore","state","searchTerm","setSearchTerm","setEditingEquipment","setInspectingEquipment","handleDelete","delete","indexOfLastItem","indexOfFirstItem","filteredEquipment","filter","item","includes","currentItems","slice","placeholder","value","onChange","e","target","disabled","style","gridColumn","textAlign","padding","length","color","EquipmentCard","from","Math","ceil","_","i","undefined","QrScanner","onScan","scannedData","onClose","retryDatabaseRead","dbOperation","fn","options","arguments","maxRetries","baseDelay","maxDelay","shouldRetry","_error$error","retryable","lastError","attempt","_window$api","_window$api2","delay","min","pow","log","Promise","resolve","setTimeout","retryWithBackoff","_window$api3","_result$error","_result$error2","errorCode","code","makeIdempotent","checkFn","writeFn","_window$api4","checkResult","initialState","serialNumber","capacity","installationDate","location","files","qrCodeData","onEquipmentAdded","formData","setFormData","useUIStore","handleChange","name","prev","onSubmit","preventDefault","operation","operationName","successMessage","onSuccess","onError","_window$api5","errorMessage","withErrorHandling","create","lastID","documentResults","file","checkExisting","addDocument","fileName","path","hash","size","documentResult","push","success","documentsAdded","partialSuccess","required","multiple","qrCode","QRCode","text","errorCorrectionLevel","quality","margin","dark","light","err","generateQrCode","src","alt","showAddForm","setShowAddForm","filterStatus","setFilterStatus","AddEquipmentForm","handleEquipmentAdded","EquipmentList","setData","Modal","QrReader","onResult","handleScan","info","constraints","facingMode","width"],"sourceRoot":""}